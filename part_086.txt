
smess " строка приглашения,
def " предлагаемое значение по умолчанию,
min,max " интервал возможных значений,
R " результат ввода.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание.
При использовании ANSI следует использовать функцию ReadLong.

ReadString  Ввести строку заданной длины
Пример...
Аналог данной функции при использовании Automation " метод
KompasObject::ksReadString.
Синтаксис:
int ReadString(char *smess, char *str, int maxlen);
Входные параметры:

smess " строка приглашения,
maxlen " максимально допустимая длина строки,
str " результат ввода.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.
4685



Примечание.
При использовании Unicode следует использовать функцию ReadStringW.

ReadStringW  Ввести строку заданной длины 
(Unicode)
Аналог данной функции при использовании Automation " метод
KompasObject::ksReadString.
Синтаксис:
int LIB_FUNC ReadString(LPWSTR smess, char *str, int maxlen);
Входные параметры:

smess " строка приглашения,
maxlen " максимально допустимая длина строки,
str " результат ввода.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание.
При использовании ANSI следует использовать функцию ReadString.

Функции вывода на экран
Функции данного раздела обеспечивают вывод на экран сообщений, подсказок, слайдов
и обработку результата работы библиотечной функции.

CommandWindowCallBack  Прототип функции 
обратной связи для запроса окна с деревом команд
Синтаксис:
typedef int ( WINAPI *CommandWindowCallBack )( int com,
RequestInfo * info );
Входные параметры:

com " идентификатор команды из окна команд,
info " указатель на область памяти для замены состава команд.

Возвращаемое значение:

1 " если нужно продолжить запрос,
0 " если нужно прекратить запрос.

Примечание.
4686



При использовании Unicode следует использовать функцию CommandWindowCallBackW.

CommandWindowCallBackW  Прототип функции 
обратной связи для запроса окна с деревом команд 
(Unicode )
Синтаксис:
typedef int ( WINAPI *CommandWindowCallBackW )( int com,
RequestInfoW * info, );
Входные параметры:

com " идентификатор команды из окна команд,
info " указатель на область памяти для замены состава команд.

Возвращаемое значение:

1 " если нужно продолжить запрос,
0 " если нужно прекратить запрос.

Примечание.
При использовании ANSI следует использовать функцию CommandWindowCallBack.

CursorCallBack  Прототип функции обратной связи 
для запроса точки
Синтаксис:
typedef int ( WINAPI *CursorCallBack )( int com,
double * x,
double * y,
RequestInfo * info,
void *phantom,
int dynamic );
Входные параметры:

com " идентификатор команды из окна команд,
x, y " координаты точки привязки,
info " указатель на область памяти для замены состава команд,
phantom " указатель на фантомную группу,
dynamic " признак динамического вызова.

Возвращаемое значение:

1 " если нужно продолжить запрос,
0 " если нужно прекратить запрос.
4687



Примечание.
При использовании Unicode следует использовать функцию CursorCallBackW.

CursorCallBackW  Прототип функции обратной связи 
для запроса точки (Unicode)
Синтаксис:
typedef int ( WINAPI *CursorCallBackW )( int com,
double * x,
double * y,
RequestInfoW * info,
void *phantom,
int dynamic );
Входные параметры:

com " идентификатор команды из окна команд,
x, y " координаты точки привязки,
info " указатель на область памяти для замены состава команд,
phantom " указатель на фантомную группу,
dynamic " признак динамического вызова.

Возвращаемое значение:

1 " если нужно продолжить запрос,
0 " если нужно прекратить запрос.

Примечание.
При использовании ANSI следует использовать функцию CursorCallBack.

DrawBitmap  Отрисовать растровый слайд
Пример...
Аналог данной функции при использовании Automation " метод
KompasObject::ksDrawBitmap.
Синтаксис:
int DrawBitmap ( void *Hwindow, unsigned int BitmapID );
Входной параметр:

HWindow " дескриптор окна, в котором нужно отрисовать BITMAP"слайд,
BitmapID " идентификатор BITMAP в файле ресурсов.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.
4688



DrawSlide  Отрисовать векторный слайд
Пример...
Аналог данной функции при использовании Automation " метод
KompasObject::ksDrawSlide.
Синтаксис:
int DrawSlide ( void *Hwindow, unsigned int SlideID );
Входной параметр:

HWindow " дескриптор окна, в котором нужно отрисовать слайд,
SlideID " идентификатор слайда в файле ресурсов.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Error  Выдать сообщение об ошибке
Пример...
Аналог данной функции при использовании Automation " метод KompasObject::ksError.
Синтаксис:
void Error ( char * s );
Входной параметр:

s " строка с текстом сообщения.

Примечание::

1.  После вывода сообщения будет ожидаться нажатие любой клавиши.
2.  При использовании Unicode следует использовать функцию ErrorW.

ErrorW  Выдать сообщение об ошибке (Unicode)
Аналог данной функции при использовании Automation " метод KompasObject::ksError.
Синтаксис:
void LIB_FUNC ErrorW( LPWSTR s );
Входной параметр:

s " строка с текстом сообщения.

Примечание::
4689



1.  После вывода сообщения будет ожидаться нажатие любой клавиши.
2.  При использовании ANSI следует использовать функцию Error.

FilePreviewFuncCallBack  Прототип функции 
обратной связи для функций выбора файлов
Пример...
Синтаксис:
typedef int ( WINAPI *FilePreviewFuncCallBack )( HWND HWindow, char * fileName ); 
Входные параметры:

HWindow " дескриптор окна просмотра,
fileName " файл, который нужно показать в окне просмотра.

Возвращаемое значение:

1 " если файл отрисован,
0 " если файл не отрисован.

См. также:
ksInitFilePreviewFunc
Примечание.
При использовании Unicode следует использовать функцию FilePreviewFuncCallBackW.

FilePreviewFuncCallBackW  Прототип функции 
обратной связи для функций выбора файлов 
(Unicode )
Синтаксис:
typedef int ( WINAPI *FilePreviewFuncCallBackW )( HWND HWindow, LPWSTR fileName );
Входные параметры:

HWindow " дескриптор окна просмотра,
fileName " файл, который нужно показать в окне просмотра.

Возвращаемое значение:

1 " если файл отрисован,
0 " если файл не отрисован.

См. также:
ksInitFilePreviewFuncW
Примечание.
При использовании ANSI следует использовать функцию FilePreviewFuncCallBack.
4690



GetParentHWindow  Вернуть дескриптор скрытого 
окна
Аналог данной функции при использовании Automation " метод
KompasObject::ksDrawKompasText.
Синтаксис:
void * LIB_FUNC GetParentHWindow();
Примечание.
Можно передавать как Parent дескриптор главного окна.

GetHWindow  Получить дескриптор главного окна 
КОМПАСГРАФИК
Пример...
Аналог данной функции при использовании Automation " метод
KompasObject::ksGetHWindow.
Синтаксис:
void * far __export pascal GetHWindow ( void );
Возвращаемое значение:

дескриптор главного окна, который используется 
функциями WINDOWS для работы с окнами.

ksDrawBitmapEx  Отрисовать растровый слайд в 
заданном окне
Аналог данной функции при использовании Automation " метод
KompasObject::ksDrawBitmapEx.
Синтаксис:
int ksDrawBitmapEx ( void* HWindow,
unsigned int sldID,
HINSTANCE hInst )
Входной параметр:

HWindow " дескриптор окна, в котором нужно отрисовать BITMAP"слайд,
sldID " идентификатор BITMAP"слайда в файле ресурсов,
hInst " hInstance текущей библиотеки или NULL, если она одна.

Возвращаемое значение:
4691



1 " в случае удачного завершения,
0 " в случае неудачи.

ksDrawKompasDocument  Показать КОМПАС
документ в виде слайда в окне
Пример...
Синтаксис:
int ksDrawKompasDocument ( void * HWindow, char * docFileName );
Входные параметры:

HWindow " дескриптор окна просмотра,
docFileName " полное имя файла документа.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Действие функции распространяется также на фрагменты и модели из библиотек. При
этом имя файла должно иметь вид "c:\gr\lib1.l3d|детали|литье|фланец", 
где:

▼ c:\gr\lib1.l3d " имя файла библиотеки,
▼ |детали|литье| " разделы, подразделы внутри библиотеки,
▼ фланец " имя фрагмента или модели.
2.  При использовании Unicode следует использовать функцию ksDrawKompasDocumentW.

ksDrawKompasDocumentW  Показать КОМПАС
документ в виде слайда в окне (Unicode)
Синтаксис:
int LIB_FUNC ksDrawKompasDocumentW ( void * HWindow, LPWSTR docFileName );
Входные параметры:

HWindow " дескриптор окна просмотра,
docFileName " полное имя файла документа.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
4692



1.  Действие функции распространяется также на фрагменты и модели из библиотек. При
этом имя файла должно иметь вид "c:\gr\lib1.l3d|детали|литье|фланец", где:

▼ c:\gr\lib1.l3d " имя файла библиотеки,
▼ |детали|литье| " разделы, подразделы внутри библиотеки,
▼ фланец " имя фрагмента или модели.
2.  При использовании ANSI следует использовать функцию ksDrawKompasDocument.

ksDrawKompasGroup  Отрисовать группу в виде 
слайда в окне
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksDrawKompasGroup.
Синтаксис:
int ksDrawKompasGroup ( void * HWindow, reference gr );
Входные параметры:

HWindow " дескриптор окна,
gr " указатель на группу.

Описание:
Функция выполняет отрисовку указанной группы в виде слайда в присланном окне.

ksDrawKompasText  Отрисовать текст в формате 
КОМПАС в окне
Аналог данной функции при использовании Automation " метод
KompasObject::ksDrawKompasText.
Синтаксис:
int LIB_FUNC ksDrawKompasText( void *HWindow, LPSTR text );
Входной параметр:

HWindow " дескриптор окна для отрисовки слайда,
text " текст.

Примечание.
При использовании Unicode следует использовать функцию ksDrawKompasTextW.

ksDrawKompasTextW  Отрисовать текст в формате 
КОМПАС в окне (Unicode )
Аналог данной функции при использовании Automation " метод
KompasObject::ksDrawKompasText.
4693



Синтаксис:
int LIB_FUNC ksDrawKompasTextW( void *HWindow, LPWSTR text );
Входной параметр:

HWindow " дескриптор окна для отрисовки слайда,
text " текст.

Примечание.
При использовании ANSI следует использовать функцию ksDrawKompasText.

ksDrawSlideEx  Отрисовать слайд (расширенная 
функция)
Аналог данной функции при использовании Automation " метод
KompasObject::ksDrawSlideEx.
Синтаксис:
int ksDrawSlideEx ( void *HWindow,
unsigned int SlideID,
HINSTANCE hInstance );
Входные параметры:

HWindow " дескриптор окна,
SlideID " номер слайда в файле ресурсов приложения,
hInstance " NULL " отрисовка в текущей библиотеке, 

 hInstance " в подключаемой.

Возвращаемое значение:

1 " в случае успеха,
0 " в случае неудачи.

ksDrawSlideFromFile  Отрисовать слайд в окне из 
текстового файла, содержащего блок RCDATA
Пример...
Аналог данной функции при использовании Automation " метод
KompasObject::ksDrawSlideFromFile.
Синтаксис:
int ksDrawSlideFromFile ( void *Hwindow, char * fileName );
Входной параметр:
4694



Hwindow " дескриптор окна,
fileName " полное имя файла.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание:

1.  Функция предназначена для отладки слайдов. Позволяет просмотреть отредактирован"
ный слайд в окне диалога без перетрансляции тестовой библиотеки.

2.  При использовании Unicode следует использовать функцию ksDrawSlideFromFileW.

ksDrawSlideFromFileW  Отрисовать слайд в окне из 
текстового файла, содержащего блок RCDATA 
(Unicode)
Аналог данной функции при использовании Automation " метод
KompasObject::ksDrawSlideFromFile.
Синтаксис:
int LIB_FUNC ksDrawSlideFromFileW ( void *Hwindow, LPWSTR fileName );
Входной параметр:

Hwindow " дескриптор окна,
fileName " полное имя файла.

Возвращаемое значение:

1 " в случае удачного завершения.
0 " в случае неудачи.

Примечание:

1.  Функция предназначена для отладки слайдов. Позволяет просмотреть отредактирован"
ный слайд в окне диалога без перетрансляции тестовой библиотеки.

2.  При использовании ANSI следует использовать функцию ksDrawSlideFromFile.

ksInitFilePreviewFunc  Инициализировать адрес 
пользовательской функции просмотра 
пользовательского файла
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksInitFilePreviewFunc.
Синтаксис:
4695



int ksInitFilePreviewFunc ( FilePreviewFuncCallBack func );
Входные параметры:

func " пользовательская функция просмотра пользовательского файла.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

См. также:
FilePreviewFuncCallBack
Примечание:

1.  Если func вернет 1 " функция отрисовала файл, если 0 " функция не отрисовала файл,
файл будет отрисовывать КОМПАС.

2.  При использовании Unicode следует использовать функцию ksInitFilePreviewFuncW.

ksInitFilePreviewFuncW  Инициализировать адрес 
пользовательской функции просмотра 
пользовательского файла (Unicode)
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksInitFilePreviewFuncW.
Синтаксис:
int ksInitFilePreviewFuncW ( FilePreviewFuncCallBackW func );
Входные параметры:

func " пользовательская функция просмотра пользовательского файла.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

См. также:
FilePreviewFuncCallBackW
Примечание:

1.  Если func вернет 1 " функция отрисовала файл, если 0 " функция не отрисовала файл,
файл будет отрисовывать КОМПАС.

2.  При использовании ANSI следует использовать функцию ksInitFilePreviewFunc.
4696



ksSetDebugMessagesMode  Включить/выключить 
режим автоматического вывода сообщений о 
результатах работы библиотеки
Аналог данной функции при использовании Automation " метод
KompasObject::ksSetDebugMessagesMode
Синтаксис:
int LIB_FUNC ksSetDebugMessagesMode( int debugMode );
Входной параметр:

debugMode " флаг состояния режима (1 " включить, 0 " выключить).

Возвращаемое значение:

" предыдущее состояние флага режима.

Примечание
1.  При включенном режиме сообщения выдаются сразу после возникновении ошибки.
2.  Данной функцией рекомендуется пользоваться только в режиме отладки библиотеки.
3.  Дополнительно о работе с ошибками библиотеки см. ReturnResult (для Automation "

KompasObject::ksReturnResult).
4.  После показа сообщения, если ошибка не является фатальной, флаг ошибки сбрасыва"

ется.

ksSlideBackground  Установить цвет фона по 
умолчанию для отрисовки слайда
Пример...
Аналог данной функции при использовании Automation " метод
KompasObject::ksSlideBackground.
Синтаксис:
void ksSlideBackground ( COLORREF color );
Входной параметр:

color " цвет фона слайда.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.
4697



Message  Выдать сообщение
Пример...
Аналог данной функции при использовании Automation " метод
KompasObject::ksMessage.
Синтаксис:
void Message ( char * s );
Входной параметр:

s " строка с текстом сообщения.

Примечание.
При использовании Unicode следует использовать функцию MessageW.

MessageW  Выдать сообщение (Unicode)
Аналог данной функции при использовании Automation " метод
KompasObject::ksMessage.
Синтаксис:
void LIB_FUNK MessageW ( LPWSTR s );
Входной параметр:

s " строка с текстом сообщения.

Примечание.
При использовании ANSI следует использовать функцию Message.

MessageBoxResult  Вывести сообщение, 
соответствующее результату работы библиотеки (с 
кодом ошибки)
Пример...
Аналог данной функции при использовании Automation " метод
KompasObject::ksMessageBoxResult.
Синтаксис:
void MessageBoxResult ( void );
Возвращаемое значение:

TRUE " в случае удачного завершения,
FALSE " в случае неудачи.

Примечание:
Функция сбрасывает флаг ошибки в случае, если она не является фатальной.
4698



Pause  Получить сообщение с ожиданием нажатия 
клавиши
Пример...
Синтаксис:
void Pause ( char * s );
Входной параметр:

s " строка с текстом сообщения.

Примечание:
После вывода сообщения будет ожидаться нажатие любой клавиши.

PlacementCallBack  Прототип функции обратной 
связи для запроса точки и угла
Синтаксис:
typedef int ( WINAPI *PlacementCallBack )( int com,
double * x,
double * y,
double * angle,
RequestInfo * info,
void *phantom,
int dynamic );
Входные параметры:

com " идентификатор команды из окна команд,
x, y " координаты точки привязки,
angle " угол наклона,
info " указатель на область памяти для замены состава команд,
phantom " указатель на фантомную группу,
dynamic " признак динамического вызова.

Возвращаемое значение:

1 " если нужно продолжить запрос,
0 " если нужно прекратить запрос.

Примечание.
При использовании Unicode следует использовать функцию PlacementCallBackW.

PlacementCallBackW  Прототип функции обратной 
связи для запроса точки и угла (Unicode)
Синтаксис:
4699



typedef int ( WINAPI *PlacementCallBackW )( int com,
double * x,
double * y,
double * angle,
RequestInfoW * info,
void *phantom,
int dynamic );
Входные параметры:

com " идентификатор команды из окна команд,
x, y " координаты точки привязки,
angle " угол наклона,
info " указатель на область памяти для замены состава команд,
phantom " указатель на фантомную группу,
dynamic " признак динамического вызова.

Возвращаемое значение:

1 " если нужно продолжить запрос,
0 " если нужно прекратить запрос.

Примечание.
При использовании ANSI следует использовать функцию PlacementCallBack.

ReturnResult  Получить номер ошибки
Пример...
Аналог данной функции при использовании Automation " метод
KompasObject::ksReturnResult.
Синтаксис:
int ReturnResult ( void );
Возвращаемое значение:

" код ошибки в зависимости от типа документа: графического или 
документа"модели при выполнении библиотечной программы

0 " при успешном завершении программы.

Примечание:

1.  Коды ошибок документа"модели и графического документа частично совпадают, поэ"
тому их нужно обрабатывать в зависимости от выполняемых операций.

2.  Ошибка с номером>0 не является фатальной. Отрицательный номер ошибки приводит
к завершению программы.

3.  Текст ошибок можно получить, используя функцию StrResult.
4.  Сообщение с текстом ошибки можно получить, используя функцию MessageBoxResult.
4700



5.  Сбросить ошибку, если она не фатальная, можно, используя функцию ResultNULL.

StrResult  Вывести строку, соответствующую 
результату работы библиотеки
Пример...
Аналог данной функции при использовании Automation " метод
KompasObject::ksStrResult.
Синтаксис:
void StrResult ( char *str, int limit );
Входной параметр:

limit " ограничение по длине строки.

Возвращаемое значение:

str " строка сообщения, соответствующая результату работы 
библиотеки.

Примечание:

1.  Функция сбрасывает флаг ошибки в случае, если она не является фатальной.
2.  При использовании Unicode следует использовать функцию StrResultW.

StrResultW  Вывести строку, соответствующую 
результату работы библиотеки (Unicode )
Аналог данной функции при использовании Automation " метод
KompasObject::ksStrResult.
Синтаксис:
void LIB_FUNC StrResultW (LPWSTR str, int limit );
Входной параметр:

limit " ограничение по длине строки.

Возвращаемое значение:

str " строка сообщения, соответствующая результату работы библиотеки.

Примечание:

1.  Функция сбрасывает флаг ошибки в случае, если она не является фатальной.
2.  При использовании ANSI следует использовать функцию StrResult.
4701



WriteSlide  Записать выделенные объекты чертежа 
в формате векторного слайда КОМПАС
Пример...
Аналог данной функции при использовании Automation " метод
KompasObject::ksWriteSlide.
Синтаксис:
int WriteSlide ( char *filename, unsigned int ID, double x, double y );
Входной параметр:

filename " имя файла для записи,
ID " идентификатор слайда в файле ресурсов,
x,y " базовая точка.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание.
При использовании Unicode следует использовать функцию WriteSlideW.

WriteSlideW  Записать выделенные объекты 
чертежа в формате векторного слайда КОМПАС 
(Unicode)
Аналог данной функции при использовании Automation " метод
KompasObject::ksWriteSlide.
Синтаксис:
int LIB_FUNC WriteSlideW ( LPWSTR filename, unsigned int ID, double x, double y );
Входной параметр:

filename " имя файла для записи,
ID " идентификатор слайда в файле ресурсов,
x,y " базовая точка.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание.
При использовании ANSI следует использовать функцию WriteSlide.
4702



YesNo  Подтвердить действие или отказаться от 
него
Пример...
Аналог данной функции при использовании Automation " метод KompasObject::ksYesNo.
Синтаксис:
int YesNo ( char * s );
Входной параметр:

s " строка сообщения.

Возвращаемое значение:

1 " при подтверждении действия,
0 " при отказе,
"1 " при отмене действия.

Примечание:

1.  Подтверждение означает нажатие в диалоге кнопки Да (Yes, OK); отказ " нажатие кнопки
Нет (No); отмена действия " нажатие кнопки Отмена (Cansel).

2.  При использовании Unicode следует использовать функцию YesNoW.

YesNoW  Подтвердить действие или отказаться от 
него (Unicode)
Аналог данной функции при использовании Automation " метод KompasObject::ksYesNo.
Синтаксис:
int LIB_FUNC YesNoW( LPWSTR s );
Входной параметр:

s " строка сообщения.

Возвращаемое значение:

1 " при подтверждении действия,
0 " при отказе,
"1 " при отмене действия.

Примечание:

1.  Подтверждение означает нажатие в диалоге кнопки Да (Yes, OK); отказ " нажатие кнопки
Нет (No); отмена действия " нажатие кнопки Отмена (Cansel).

2.  При использовании ANSI следует использовать функцию YesNo.
4703



Сервисные библиотечные функции
EditMacroMode  Получить режим работы функции 
библиотеки (создание нового или редактирование 
существующего макроэлемента)
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/Z_MACRO.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksEditMacroMode.
Синтаксис:
reference EditMacroMode();
Возвращаемое значение:

указатель на редактируемый " при редактировании макроэлемента,
макроэлемент 
0 " при создании макроэлемента.

 ksConvertLangMenu  Конвертировать меню в 
соответствии с текущим словарем
Аналог данной функции при использовании Automation " метод
KompasObject::ksConvertLangMenu.
Синтаксис:
HMENU ksConvertLangMenu (HMENU hMenu);
Входные параметры:

hMenu " дескриптор исходного меню.

Возвращаемое значение:

" дескриптор переведённого меню.

ksConvertLangStr  Конвертировать строку src в dst в 
соответствии с текущим словарем
Аналог данной функции при использовании Automation " метод
KompasObject::ksConvertLangStr.
4704



Синтаксис:
int ksConvertLangStr (char* src, char* dst, int dstMaxLen);
Входные параметры:

src " строка для конвертирования,
dstMaxLen " максимальная длина переведённой строки.

Выходные параметры:

dst " переведенная строка.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание.

1. Функция устарела, предпочтительнее использовать ksConvertLangStrEx
2. Словарь сохраняется в файле с расширением dic. Строки файла должны иметь следую"

щий формат:
"Вращение"="Rotation"
"Параметры"="Parameters"
...
...
"Перемещение"="Moving"
Строки файла должны быть отсортированы по алфавиту.

3. При использовании Unicode следует использовать функцию ksConvertLangStrW.

ksConvertLangStrW  Конвертировать строку src в dst 
в соответствии с текущим словарем (Unicode)
Аналог данной функции при использовании Automation " метод
KompasObject::ksConvertLangStr.
Синтаксис:
int LIB_FUNC ksConvertLangStr (LPWSTR src, LPWSTR dst, int dstMaxLen);
Входные параметры:

src " строка для конвертирования,
dstMaxLen " максимальная длина переведённой строки.

Выходные параметры:

dst " переведенная строка.
4705



Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание.

1. Функция устарела, предпочтительнее использовать ksConvertLangStrEx
2. Словарь сохраняется в файле с расширением dic. Строки файла должны иметь следую"

щий формат:
"Вращение"="Rotation"
"Параметры"="Parameters"
...
...
"Перемещение"="Moving"
Строки файла должны быть отсортированы по алфавиту.

3. При использовании ANSI следует использовать функцию ksConvertLangStr.

ksConvertLangStrEx  Конвертировать строку с 
идентификатором в соответствии с текущим 
словарем
Аналог данной функции при использовании Automation " метод
KompasObject::ksConvertLangStrEx.
Синтаксис:
int ksConvertLangStrEx (HINSTANCE hInstance,
unsigned int strID,
char* dst,
int dstMaxLen );
Входные параметры:

hInstance " HINSTANCE модуля, в котором находится переводимая строка,
strID " идентификатор строки,
dst " результат " переведенная строка,
dstMaxLen " максимально допустимая длина строки.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание.
При использовании Unicode следует использовать функцию ksConvertLangStrExW.
4706



ksConvertLangStrExW  Конвертировать строку с 
идентификатором в соответствии с текущим 
словарем (Unicode)
Аналог данной функции при использовании Automation " метод
KompasObject::ksConvertLangStrEx.
Синтаксис:
int LIB_FUNC ksConvertLangStrEx (HINSTANCE hInstance,
unsigned int strID,
LPWSTR dst,
int dstMaxLen );
Входные параметры:

hInstance " HINSTANCE модуля, в котором находится переводимая строка,
strID " идентификатор строки,
dst " результат " переведенная строка,
dstMaxLen " максимально допустимая длина строки.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание.
При использовании ANSI следует использовать функцию ksConvertLangStrEx.

ksConvertLangWindow  Конвертировать окно с 
входящими дочерними окнами в соответствии с 
текущим словарем
Аналог данной функции при использовании Automation " метод
KompasObject::ksConvertLangWindow.
Синтаксис:
int ksConvertLangWindow (HWND hWnd);
Входные параметры:

hWnd " дескриптор окна,

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.
4707



ksConvertLangWindowEx  Конвертировать окно с 
входящими дочерними окнами в соответствии с 
текущим словарем
Аналог данной функции при использовании Automation " метод
KompasObject::ksConvertLangWindowEx.
Синтаксис:
int ksConvertLangWindowEx (HWND hWnd,
HINSTANCE hInstance,
char* dlgID);
Входные параметры:

hWnd " дескриптор окна,
hInstance " HINSTANCE модуля, в котором находится переводимый диалог,
dlgID " имя ресурса диалога.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание.
При использовании Unicode следует использовать функцию ksConvertLangWindowExW. 

ksConvertLangWindowExW  Конвертировать окно с 
входящими дочерними окнами в соответствии с 
текущим словарем (Unicode)
Аналог данной функции при использовании Automation " метод
KompasObject::ksConvertLangWindowEx.
Синтаксис:
int LIB_FUNC ksConvertLangWindowExW (HWND hWnd,
HINSTANCE hInstance,
LPWSTR dlgID);
Входные параметры:

hWnd " дескриптор окна,
hInstance " HINSTANCE модуля, в котором находится переводимый диалог,
dlgID " имя ресурса диалога.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание.
4708



При использовании ANSI следует использовать функцию ksConvertLangWindowEx.

ksExecuteLibraryCommand  Выполнить команду 
другой библиотеки
Пример...
Аналог данной функции при использовании Automation " метод
KompasObject::ksExecuteLibraryCommand.
Синтаксис:
int ksExecuteLibraryCommand (char *fileName, int command);
Входные параметры:

fileName " имя файла прикладной библиотеки,
command " номер команды из библиотеки.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание:

1. Если задано короткое имя файла прикладной библиотеки (без пути), то эта библиотека
ищется в подпапке …\Libs главной папки КОМПАС.

2. При использовании Unicode следует использовать функцию
ksExecuteLibraryCommandW.

ksExecuteLibraryCommandW  Выполнить команду 
другой библиотеки (Unicode)
Аналог данной функции при использовании Automation " метод
KompasObject::ksExecuteLibraryCommand.
Синтаксис:
int LIB_FUNC ksExecuteLibraryCommandW (LPWSTR fileName, int command);
Входные параметры:

fileName " имя файла прикладной библиотеки,
command " номер команды из библиотеки.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
4709



1. Если задано короткое имя файла прикладной библиотеки (без пути), то эта библиотека
ищется в подпапке …\Libs главной папки КОМПАС.

2. При использовании ANSI следует использовать функцию ksExecuteLibraryCommand.

ksGetLibraryTreeStruct  Получить структуру дерева 
библиотеки документов и библиотеки атрибутов
Аналог данной функции при использовании Automation " метод
KompasObject::ksGetLibraryTreeStruct.
Синтаксис:
int ksGetLibraryTreeStruct (char * libName, TreeNodeParam * root);
Входные параметры:

libName " полное имя файла библиотеки моделей, фрагментов, атрибутов,
root " заполняется параметрами корня дерева.

Структура параметров узла дерева объектов библиотеки TreeNodeParam...
Возвращаемое значение:

0 " в случае неудачи.

Примечание.
При использовании Unicode следует использовать функцию ksGetLibraryTreeStructW.

ksGetLibraryTreeStructW  Получить структуру дерева 
библиотеки документов и библиотеки атрибутов 
(Unicode)
Аналог данной функции при использовании Automation " метод
KompasObject::ksGetLibraryTreeStruct.
Синтаксис:
int LIB_FUNC ksGetLibraryTreeStructW (LPWSTR libName, TreeNodeParam * root);
Входные параметры:

libName " полное имя файла библиотеки моделей, фрагментов, атрибутов,
root " заполняется параметрами корня дерева.

Возвращаемое значение:

0 " в случае неудачи.

Примечание.
При использовании ANSI следует использовать функцию ksGetLibraryTreeStruct.
4710



ksGetSystemControlStartResult  Проверить, запущен 
SystemControlStart или нет
Пример...
Аналог данной функции при использовании Automation " метод
KompasObject::ksGetSystemControlStartResult.
Синтаксис:
int ksGetSystemControlStartResult();
Входные параметры:

" Не используется.

Возвращаемое значение:

" тип выхода из режима работы под управлением системы КОМПАС.

ksOpenHelpFile  Открыть файл справки
Пример...
Аналог данной функции при использовании Automation " метод
KompasObject::ksOpenHelpFile
Синтаксис:
void ksOpenHelpFile (char * file, unsigned int command, unsigned int id);
Входные параметры:

file " полное имя файла Справки,
command " тип Справки (контекстная, по команде и т.д.),
id " идентификатор страницы справки.

Возвращаемое значение:

TRUE " в случае удачного завершения,
FALSE " в случае неудачи.

Примечание :

1. Синтаксис соответствует::WinHelp.
2. Функция открывает файл Справки КОМПАС.
3. При закрытии системы окно Справки закроется автоматически.
4. При использовании Unicode следует использовать функцию ksOpenHelpFileW.

ksOpenHelpFileW  Открыть файл справки (Unicode)
Аналог данной функции при использовании Automation " метод
KompasObject::ksOpenHelpFile
4711



Синтаксис:
void LIB_FUNC ksOpenHelpFileW (LPWSTR file, unsigned int command, unsigned int id);
Входные параметры:

file " полное имя файла Справки,
command " тип Справки (контекстная, по команде и т.д.),
id " идентификатор страницы справки.

Возвращаемое значение:

TRUE " в случае удачного завершения,
FALSE " в случае неудачи.

Примечание:

1. Синтаксис соответствует::WinHelp.
2. Функция открывает файл Справки КОМПАС.
3. При закрытии системы окно Справки закроется автоматически.
4. При использовании ANSI следует использовать функцию ksOpenHelpFile.

Примечание:
Функция обнуляет результат работы библиотеки, если ошибка не фатальная.

ksSetCurrentLibrary  Установить текущую 
библиотеку
Пример...
Аналог данной функции при использовании Automation " метод
KompasObject::ksConvertLangMenu.
Синтаксис:
int ksSetCurrentLibrary (char * libname, long hModule);
Входные параметры:

libname " имя библиотеки,
hModule " идентификатор модуля Dll библиотеки.

Возвращаемое значение:

1 " библиотека стала текущей,
0 " в случае ошибки.

Примечание:
4712



1. Назначить библиотеку текущей можно либо по идентификатору модуля Dll библиотеки,
либо по имени библиотеки.

2. Данный метод следует использовать осторожно, иначе можно нарушить последователь"
ность выполнения библиотек.

3. Метод может быть применен к подключенной библиотеке.
4. Метод позволяет остановить режим SystemControlStart, запущенный не из выполняемой

(текущей) библиотеки.
5. При использовании Unicode следует использовать функцию ksSetCurrentLibraryW.

 ksSetCurrentLibraryW  Установить текущую 
библиотеку (Unicode)
Аналог данной функции при использовании Automation " метод
KompasObject::ksConvertLangMenu.
Синтаксис:
int LIB_FUNC ksSetCurrentLibrary (LPWSTR libname, long hModule);
Входные параметры:

libname " имя библиотеки,
hModule " идентификатор модуля Dll библиотеки.

Возвращаемое значение:

1 " библиотека стала текущей,
0 " в случае ошибки.

Примечание:

1.  Назначить библиотеку текущей можно либо по идентификатору модуля Dll библиотеки,
либо по имени библиотеки.

2.  Данный метод следует использовать осторожно, иначе можно нарушить последователь"
ность выполнения библиотек.

3. Метод может быть применен к подключенной библиотеке.
4.  Метод позволяет остановить режим SystemControlStart, запущенный не из выполняемой

(текущей) библиотеки.
5. При использовании ANSI следует использовать функцию ksSetCurrentLibrary.

ResultNULL Обнулить результат работы 
библиотеки, если ошибка не фатальная
Аналог данной функции при использовании Automation " метод
KompasObject::ksResultNULL.
Синтаксис:
int ResultNULL();
4713



SystemControlStart  Перейти под управление 
КОМПАСГРАФИК
Пример...
Аналог данной функции при использовании Automation " метод
KompasObject::ksSystemControlStart.
Синтаксис:
int SystemControlStart (char *menuCommand);
Входные параметры:

menuCommand " указатель на строку, помещаемую в меню для возврата в библиотеку.

Возвращаемое значение:

" типы выхода из режима работы под управлением системы КОМПАС.

Примечание:

1. Библиотечная функция отдает управление КОМПАС"ГРАФИК для интерактивной дора"
ботки документа. Возврат в библиотечную функцию будет осуществлен после нажатия
команды в меню Библиотеки, обозначенной строкой menuCommand. 
Если строка не задана, то ей автоматически будет присвоено значение "Вернуться в би"
блиотеку" (функция вернет scStoppedByMenuCommand). 

2. При использовании Unicode следует использовать функцию SystemControlStartW.

SystemControlStartW  Перейти под управление 
КОМПАСГРАФИК (Unicode)
Аналог данной функции при использовании Automation " метод
KompasObject::ksSystemControlStart.
Синтаксис:
int LIB_FUNC SystemControlStartW (LPWSTR menuCommand);
Входные параметры:

menuCommand " указатель на строку, помещаемую в меню для возврата в библиотеку.

Возвращаемое значение:

тип выхода из режима работы под управлением системы КОМПАС.

Примечание:
4714



1. Библиотечная функция отдает управление КОМПАС"ГРАФИК для интерактивной дора"
ботки документа. Возврат в библиотечную функцию будет осуществлен после нажатия
команды в меню Библиотеки, обозначенной строкой menuCommand. 
Если строка не задана, то ей автоматически будет присвоено значение "Вернуться в би"
блиотеку" (функция вернет scStoppedByMenuCommand). 

2. При использовании ANSI следует использовать функцию SystemControlStart.

SystemControlStop  Отдать управление библиотеке 
Пример...
Аналог данной функции при использовании Automation " метод
KompasObject::ksSystemControlStop.
Синтаксис:
void SystemControlStop ();
Примечание:
Функция принудительно передает управление библиотечной функции, запущенной в ре"
жиме модельного диалога (в этом случае управление может переходить от библиотеки
к системе и наоборот).

Функции работы с базами данных
Функции работы с базами данных обеспечивают работу с базами данных, доступ к кото"
рым осуществляется через интерфейс ODBCODBC, и базами данных, сохраненными в
формате текстового файла loa.
Работа с базой данных начинается с создания ее блока заголовка функцией CreateDB.
Блок заголовка базы данных является управляющей структурой, содержащей имя базы
данных и ее параметры. Конкретная привязка блока заголовка к файлу базы данных осу"
ществляется функцией ConnectDB, причем в процессе работы возможно его отсоедине"
ние и повторное связывание.
Перед выполнением запроса необходимо создать специальный буфер, называемый от"
ношением. Структура задается блоком функций Relation.....EndRelation, внутри которого
определяются перечень полей и их типы. Сам запрос задается функцией DoStatement, а
его условие можно определить с помощью функции Condition или ConditionW (Unicode).
После выполнения запроса можно последовательно получить с помощью функции
ReadRecord все записи базы данных, соответствующие условию запроса.

CloseTextFile  Закрыть текстовый файл запросов
Пример...
Аналог данной функции при использовании Automation " метод
ksDataBaseObject::ksCloseTextFile.
Синтаксис:
void CloseTextFile (reference f);
4715



Входной параметр:

f " указатель на текстовый файл.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Condition  Задать новое условие запроса
Пример...
Аналог данной функции при использовании Automation " метод
ksDataBaseObject::ksCondition.
Синтаксис:
int Condition (reference bd, reference rel, char * str);
Входные параметры:

bd " указатель на объект БД,
rel " указатель на отношение,
str " запрос.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  При работе с базой данных через ODBC"интерфейс происходит переопределение со"
ставляющей SQL"запроса, начинающейся с ключевого слова WHERE. Состав обрабаты"
ваемых полей записи, определенный в отношении, не изменяется. При работе с тексто"
выми файлами использование функции Condition является единственной
возможностью определения условия запроса, так как в функции DoStatement определя"
ется только список обрабатываемых полей записи. Следует отметить, что при работе с
текстовыми базами данных не обрабатывается вложенность условий (например, "where
d > 10 and d < 14").

2.  Действительно для запроса Select....
3.  При использовании Unicode следует использовать функцию ConditionW.

ConditionW  Задать новое условие запроса (Unicode)
Аналог данной функции при использовании Automation " метод
ksDataBaseObject::ksCondition.
Синтаксис:
4716



int LODBC_FUNC ConditionW (reference bd, reference rel, LPWSTR str);
Входные параметры:

bd " указатель на объект БД,
rel " указатель на отношение,
str " запрос.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  При работе с базой данных через ODBC"интерфейс происходит переопределение со"
ставляющей SQL"запроса, начинающейся с ключевого слова WHERE. Состав обрабаты"
ваемых полей записи, определенный в отношении, не изменяется. При работе с тексто"
выми файлами использование функции Condition является единственной
возможностью определения условия запроса, так как в функции DoStatement определя"
ется только список обрабатываемых полей записи. Следует отметить, что при работе с
текстовыми базами данных не обрабатывается вложенность условий (например, "where
d > 10 and d < 14").

2.  Действительно для запроса Select....
3.  При использовании ANSI следует использовать функцию Condition.

ConnectDB  Связать заголовок и базу данных
Пример...
Аналог данной функции при использовании Automation " метод
ksDataBaseObject::ksConnectDB.
Синтаксис:
int ConnectDB (reference bd, char * dataBaseName);
Входные параметры:

bd " указатель на блок заголовка, созданный при помощи функции CreateDB.
dataBaseName " имя БД (для базы данных, доступной через интерфейс ODBC " имя БД в 

администраторе ODBC, для базы данных текстового формата " имя файла).

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
4717



1.  Функция связывает блок заголовка с указателем bd и базу данных с именем
dataBaseName. Если база данных представлена в виде текстового файла, то функция ра"
ботает аналогично стандартной функции WINDOWS OpenFile. При режиме работы через
ODBC"интерфейс имя базы данных задается в файле ODBC.INI, содержащем список
определенных баз данных.

2.  При использовании Unicode следует использовать функцию ConnectDBW.

ConnectDBW  Связать заголовок и базу данных 
(Unicode)
Аналог данной функции при использовании Automation " метод
ksDataBaseObject::ksConnectDB.
Синтаксис:
int LODBC_FUNC ConnectDBW (reference bd, LPWSTR dataBaseName);
Входные параметры:

bd " указатель на блок заголовка, созданный при помощи функции CreateDB.
dataBaseName " имя БД (для базы данных, доступной через интерфейс ODBC " имя БД в 

администраторе ODBC, для базы данных текстового формата " имя файла).

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Функция связывает блок заголовка с указателем bd и базу данных с именем
dataBaseName. Если база данных представлена в виде текстового файла, то функция ра"
ботает аналогично стандартной функции WINDOWS OpenFile. При режиме работы через
ODBC"интерфейс имя базы данных задается в файле ODBC.INI, содержащем список
определенных баз данных.

2.  При использовании ANSI следует использовать функцию ConnectDB.

CreateDB  Создать блок заголовка базы данных
Пример...
Аналог данной функции при использовании Automation " метод
ksDataBaseObject::ksCreateDB.
Синтаксис:
reference CreateDB( char *s );
Входной параметр:
4718



s " тип базы данных:
TXT_DB " база данных текстового формата, 
ODBC_DB " база данных, доступная через интерфейс ODBC.

Возвращаемое значение:

указатель на блок заголовка базы данных " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Функция позволяет открыть БД. Одновременно может быть открыто несколько БД.
2.  При использовании Unicode следует использовать функцию CreateDBW.

CreateDBW  Создать блок заголовка базы данных 
(Unicode)
Пример...
Аналог данной функции при использовании Automation " метод
ksDataBaseObject::ksCreateDB.
Синтаксис:
reference CreateDBW( LPWSTR s );
Входной параметр:

s " тип базы данных:
TXT_DB " база данных текстового формата, 
ODBC_DB " база данных, доступная через интерфейс ODBC.

Возвращаемое значение:

указатель на блок заголовка базы данных " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Функция позволяет открыть БД. Одновременно может быть открыто несколько БД.
2.  При использовании ANSI следует использовать функцию CreateDB.данных с доступом

через интерфейс ODBC.

DeleteDB  Удалить блок заголовка базы данных
Пример...
Аналог данной функции при использовании Automation " метод
ksDataBaseObject::ksDeleteDB.
Синтаксис:
int DeleteDB(reference bd);
4719



Входной параметр:

bd " указатель на объект БД.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Функция позволяет закрыть БД. После ее выполнения происходит автоматическое отсо"
единение базы данных и удаление всех созданных ранее запросов.

DisconnectDB  Отсоединить блок заголовка от базы 
данных
Пример...
Аналог данной функции при использовании Automation " метод
ksDataBaseObject::ksDisconnectDB.
Синтаксис:
int DisconnectDB(reference bd);
Входной параметр:

bd " указатель на блок заголовка, созданный при помощи функции CreateDB.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
При удалении блока заголовка (функция DeleteDB) отсоединение выполняется автома"
тически, поэтому использовать ее рекомендуется только при переопределении базы
данных.

DoStatement  Выполнить запрос базы данных
Пример...
Аналог данной функции при использовании Automation " метод
ksDataBaseObject::ksDoStatement.
Синтаксис:
int DoStatement (reference bd, reference rel, char * str);
Входные параметры:

bd " указатель на объект БД,
4720



rel " действительный указатель на отношение,
str " запрос.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Пример запроса выборки из БД:
Select d, s, p from bolt where d = 10
Где d, s, p " названия колонок или * для всех колонок или номера колонок "2, 4, 7" для
текстового файла, начиная с единицы слева направо, bolt " имя таблицы в БД или "" для
всех колонок текстового файла, d " имя колонки в отношении.
Нужен действительный указатель r на отношение.
Пример запроса для вставки строки в таблицу bolt.
Insert into bolt (d,p,s) values( 10, 1.5, 14 )
Пример запроса для удаления строки из таблицы bolt.
Delete from bolt where d = 10
Пример запроса для замены данных в строке таблицы bolt.
Update bolt set p = 2.5, s = 20 where d =10
Для ODBC баз отношение не обязательно в случае Insert, Delete, Update. Для текстового
файла отношение в этом случае необходимо, чтобы определить имена колонок
Примечание:
Параметр str при работе через ODBC"интерфейс содержит строку SQL"запроса, а при ра"
боте с текстовыми файлами " номера полей (колонок) или пустую строку (если обраба"
тываются все поля таблицы). Для текстовых баз данных созданный запрос будет обра"
батывать все записи, а непосредственно условие выборки определяется функцией
Condition.

DoStatementW  Выполнить запрос базы данных 
(Unicode)
Аналог данной функции при использовании Automation " метод
ksDataBaseObject::ksDoStatement.
Синтаксис:
int LODBC_FUNC DoStatementW (reference bd, reference rel, LPWSTR str);
Входные параметры:

bd " указатель на объект БД,
rel " действительный указатель на отношение,
str " запрос.

Возвращаемое значение:
4721



1 " в случае успешного завершения,
0 " в случае неудачи.

Пример запроса выборки из БД:
Select d, s, p from bolt where d = 10
Где d, s, p " названия колонок или * для всех колонок или номера колонок "2, 4, 7" для
текстового файла, начиная с единицы слева направо, bolt " имя таблицы в БД или "" для
всех колонок текстового файла, d " имя колонки в отношении.
Нужен действительный указатель r на отношение.
Пример запроса для вставки строки в таблицу bolt.
Insert into bolt (d,p,s) values( 10, 1.5, 14 )
Пример запроса для удаления строки из таблицы bolt.
Delete from bolt where d = 10
Пример запроса для замены данных в строке таблицы bolt.
Update bolt set p = 2.5, s = 20 where d =10
Для ODBC баз отношение не обязательно в случае Insert, Delete, Update. Для текстового
файла отношение в этом случае необходимо, чтобы определить имена колонок.
Примечание:
Параметр str при работе через ODBC"интерфейс содержит строку SQL"запроса, а при ра"
боте с текстовыми файлами " номера полей (колонок) или пустую строку (если обраба"
тываются все поля таблицы). Для текстовых баз данных созданный запрос будет обра"
батывать все записи, а непосредственно условие выборки определяется функцией
Condition.

EndRelation  Завершить описание отношения
Пример...
Аналог данной функции при использовании Automation " метод
ksDataBaseObject::ksEndRelation.
Синтаксис:
void EndRelation();
Примечание:
Функция завершает описание отношения, начатое функцией Relation.

FreeStatement  Освободить запрос базы данных
Пример...
Аналог данной функции при использовании Automation " метод
ksDataBaseObject::ksFreeStatement.
Синтаксис:
int FreeStatement (reference bd, reference rel, unsigned short int fOption);
4722



Входные параметры:

bd " указатель на объект БД,
rel " указатель на отношение,
fOption " тип освобождения.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Происходит освобождение памяти, отведенной для буфера записи функцией Relation.
Параметр fOption имеет значение при работе через ODBC"интерфейс и означает тип ос"
вобождения (описан в помощи модуля ODBC).

GetColumnName  Считать имя колонки таблицы из 
базы данных
Пример...
Аналог данной функции при использовании Automation " метод
ksDataBaseObject::ksGetColumnName.
Синтаксис:
int GetColumnName (reference db,
char * tableName,
char * columnName,
int size,
unsigned char firstOrNext);
Входные параметры:

db " указатель на базу данных,
tableName " ODBC " имя таблицы, текстовая БД " имя файла,
size " размер буфера,
firstOrNext " признак колонки:

F " первая колонка, 
N " следующая колонка.

Выходной параметр:

columnName " имя колонки.

Возвращаемое значение:

1 " если в указанной базе еще существуют несчитанные имена колонок таблиц,
4723



0 " если все имена колонок таблиц считаны.
Примечание.
При использовании Unicode следует использовать функцию GetColumnNameW.

GetColumnNameW  Считать имя колонки таблицы 
из базы данных (Unicode)
Аналог данной функции при использовании Automation " метод
ksDataBaseObject::ksGetColumnName.
Синтаксис:
int LODBC_FUNC GetColumnName (reference db,
LPWSTR tableName,
LPWSTR columnName,
int size,
unsigned char firstOrNext);
Входные параметры:

db " указатель на базу данных,
tableName " ODBC " имя таблицы, текстовая БД " имя файла,
size " размер буфера,
firstOrNext " признак колонки:

F " первая колонка, 
N " следующая колонка.

Выходной параметр:

columnName " имя колонки.

Возвращаемое значение:

1 " если в указанной базе еще существуют несчитанные имена колонок таблиц,
0 " если все имена колонок таблиц считаны.

Примечание:
При использовании ANSI следует использовать функцию GetColumnName.

GetTableName  Считать имя таблицы из базы 
данных
Пример...
Аналог данной функции при использовании Automation " метод
ksDataBaseObject::ksGetTableName.
Синтаксис:
4724



int GetTableName (reference db,
char * tableName,
int size,
unsigned char firstOrNext);
Входные параметры:

db " указатель на объект БД,
firstOrNext " признак таблицы:

F " первая таблица, 
N " следующая таблица,

size " размер буфера.

Выходной параметр:

tableName " имя таблицы.

Возвращаемое значение:

1 " если в указанной базе еще существуют несчитанные имена таблиц,
0 " если все имена таблиц считаны.

Примечание.
При использовании Unicode следует использовать функцию GetTableNameW.

GetTableNameW  Считать имя таблицы из базы 
данных (Unicode)
Аналог данной функции при использовании Automation " метод
ksDataBaseObject::ksGetTableName.
Синтаксис:
int LODBC_FUNC GetTableName (reference db,
LPWSTR tableName,
int size,
unsigned char firstOrNext);
Входные параметры:

db " указатель на объект БД,
firstOrNext " признак таблицы:

F " первая таблица, 
N " следующая таблица,

size " размер буфера.

Выходной параметр:
4725



tableName " имя таблицы.

Возвращаемое значение:

1 " если в указанной базе еще существуют несчитанные имена таблиц,
0 " если все имена таблиц считаны.

Примечание.
При использовании ANSI следует использовать функцию GetTableName.

IsODBCOkey  Проверить подключение ODBC
Аналог данной функции при использовании Automation " метод
ksDataBaseObject::ksIsODBCOkey.
Синтаксис:
int IsODBCOkey();
Возвращаемое значение:

1 " если соединение с ODBC установлено,
0 " если соединения нет.

ksOpenTextFileEx  Открыть текстовый файл, в 
котором хранятся SQL запросы
Аналог данной функции при использовании Automation " метод
ksDataBaseObject::ksCloseTextFile.
Синтаксис:
reference ksOpenTextFileEx( char * fileName, int textFileType );
Входные параметры:

fileName " имя файла,
textFileType " тип текстового файла:

0 " текстовая база данных
1 " простой текстовый файл
2 " текстовый файл с комментариями (комментарии не выдаются).

Примечание:
Комментарии могут иметь следующие варианты формата:
/*
  многострочный
  комментарий 
*/
4726



// однострочный комментарий

ksOpenTextFileExW  Открыть текстовый файл, в 
котором хранятся SQL запросы (Unicode)
Аналог данной функции при использовании Automation " метод
ksDataBaseObject::ksCloseTextFile.
Синтаксис:
reference ksOpenTextFileExW( LPWSTR fileName, int textFileType );
Входные параметры:

fileName " имя файла,
textFileType " тип текстового файла:

0 " текстовая база данных
1 " простой текстовый файл
2 " текстовый файл с комментариями ( коментарии не выдаются).

Примечание:
Комментарии могут иметь следующие варианты формата:
/*
  многострочный
  комментарий 
*/
// однострочный комментарий

OpenTextFile  Открыть текстовый файл запросов
Пример...
Аналог данной функции при использовании Automation " метод
ksDataBaseObject::ksOpenTextFile.
Синтаксис:
reference OpenTextFile(char * fileName);
Входной параметр:

fileName " имя файла.

Возвращаемое значение:

указатель на открытый файл " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
4727



1.  Функция работает по правилам стандартной процедуры WINDOWS OpenFile.
2.  Реализованные в рамках данного раздела функции работы с текстовыми файлами обес"

печивают их построчную обработку и позволяют вынести обращения к базе данных во
внешний текстовый файл. Это дает возможность работать с разными платформами
СУБД без изменения выполняемого кода приложения.

3.  При использовании Unicode следует использовать функцию OpenTextFileW.

OpenTextFileW  Открыть текстовый файл запросов 
(Unicode)
Аналог данной функции при использовании Automation " метод
ksDataBaseObject::ksOpenTextFile.
Синтаксис:
reference LODBC_FUNC OpenTextFileW( LPWSTR fileName);
Входной параметр:

fileName " имя файла.

Возвращаемое значение:

указатель на открытый файл " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Функция работает по правилам стандартной процедуры WINDOWS OpenFile.
2.  Реализованные в рамках данного раздела функции работы с текстовыми файлами обес"

печивают их построчную обработку и позволяют вынести обращения к базе данных во
внешний текстовый файл. Это дает возможность работать с разными платформами
СУБД без изменения выполняемого кода приложения.

3.  При использовании ANSI следует использовать функцию OpenTextFile.

RChar  Определить строковое поле в отношении
Пример...
Аналог данной функции при использовании Automation " метод
ksDataBaseObject::ksRChar.
Синтаксис:
int RChar (char *name, int size, long int type);
Входные параметры:

name " имя колонки таблицы,
size " размер буфера,
4728



type " тип данных, хранящихся в БД
(действительно для ODBC"баз).

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Параметр name действителен при работе с текстовой базой данных.
2.  Параметр type имеет смысл только  для баз данных, связанных через ODBC, и описывает

действительный тип колонки базы данных, с которой будет связано поле при выполне"
нии операции DoStatement. Это позволяет получать строковое представление записи
произвольного типа. Описания типов для ODBC хранятся в файле SQL.h, который постав"
ляется вместе с модулями ODBC.

3.  При использовании Unicode следует использовать функцию RCharW.

RCharW  Определить строковое поле wchar_t[size] в 
отношении (Unicode)
Аналог данной функции при использовании Automation " метод
ksDataBaseObject::ksRChar.
Синтаксис:
int LODBC_FUNC RCharW (LPWSTR name, int size, long int type);
Входные параметры:

name " имя колонки таблицы,
size " размер буфера,
type " тип данных, хранящихся в БД

(действительно для ODBC"баз).

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Параметр name действителен при работе с текстовой базой данных.
2.  Параметр type имеет смысл только  для баз данных, связанных через ODBC, и описывает

действительный тип колонки базы данных, с которой будет связано поле при выполне"
нии операции DoStatement. Это позволяет получать строковое представление записи
произвольного типа. Описания типов для ODBC хранятся в файле SQL.h, который постав"
ляется вместе с модулями ODBC.

3.  При использовании ANSI следует использовать функцию RChar.
4729



RDouble  Определить doubleполе в отношении
Пример...
Аналог данной функции при использовании Automation " метод
ksDataBaseObject::ksRDouble.
Синтаксис:
int RDouble (char *name);
Входной параметр:

name " имя поля.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Параметр name действителен только при работе с текстовыми базами данных.

RDoubleW  Определить doubleполе в отношении 
(Unicode)
Аналог данной функции при использовании Automation " метод
ksDataBaseObject::ksRDouble.
Синтаксис:
int LODBC_FUNC RDouble (LPWSTR name);
Входной параметр:

name " имя поля.

Возвращаемое значение:

1  в случае успешного завершения,
0  в случае неудачи.

Примечание:
Параметр name действителен только при работе с текстовыми базами данных.

Relation  Создать новое отношение
Пример...
Аналог данной функции при использовании Automation " метод
ksDataBaseObject::ksRelation.
Синтаксис:
reference Relation (reference bd);
4730



Входной параметр:

bd " указатель на объект БД.

Возвращаемое значение:

указатель на отношение " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Отношение характеризует один запрос и представляет собой описание памяти, необхо"
димой для размещения очередной записи выборки, выполняемого функцией
ReadRecord. Является составным объектом, каждое поле которого описывает тип и имя
поля (колонки) в таблице базы данных. Имя действительно только в случае работы с тек"
стовым файлом, так как при обмене через ODBC"интерфейс имена уже описаны в блоке
заголовка. Количество отношений, определенных для базы данных, не ограничивается.

RFloat  Определить в отношении поле типа float
Пример...
Аналог данной функции при использовании Automation " метод
ksDataBaseObject::ksRFloat.
Синтаксис:
int RFloat (char *name);
Входной параметр:

name " имя поля.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Параметр name действителен только при работе с текстовыми базами данных.

RFloatW  Определить в отношении поле типа float 
(Unicode)
Аналог данной функции при использовании Automation " метод
ksDataBaseObject::ksRFloat.
Синтаксис:
int LODBC_FUNC RFloat (LPWSTR name);
Входной параметр:
4731



name " имя поля.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Параметр name действителен только при работе с текстовыми базами данных.

 RInt  Определить в отношении поле типа short int
Пример...
Аналог данной функции при использовании Automation " метод ksDataBaseObject::ksRInt.
Синтаксис:
int RInt (char *name);
Входной параметр:

name " имя поля.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Параметр name действителен только при работе с текстовыми базами данных.
2.  При использовании Unicode следует использовать функцию RIntW.

RIntW  Определить в отношении поле типа short int 
(Unicode)
Аналог данной функции при использовании Automation " метод ksDataBaseObject::ksRInt.
Синтаксис:
int LODBC_FUNC RIntW (LPWSTR name);
Входной параметр:

name " имя поля.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.
4732



Примечание:

1.  Параметр name действителен только при работе с текстовыми базами данных.
2.  При использовании ANSI следует использовать функцию RInt.

RLong  Определить в отношении поле типа int или 
long int
Пример...
Аналог данной функции при использовании Automation " метод
ksDataBaseObject::ksRLong.
Синтаксис:
int RLong (char *name);
Входной параметр:

name " имя поля.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Параметр name действителен только при работе с текстовыми базами данных.
2.  При использовании Unicode следует использовать функцию RLongW.

RLongW  Определить в отношении поле типа int или 
long int (Unicode)
Аналог данной функции при использовании Automation " метод
ksDataBaseObject::ksRLong.
Синтаксис:
int LODBC_FUNC RLongW (LPWSTRname);
Входной параметр:

name " имя поля.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
4733



1.  Параметр name действителен только при работе с текстовыми базами данных.
2.  При использовании ANSI следует использовать функцию RLong.

ReadRecord  Получить запись базы данных
Пример...
Аналог данной функции при использовании Automation " метод
ksDataBaseObject::ksReadRecord.
Синтаксис:
int ReadRecord (reference bd, reference rel, void *v);
Входные параметры:

bd " указатель на объект БД,
rel " указатель на отношение,
v " объем памяти для хранения одной записи.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Количество и типы полей в структуре v должны соответствовать отношению rel.

ReadStrFromTextFile  Считать строку из текстового 
файла запросов
Пример...
Аналог данной функции при использовании Automation " метод
ksDataBaseObject::ksReadStrFrFile.
Синтаксис:
int ReadStrFromTextFile (reference f, char * buff, int numb);
Входные параметры:

f " указатель на текстовый файл,
numb " номер строки.

Выходной параметр:

buff " результат работы метода.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.
4734



Примечание:

1.  Строка обращения к базе данных начинается с номера, далее после двоеточия идет текст
обращения, например:
3:select d,f from Table1 where d=10 and f>d

2.  При использовании Unicode следует использовать функцию ReadStrFromTextFileW.

ReadStrFromTextFileW  Считать строку из текстового 
файла запросов (Unicode)
Аналог данной функции при использовании Automation " метод
ksDataBaseObject::ksReadStrFrFile.
Синтаксис:
int LODBC_FUNC ReadStrFromTextFileW (reference f, LPWSTR buff, int numb);
Входные параметры:

f " указатель на текстовый файл,
numb " номер строки.

Выходной параметр:

buff " результат работы метода.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Строка обращения к базе данных начинается с номера, далее после двоеточия идет текст
обращения, например:
3:select d,f from Table1 where d=10 and f>d

2.  При использовании ANSI следует использовать функцию ReadStrFromTextFile.

Функции работы с динамическими массивами
Функции данного раздела позволяют использовать динамические массивы. 
Такие массивы используются для работы с массивами параметров неопределенной дли"
ны. Поддерживаются как стандартные массивы (со строго определенной структурой
элементов), так и пользовательские динамические массивы с произвольной структурой
элементов. Применение динамических массивов позволяет избежать резервирования
памяти из расчета максимально возможной размерности массива. Нумерация элементов
массива начинается с 0.
4735



AddArrayItem  Добавить элемент в массив
Пример...
Аналог данной функции при использовании Automation " метод
ksDynamicArray::ksAddArrayItem.
Синтаксис:
int AddArrayItem (reference p, int numb, void * value, int size);
Входные параметры:

p " указатель на массив,
numb " индекс элемента, перед которым нужно вставить новый элемент, нумерация 

начинается с 0, при numb="1 элемент добавляется в конец массива,
value " указатель на структуру параметров " источник значений,
size " размер структуры параметров " источника значений.

Возвращаемое значение:

1 " в случае успеха,
0 " в случае неудачи.

Примечание:

1.  В пользовательском динамическом массиве хранятся только указатели на элементы.
2.  При добавлении элемента в пользовательский динамический массив параметр size иг"

норируется.

ClearArray  Очистить массив
Пример...
Аналог данной функции при использовании Automation " метод
ksDynamicArray::ksClearArray.
Синтаксис:
int ClearArray (reference p);
Входной параметр:

p " указатель на массив.

Возвращаемое значение:

1 " в случае успеха,
0 " в случае ошибки.

Примечание:
4736



1.  Из массива удаляются все элементы, но сам массив не удаляется.
2.  При удалении пользовательского элемента автоматически вызывается пользователь"

ская функция удаления элемента, заданная пользователем при создании массива.

CreateArray  Создать стандартный или 
пользовательский динамический массив 
неопределенной длины
Пример...
Синтаксис:
reference CreateArray (int type, DeleteFunc f);
Входной параметр:

f " функция удаления для пользовательского динамического массива, void WINAPI 
f(void *), определяется пользователем,

type " Типы динамических массивов.

Возвращаемое значение:

указатель на созданный массив " в случае успеха,
0 " в случае ошибки.

DeleteArray  Удалить массив
Пример...
Аналог данной функции при использовании Automation " метод
ksDynamicArray::ksDeleteArray.
Синтаксис:
int DeleteArray (reference p);
Входной параметр:

p " указатель на массив.

Возвращаемое значение:

1 " в случае успеха,
0 " в случае ошибки.

Примечание:
Может быть удален непустой массив, то есть перед вызовом функции DeleteArray вызы"
вать ClearArray необязательно.
4737



ExcludeArrayItem  Удалить элемент массива
Пример...
Аналог данной функции при использовании Automation " метод
ksDynamicArray::ksExcludeArrayItem.
Синтаксис:
int ExcludeArrayItem (reference p, int numb);
Входной параметр:

p " указатель на массив,
numb " номер элемента массива, нумерация начинается с 0.

Возвращаемое значение:

1 " в случае успеха,
0 " в случае неудачи.

GetArrayCount  Получить количество элементов в 
динамическом массиве
Пример...
Аналог данной функции при использовании Automation " метод
ksDynamicArray::ksGetArrayCount.
Синтаксис:
int GetArrayCount (reference p);
Входной параметр:

p " указатель на массив.

Возвращаемое значение:

" количество элементов массива.

GetArrayItem  Получить элемент массива
Пример...
Аналог данной функции при использовании Automation " метод
ksDynamicArray::ksGetArrayItem.
Синтаксис:
int GetArrayItem (reference p, int numb, void * value, int size);
Входные параметры:
4738



p " указатель на массив,
numb " номер элемента массива, нумерация начинается с 0,
size " длина области памяти.

Входные параметры:

value " указатель на область памяти, куда будет помещено 
значение.

Возвращаемое значение:

1 " в случае успеха,
0 " в случае неудачи.

GetArrayType  Получить тип массива
Пример...
Аналог данной функции при использовании Automation " метод
ksDynamicArray::ksGetArrayType.
Синтаксис:
int GetArrayType (reference p);
Входной параметр:

p " указатель на массив.

Возвращаемое значение:

тип динамического массива.

GetUserArrayItem  Получить указатель на элемент 
пользовательского динамического массива
Пример...
Синтаксис:
int GetUserArrayItem (reference p, int numb, void ** value);
Входной параметр:

p " указатель на массив,
numb " номер элемента массива, нумерация начинается с 0.

Выходной параметр:
