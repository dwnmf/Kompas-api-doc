0 " если библиотека не открыта.

Примечание.
При использовании Unicode следует использовать функцию ksCheckFragmentLibraryW.

ksCheckFragmentLibraryW  Проверить, открыта ли 
библиотека фрагментов (Unicode)
Функция не поддерживается
4360



Справка системы КОМПАС...
KOMPAS.chm::/617_Glava75_Biblioteka_fragment.htm
Аналог данной функции при использовании Automation " метод
ksFragmentLibrary::ksCheckFragmentLibrary.
Синтаксис:
int LIB_FUNC ksCheckFragmentLibraryW (LPWSTR libName, unsigned char
possibleMessage);
Входные параметры:

libName " имя файла библиотеки фрагментов,
possibleMessage " признак выдачи сообщения:

" 1 " сообщать, если библиотека уже откры"
та,
" 0 " не сообщать.

Возвращаемое значение:

1 " если библиотека открыта,
0 " если библиотека не открыта.

Примечание.
При использовании ANSI следует использовать функцию ksCheckFragmentLibrary.

ksChoiceFragmentFromLib  Выбрать имя фрагмента, 
хранящегося в библиотеке фрагментов
Пример...
Аналог данной функции при использовании Automation " метод
ksFragmentLibrary::ksChoiceFragmentFromLib
Синтаксис:
int ksChoiceFragmentFromLib (char * fileLibFrw,
char * nameFrw,
unsigned int size);
Входные параметры:

fileLibFrw " полное имя библиотеки фрагментов,
size " размер буфера фрагмента.

Выходные параметры:

nameFrw " имя фрагмента.

Возвращаемое значение:
4361



3 " имя фрагмента,
2 " имя папки,
1 " корень библиотеки фрагментов,
0 " в случае неудачи.

Примечание:

1.  Библиотека фрагментов открывается в режиме диалога. Ее редактирование запрещено.
Нажатие <Enter> " выбор имени фрагмента. <Esc> " отказ.

2.  При использовании Unicode следует использовать функцию
ksChoiceFragmentFromLibW.

ksChoiceFragmentFromLibW  Выбрать имя фрагмента, 
хранящегося в библиотеке фрагментов (Unicode)
Аналог данной функции при использовании Automation " метод
ksFragmentLibrary::ksChoiceFragmentFromLib
Синтаксис:
int LIB_FUNC ksChoiceFragmentFromLib (LPWSTR fileLibFrw,
LPWSTR nameFrw,
unsigned int size);
Входные параметры:

fileLibFrw " полное имя библиотеки фрагментов,
size " размер буфера фрагмента.

Выходные параметры:

nameFrw " имя фрагмента.

Возвращаемое значение:

3 " имя фрагмента,
2 " имя папки,
1 " корень библиотеки фрагментов,
0 " в случае неудачи.

Примечание:

1.  Библиотека фрагментов открывается в режиме диалога. Ее редактирование запрещено.
Нажатие <Enter> " выбор имени фрагмента. <Esc> " отказ.

2.  При использовании ANSI следует использовать функцию ksChoiceFragmentFromLib.

ksCreateInsertionFragment  Создать вставку фрагмента
Синтаксис:
int LIB_FUNC ksCreateInsertionFragment( char * fileName );
4362



Входной параметр:

fileName " полное имя файла фрагмента.

Возвращаемое значение:

1 " в случае удачи.

Примечание:
Допускается fileName следующего вида "c:\_f\gr\lib1.lfr|детали|литье|фланец", где:

▼ c:\_f\gr\lib1.lfr " имя файла библиотеки фрагментов, 
▼ |детали|литье|" разделы, подразделы внутри библиотеки, 
▼ фланец " имя фрагмента или имя подраздела).

Функция запускает процесс вставки фрагмента из файла. Функция не ждет завершения
процесса вставки. Достаточно передать только имя библиотеки фрагментов. В этом слу"
чае процесс запустится с начальным каталогом библиотеки.

ksCreateInsertionFragmentW  Создать вставку 
фрагмента (Unicode)
Синтаксис:
int LIB_FUNC ksCreateInsertionFragmentW( LPWSTR * fileName );
Входной параметр:

fileName " полное имя файла фрагмента.

Возвращаемое значение:

1 " в случае удачи.

Примечание:
Допускается fileName следующего вида "c:\_f\gr\lib1.lfr|детали|литье|фланец", где:

▼ c:\_f\gr\lib1.lfr " имя файла библиотеки фрагментов, 
▼ |детали|литье|" разделы, подразделы внутри библиотеки, 
▼ фланец " имя фрагмента или имя подраздела).

Функция запускает процесс вставки фрагмента из файла. Функция не ждет завершения
процесса вставки. Достаточно передать только имя библиотеки фрагментов. В этом слу"
чае процесс запустится с начальным каталогом библиотеки.
4363



ksExistFragmentInLibrary  Проверить наличие 
указанного фрагмента или раздела в библиотеке 
фрагментов
Пример...
Аналог данной функции при использовании Automation " метод
ksFragmentLibrary::ksExistFragmentInLibrary.
Синтаксис:
int ksExistFragmentInLibrary (char *frwName);
Входной параметр:

frwName " имя фрагмента.

Возвращаемое значение:

1 " указанный фрагмент или папка есть в библиотеке,
0 " указанного фрагмента или папки нет,
"1 " нет указанной библиотеки.

Примечание:
Пример формирования имени фрагмента:

▼ "c:\_f\gr\lib1.lfr|детали|литье|фланец", где
▼ c:\_f\gr\lib1.lfr " имя файла библиотеки фрагментов, 
▼ |детали|литье|" разделы, подразделы внутри библиотеки, 
▼ фланец " имя фрагмента или имя подраздела).

ksExistFragmentInLibraryW  Проверить наличие 
указанного фрагмента или раздела в библиотеке 
фрагментов (Unicode)
Пример...
Аналог данной функции при использовании Automation " метод
ksFragmentLibrary::ksExistFragmentInLibrary.
Синтаксис:
int LIB_FUNC ksExistFragmentInLibraryW (LPWSTR frwName);
Входной параметр:

frwName " имя фрагмента.

Возвращаемое значение:

1 " указанный фрагмент или папка есть в библиотеке,
0 " указанного фрагмента или папки нет,
4364



"1 " нет указанной библиотеки.
Примечание:
Пример формирования имени фрагмента:

▼ "c:\_f\gr\lib1.lfr|детали|литье|фланец", где
▼ c:\_f\gr\lib1.lfr " имя файла библиотеки фрагментов, 
▼ |детали|литье|" разделы, подразделы внутри библиотеки, 
▼ фланец " имя фрагмента или имя подраздела).

ksFragmentLibrary  Открыть библиотеку фрагментов
Функция не поддерживается
Пример...
Аналог данной функции при использовании Automation " метод
ksFragmentLibrary::ksFragmentLibraryOperation.
Синтаксис:
int ksFragmentLibrary (char * libName, int type);
Входные параметры:

libName " имя файла библиотеки фрагментов,
type " тип действия с библиотекой фрагментов. 

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  При выполнении операций типа "1, 0, 1, 4, 5 libName " полное имя файла библиотеки
фрагментов.
При выполнении операций типа 2, 3 libName " полное имя файла библиотеки фрагментов
путь внутри библиотеки с именем редактируемого фрагмента.

2.  При использовании Unicode следует использовать функцию ksFragmentLibraryW.

ksFragmentLibraryW  Открыть библиотеку фрагментов 
(Unicode)
Функция не поддерживается
Аналог данной функции при использовании Automation " метод
ksFragmentLibrary::ksFragmentLibraryOperation.
Синтаксис:
int LIB_FUNC ksFragmentLibraryW (LPWSTR libName, int type);
Входные параметры:
4365



S.
libName " имя файла библиотеки фрагментов,
type " тип действия с библиотекой фрагментов. 

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  При выполнении операций типа "1, 0, 1, 4, 5 libName " полное имя файла библиотеки
фрагментов.

2. При выполнении операций типа 2, 3 libName " полное имя файла библиотеки фрагментов
путь внутри библиотеки с именем редактируемого фрагмента.

3.  При использовании ANSI следует использовать функцию ksFragmentLibrary.

ksIsLibraryEnabled  Проверить защиту библиотеки 
фрагментов и моделей
Аналог данной функции при использовании Automation " метод
KompasObject::ksIsLibraryEnabled.
Синтаксис:
int ksIsLibraryEnabled (char * libName);
Входные параметры:

libName " имя библиотеки либо полное, либо относительно папки LIB

Возвращаемое значение:

1 " выполнять библиотеку можно,
0 " выполнять библиотеку нельзя.

Примечание:

1.  Функция применима для прикладных библиотек (*.rtw), библиотек фрагментов (*.lfr),
библиотек моделей (*.l3d).

2.  При использовании Unicode следует использовать функцию ksIsLibraryEnabledW.

ksIsLibraryEnabledW  Проверить защиту библиотеки 
фрагментов и моделей (Unicode)
Аналог данной функции при использовании Automation " метод
KompasObject::ksIsLibraryEnabled.
Синтаксис:
int LIB_FUNC ksIsLibraryEnabledW (LPWSTR libName);
Входные параметры:
4366



libName " имя библиотеки либо полное, либо отно"
сительно папки LIBS.

Возвращаемое значение:

1 " выполнять библиотеку можно,
0 " выполнять библиотеку нельзя.

Примечание:
Функция применима для прикладных библиотек (*.rtw), библиотек фрагментов (*.lfr),
библиотек моделей (*.l3d).
При использовании ANSI следует использовать функцию ksIsLibraryEnabled.

Создание графических объектов
Графические примитивы
Функции данного радела обеспечивают построение геометрических примитивов:
точек, прямых, отрезков, окружностей, дуг, кривых, штриховки.

ArcByAngle  Создать дугу по двум точкам и углу 
раствора
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_ARC_2_PNT_ANGLE.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksArcByAngle.
Синтаксис:
reference ArcByAngle (double xc,
double yc,
double rad,
double f1,
double f2,
int n,
int type);
Входные параметры:

xc, yc " координаты центра дуги,
rad " радиус дуги,
f1, f2 " начальный и конечный угол дуги в градусах,
4367



n " направление отрисовки дуги: 
1 " против часовой стрелки, 
"1 " по часовой стрелке,

type " стиль линии.
Возвращаемое значение:

указатель на дугу " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
Объект создается в текущем слое текущего вида.

ArcBy3Points  Создать дугу окружности по трем точкам
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_ARC_3_PNT.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksArcBy3Points.
Синтаксис:
reference ArcBy3Points (double x1,
 double y1,
 double x2,
 double y2,
 double x3,
 double y3,
 int style);
Входные параметры:

x1, y1 " координаты начальной точки на дуге,
x2, y2 " координаты средней точки на дуге,
x3, y3 " координаты конечной точки на дуге,
style " стиль линии.

Возвращаемое значение:

указатель на дугу " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
Объект создается в текущем слое текущего вида.
4368



ArcByPoint  Создать дугу по центру и конечным точкам
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_CIRCLEARC.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksArcByPoint.
Синтаксис:
ArcByPoint (double xc,
double yc,
double rad,
double x1,
double y1,
double x2,
double y2,
short direction,
unsigned short style);
Входные параметры:

xc, yc " координаты центра дуги,
rad " радиус дуги,
x1, y1 " координаты начальной точки дуги,
x2, y2 " координаты конечной точки дуги,
direction " направление отрисовки дуги: 

1 " против часовой стрелки, 
"1 " по часовой стрелке,

type " стиль линии.

Возвращаемое значение:

указатель на дугу " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
Объект создается в текущем слое текущего вида.

Circle  Создать окружность
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_CIRCLE.htm
Аналог данной функции при использовании Automation " метод ksDocument2D::ksCircle.
Синтаксис:
4369



reference Circle (double xc, double yc, 
double rad, 
int type);
Входные параметры:

xc, yc " координаты центра окружности,
rad " радиус окружности,
type " стиль линии.

Возвращаемое значение:

указатель на окружность " в случае удачного завершения,
0 " в случае неудачи.

Equidistant  Построить эквидистанту
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_EQUID_TO_OBJ.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksEquidistant.
Синтаксис:
reference Equidistant (EquidistantParam *par);
Выходной параметр:

par " указатель на структуру параметров эквидистанты.

Возвращаемое значение:

указатель на эквидистанту " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
Объект создается в текущем слое текущего вида.

Hatch  Создать штриховку
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_HATCH.htm
Аналог данной функции при использовании Automation " метод ksDocument2D::ksHatch.
Синтаксис:
int Hatch (unsigned int style, 
4370



double ang, 
double step, 
double width, 
double x0, double y0);
Входные параметры:

style " стиль штриховки,
angle " угол штриховки в градусах,
step " шаг штриховки,
width " ширина полосы штрихования вдоль границы штриховки,
x0, y0 " координаты начальной точки штриховки.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Все следующие далее до вызова функции EndObj геометрические примитивы определя"
ют границы штриховки (внешние и внутренние). Порядок определения элементов грани"
цы является произвольным. Функция EndObj возвращает указатель на объект Штрихов"
ка.

2.  Функция устарела, рекомендуется вместо нее использовать функцию HatchEx.

HatchEx  Создать штриховку
Справка системы КОМПАС...
KOMPAS.chm::/CM_HATCH.htm
Аналог данной функции при использовании Automation " метод ksDocument2D::ksHatch.
Синтаксис:
int HatchEx( unsigned short style,
             double angle,
             double step,
             double width,
             double x0,   double y0,
             unsigned long color,
             unsigned char sheetAng );
Входные параметры:

style " стиль штриховки,
angle " угол штриховки в градусах,
step " шаг штриховки,
width " ширина полосы штрихования вдоль границы штриховки,
4371



x0, y0 " координаты начальной точки штриховки,
color " цвет штриховки, по умолчанию FREE_COLOR (0xff000000l),
sheetAng " тип угла штриховки:

0 " угол штриховки относительно ее границ сохраняется при повороте границ 
(используется при изображении накатки на деталях),
1 " обычная штриховка (угол штриховки " постоянный).

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Все, следующие далее до вызова функции EndObj, геометрические примитивы опреде"
ляют границы штриховки (внешние и внутренние). Порядок определения элементов гра"
ницы является произвольным. Функция EndObj возвращает указатель на объект Штри"
ховка.

ksColouring  Создать фоновую заливку цветом
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_COLOURING.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksColouring.
Синтаксис:
int ksColouring (unsigned long color);
Входной параметр:

color " цвет заливки.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Заливка " составной объект. Объекты вида, вводимые между операторами ksColouring и
EndObj, принадлежат заливке и образуют ее границу. EndObj возвращает указатель на за"
ливку.

2.  Если color = "1 или 0xFFFFFFFF " создается заливка цветом фона документа.

ksColouringEx  Создать фоновую заливку цветом
Пример...
4372



Справка системы КОМПАС...
KOMPAS.chm::/CM_COLOURING.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksColouringEx.
Синтаксис:
reference ksColouringEx (unsigned long color, reference group);
Входные параметры:

color " цвет заливки,
group " группа, образующая границу заливки.

Возвращаемое значение:

указатель на заливку " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Если color = "1 или 0xFFFFFFFF, то создается заливка цветом фона документа.

ksConicArc  Построить коническое сечение
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksConicArc.
Синтаксис:
reference ksConicArc (ConicArcParam * par);
Входной параметр:

par " указатель на структуру параметров кони"
ческого сечения ConicArcParam

Возвращаемое значение:

указатель на коническое сечение " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
Коническим сечением может быть дуга окружности, дуга эллипса или кривая NURBS.

ksCreateViewObject  Создать объект, используя 
визуальный процесс
Пример...
4373



Аналог данной функции при использовании Automation " метод
ksDocument2D::ksCreateViewObject.
Синтаксис:
reference ksCreateViewObject (unsigned short int type);
Входной параметр:

type " тип объекта (см. ltdefine.h
LINESEG_OBJ...ORDINATEDIMENSION_OBJ).

Возвращаемое значение:

" указатель на созданный объект.

Примечание:
Функция распространяется на все объекты вида, кроме:

LAYER_OBJ "слой,
CONTOUR_OBJ "контур,
MACRO_OBJ "нетипизированный макроэлемент,
FRAGMENT_OBJ "вставной фрагмент,
ELLIPSE_ARC_OBJ "дуга эллипса.

ksEllipse  Создать эллипс с заданными параметрами
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_ELLIPSE.htm
Аналог данной функции при использовании Automation " метод ksDocument2D::ksEllipse.
Синтаксис:
reference ksEllipse (EllipseParam *par);
Выходной параметр:

par " указатель на Структуру параметров эллипса.

Возвращаемое значение:

указатель на эллипс " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
Объект создается в текущем слое текущего вида. 
4374



ksEllipseArc  Построить дугу эллипса
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksEllipseArc.
Синтаксис:
reference ksEllipseArc (EllipseArcParam *par);
Входной параметр:

par " указатель на Структуру параметров дуги эллипса.

Возвращаемое значение:

указатель на дугу эллипса " в случае удачного завершения,
0 " в случае неудачи.

ksHatch  Создать штриховку с заданными параметрами
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_HATCH.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksHatchByParam.
Синтаксис:
reference ksHatch (HatchParam * par);
Входной параметр:

par " указатель на структуру параметров штриховки HatchParam.

Возвращаемое значение:

указатель на штриховку " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
Объекты границы штриховки лежат во временной группе pBoundaries. После выполне"
ния функции ksHatch временная группа прекращает существование.
4375



ksHatchEx  Создать штриховку с заданными 
параметрами
Справка системы КОМПАС...
KOMPAS.chm::/CM_HATCH.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksHatchByParam.
Синтаксис:
reference ksHatchEx (HatchParamEx * par);
Входные параметры:

par " указатель на структуру параметров штриховки HatchParamEx.

Возвращаемое значение:

указатель на штриховку " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Объекты границы штриховки лежат во временной группе pBoundaries.
2.  После выполнения функции ksHatchEx временная группа прекращает существование.

ksInsertRaster  Вставить растровый объект
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_INSERTRASTER.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksInsertRaster.
Синтаксис:
reference ksInsertRaster (RasterParam *par);
Входной параметр:

par " Структура параметров растрового объекта RasterParam.

Возвращаемое значение:

указатель на растровый объект " в случае удачного завершения,
0 " в случае неудачи.

Примечание.
При использовании Unicode следует использовать функцию ksInsertRasterW.
4376



ksInsertRasterW  Вставить растровый объект (Unicode)
Справка системы КОМПАС...
KOMPAS.chm::/CM_INSERTRASTER.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksInsertRaster.
Синтаксис:
reference ksInsertRasterW (RasterParamW *par);
Входной параметр:

par " Структура параметров растрового объекта RasterParamW.

Возвращаемое значение:

указатель на растровый объект " в случае удачного завершения,
0 " в случае неудачи.

Примечание.
При использовании ANSI следует использовать функцию ksInsertRaster.

ksParEllipseArc  Построить дугу эллипса
Синтаксис:
reference ksParEllipseArc (EllipseArcParam1 *par);
Входной параметр:

par " указатель на Структуру параметров дуги эллипса.

Возвращаемое значение:

указатель на дугу эллипса " в случае удачного завершения,
0 " в случае неудачи.

ksPointsOnCurveByStep  Получить массив точек, 
расположенных на кривой с заданным шагом
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/1391_Postroenie_tochek.htm#point_on_distance
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksPointsOnCurveByStep.
4377



Синтаксис:
reference ksPointsOnCurveByStep (reference curve,
double step);
Входные параметры:

curve " указатель на кривую,
step " шаг точек вдоль кривой.

Возвращаемое значение:

указатель на динамический массив мате" " в случае успеха,
матических точек ksDynamicArray типа
POINT_ARR.
0 " в случае неудачи.

ksRectangle  Построить прямоугольник
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksRectangle.
Синтаксис:
reference ksRectangle (RectangleParam * par, 
unsigned char centre);
Входные параметры:

par " указатель на структуру параметров прямоугольника
RectangleParam,

centre " признак построения обозначения центра: 
0 " нет осей, 
1 " значок осей (маленький "крестик"), 
2 " горизонтальная ось, 
3 " обе оси.

Возвращаемое значение:

указатель на прямоугольник " в случае удачного завершения,
0 " в случае неудачи.

ksRegularPolygon  Создать правильный многоугольник 
с заданными параметрами
Пример...
4378



Справка системы КОМПАС...
KOMPAS.chm::/Mnogougolqnik.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksRegularPolygon.
Синтаксис:
reference ksRegularPolygon (RegularPolygonParam * par,
unsigned char centre);
Входные параметры:

centre " признак построения обозначения центра: 
0 " нет осей, 
1 " значок осей (маленький "крестик"), 
2 " горизонтальная ось, 
3 " обе оси.

Выходные параметры:

par " указатель на структуру параметров правильного многоугольника.

Возвращаемое значение:

указатель на многоугольник " в случае удачного завершения,
0 " в случае неудачи.

Line  Создать прямую линию через указанную точку под 
заданным углом
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/1396_vspomogatelnye.htm#simple_line
Аналог данной функции при использовании Automation " метод ksDocument2D::ksLine.
Синтаксис:
reference Line (double x, double y, 
double ang);
Входные параметры:

x, y " координаты точки,
ang " угол наклона прямой.

Возвращаемое значение:
4379



указатель на графический объект Линия. " в случае успеха,
0 " в случае неудачи.

Примечание:
Объект создается в текущем слое текущего вида и используется для вспомогательных
построений.

LineSeg  Создать отрезок прямой линии
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/1418_Postroenie_otrezkov_.htm#otr_dve_tochki
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksLineSeg.
Синтаксис:
reference LineSeg (double x1,
double y1,
double x2,
double y2,
unsigned int style);
Входные параметры:

x1, y1 " координаты первой точки отрезка,
x2, y2 " координаты второй точки отрезка,
style " стиль линии.

Возвращаемое значение:

указатель на отрезок " в случае удачного завершения,
0 " в случае неудачи.

Point  Проставить точку
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/1391_Postroenie_tochek.htm#simple_point
Аналог данной функции при использовании Automation " метод ksDocument2D::ksPoint
Синтаксис:
reference Point (double x, double y, 
unsigned int style);
Входные параметры:
4380



x, y " координаты точки,
style " стиль отрисовки точек.

Возвращаемое значение:

указатель на графический объект Точка " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
Объект создается в текущем слое текущего вида.

PointArraw  Проставить значок в графическом 
документе
Пример...

Справка системы КОМПАС: стрелка линии"выноски...
KOMPAS.chm::/CM_LEADER.htm

Тип значка...
KOMPAS.chm::/CM_LEADER.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksPointArraw
Синтаксис:
reference PointArraw (double x, double y,
double ang,
unsigned char term);
Входные параметры:

x, y " координаты точки привязки значка,
ang " угол поворота значка,
term " тип отрисовки значка.

Аннотационные объекты
Функции данного радела обеспечивают построение аннотационных объектов.

AnnArcByPoint  Создать аннотационную дугу по точкам
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksAnnArcByPoint.
Синтаксис:
reference AnnArcByPoint (double xc, double yc, double rad,
4381



double x2, double y2,
short direction,
unsigned char term1, unsigned char term2,
unsigned short style);
Входные параметры:

xc, yc " координаты центра дуги,
rad " радиус дуги,
x1, y1 " координаты начальной точки дуги,
x2, y2 " координаты конечной точки дуги,
direction " направление отрисовки дуги: 

 1 " против часовой стрелки, 
"1 " по часовой стрелке,

term1, term2 " типы значков на концах дуги,
style " стиль линии.

Возвращаемое значение:

указатель на аннотационную дугу " в случае удачного завершения,
0 " в случае неудачи.

AnnLineSeg  Построить аннотационный отрезок
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksAnnLineSeg.
Синтаксис:
reference AnnLineSeg (double x1, double y1,
double x2, double y2,
unsigned char term1, unsigned char term2,
unsigned short style);
Входные параметры:

x1, y1 " координаты первой точки отрезка,
x2, y2 " координаты второй точки отрезка,
term1, term2 " типы значков на концах линии,
style " стиль линии.

Возвращаемое значение:

указатель на аннотационный отрезок " в случае удачного завершения,
0 " в случае неудачи.
4382



ksAnnCircle  Создать объект "Аннотационная 
окружность"
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksAnnCircle.
Синтаксис:
reference ksAnnCircle ( double xc,
double yc,
double rad,
unsigned short style );
Входные параметры:

xc, yc " координаты центра окружности,
rad " радиус окружности,
style " стиль линии.

Возвращаемое значение:

указатель на аннотационную окружность " в случае удачного завершения,
0 " в случае неудачи.

Примечание:

1.  Аннотационные объекты можно создавать только в составе макро. Допускается созда"
ние аннотационных объектов во временной группе для последующего добавления в ма"
кро.

2.  При разрушении макро аннотационные объекты превращаются в геометрические.

ksAnnEllipse  Создать объект "Аннотационный эллипс"
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksAnnEllipse
Синтаксис:
reference ksAnnEllipse ( EllipseParam * par );
Входные параметры:

par " указатель на структуру параметров эллипса EllipseParam,

Возвращаемое значение:

указатель на аннотационный эллипс " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
4383



1.  Аннотационные объекты можно создавать только в составе макро. Допускается созда"
ние аннотационных объектов во временной группе для последующего добавления в ма"
кро.

2.  При разрушении макро"аннотационные объекты превращаются в геометрические.

ksAnnParEllipseArc  Создать объект  "Аннотационная 
дуга эллипса"
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksAnnParEllipseArc.
Синтаксис:
reference LIB_FUNC ksAnnParEllipseArc ( EllipseArcParam1 * par,
unsigned char term1,
unsigned char term2 );
Входные параметры:

par " указатель на структуру параметров дуги
эллипса EllipseArcParam1,

term1, term2 " типы значков на концах ломаной.

Возвращаемое значение:

указатель на аннотационную дугу эллипса " в случае удачного завершения,
0 " в случае неудачи.

Примечание:

1.  Аннотационные объекты можно создавать только в составе макро. Допускается созда"
ние аннотационных объектов во временной группе для последующего добавления в ма"
кро.

2. При разрушении макро аннотационные объекты превращаются в геометрические.

ksAnnPoint  Создать объект "точка" c аннотационной 
точкой привязки
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksAnnPolyline.
Синтаксис:
reference LIB_FUNC ksAnnPoint( double x,
double y,
unsigned short style );
Входные параметры:

x, y " координаты точки,
4384



style " стиль отрисовки точ"
ки:
0 " точка,
1 " крестик,
2 " х"точка,
3 " квадрат,
4 " треугольник,
5 " окружность,
6 " звезда,
7 " перечеркнутый
квадрат,
8 " утолщенный плюс.

Возвращаемое значение:

указатель на точку " в случае удачного завершения,
0 " в случае неудачи.

Примечание:

1.  Аннотационные объекты можно создавать только в составе макро. Допускается созда"
ние аннотационных объектов во временной группе для последующего добавления в ма"
кро.

2.  При разрушении макро"аннотационные объекты превращаются в геометрические.
3.  Координаты точки привязки аннотационные не зависят от масштаба вида.

ksAnnPolyline  Создать аннотационную ломаную линию
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksAnnPolyline.
Синтаксис:
int ksAnnPolyline( unsigned short style,
unsigned char term1,
unsigned char term2 );
Входные параметры:

style " стиль линии,
term1, term2 " типы значков на концах ломаной.

Возвращаемое значение:

указатель на аннотационную ломаную линию " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
4385



1.  Аннотационные объекты можно создавать только в составе макро. ksAnnPolyline " со"
ставной объект. Объекты Point, вводимые между операторами ksAnnPolyline и EndObj,
принадлежат аннотационной полилинии. Допускается создание аннотационных объек"
тов во временной группе для последующего добавления в макро.

2.  При разрушении макро"аннотационные объекты превращаются в геометрические.

ksAnnPolylineEx  Создать объект "Аннотационная 
ломаная линия" по структуре параметров
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksAnnPolylineEx.
Синтаксис:
reference ksAnnPolylineEx( PolylineParamEx * par,
unsigned char term1,
unsigned char term2 );
Входные параметры:

par " указатель на структуру параметров ломаной PolylineParamEx,
term1, term2 " типы значков на концах ломаной.

Возвращаемое значение:

указатель на аннотационную ломаную " в случае удачного завершения,
0 " в случае неудачи.

Примечание:

1.  Аннотационные объекты можно создавать только в составе макро. Допускается созда"
ние аннотационных объектов во временной группе для последующего добавления в ма"
кро.

2.  При разрушении макро"аннотационные объекты превращаются в геометрические.

ksAnnTextEx Создать многострочный текст по структуре 
параметров с аннотационной точкой привязки
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksAnnTextEx.
Синтаксис:
reference ksAnnTextEx( TextParam * txtParam,
int align );
Входные параметры:
4386



txtParam " параметры текста,
align " выравнивание тек"

ста:
"1 " установить вырав"
нивание как у стиля
текста,
0 " слева,
1 " по центру,
2 " справа,
3 " на всю ширину.

Возвращаемое значение:

указатель на текст " в случае удачного завершения,
0 " в случае неудачи.

Примечание:

1.  Аннотационные объекты можно создавать только в составе макро. Допускается созда"
ние аннотационных объектов во временной группе для последующего добавления в ма"
кро.

2.  При разрушении макро"аннотационные объекты превращаются в геометрические.
3.  Координаты точки привязки не зависят от масштаба вида.

Кривые Безье, Nurbs, ломаные
Функции данного радела обеспечивают построение NURBS и кривых Безье.

Bezier  Создать кривую Безье 
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_BEZIER.htm
Аналог данной функции при использовании Automation " метод ksDocument2D::ksBezier.
Синтаксис:
int Bezier (int closed, unsigned int style);
Входные параметры:

closed " признак замыкания сплайна: 
0 " незамкнутый, 
1 " замкнутый,

style стиль линии.

Системные стили линий...
Возвращаемое значение:
4387



1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Характерные точки кривой Безье задаются функциями Point (если не надо задавать про"
изводные в узлах) или BezierPoint (при необходимости задания производных) до вызова
EndObj.

2.  Объект создается в текущем слое текущего вида.
3.  В качестве стиля линии можно задавать номер системного или пользовательского стиля

линии.
4.  Функция EndObj возвращает указатель на созданный объект Кривая Безье.

_Bezier  Создать кривую Безье по массиву точек (узлов 
кривой Безье)
 Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_BEZIER.htm
Синтаксис:
reference _Bezier (BezierPointParam *par,
   int CountPoints,
   int closed,
   unsigned int style);
Входные параметры:

par " массив точек (узлов кривой Безье " BezierPointParam), 
определяющих кривую.

CountPoints " количество точек в массиве,
closed " признак замыкания сплайна: 

0 " незамкнутый, 
1 " замкнутый,

style " стиль линии.

Системные стили линий...
Возвращаемое значение:

указатель на кривую Безье " в случае успешного завершения,
0 " в случае неудачи.

BezierPoint  Построить узел кривой Безье
Пример...
4388



Справка системы КОМПАС...
KOMPAS.chm::/CM_BEZIER.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksBezierPoint.
Синтаксис:
int BezierPoint (BezierPointParam *par);
Входной параметр:

par " указатель на структуру параметров узла кривой Безье....

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

ksAddPowerForm  Ввести параметр для построения 
NURBS кусочностепенным способом
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksAddPowerForm.
Синтаксис:
int ksAddPowerForm (double x, double y);
Входные параметры:

x, y " параметры степенной функции 
(см. Примечание).

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Кусочно"степенная форма состоит из последовательности стыкующихся полиномов:
P0 [0, 1), P1 [1, 2), ... Pk [k, k1),
где Pi " полином, [i, i1) " интервал определения,

Pi(t).x = a0.x a1.x * (t " i) a2.x * (t " i) * (t " i) ... an.x * (t " i)^n
Pi(t).y = a0.y a1.y * (t " i) a2.y * (t " i) * (t " i) ... an.y * (t " i)^n

Функция ksAddPowerForm должна вызываться последовательно n1 раз для пар параме"
тров (a0.x, a0.y), (a1.x, a1.y), ... (an.x, an.y).
4389



Затем вызывается функция ksCreatePowerArc, которая создает из переданных параме"
тров дугу NURBS степени n 1 и присоединяет ее к существующей кривой NURBS.

ksCreatePowerArc  Построить дугу NURBS кусочно
степенным способом и присоединить ее к 
существующей кривой NURBS
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksCreatePowerArc.
Синтаксис:
int ksCreatePowerArc();
Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание :
Параметры для построения дуги определяются функцией ksAddPowerForm.

ksNurbsKnot  Создать узел NURBSкривой
Пример... 

Справка системы КОМПАС...
KOMPAS.chm::/CM_NURBS.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksNurbsKnot.
Синтаксис:
int ksNurbsKnot (double knot);
Входной параметр:

knot " узел кривой NURBS.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Функция предназначена для считывания форматов обмена, в частности, DXF.
Для создания NURBS"кривой массив узлов (узловой вектор) задавать не обязательно. Но
если он задан, то должен подчиняться следующим правилам:
4390



1.  Узловой вектор не должен быть убывающим.
2.  Количество узлов (knotCount) должно быть:

▼ для разомкнутого сплайна knotCount= degree + pointCount;
▼ для замкнутого сплайна knotCount= degree + pointCount + ( degree "1 );

где:
▼ degree     " степень сплайна,
▼ pointCount " количество точек.

ksPolyline  Создать ломаную
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/spline_postroenie.htm#POLYLINE
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksPolyline.
Синтаксис:
int ksPolyline (unsigned short style);
Входной параметр:

style стиль линии.

Системные стили линий...
Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
Узлы определяются следующими далее функциями Point. Описание завершается фун"
кцией EndObj, возвращающей указатель на созданный объект. Объект создается в теку"
щем слое текущего вида. В качестве стиля линии можно задавать номер предопределен"
ного (системного) или пользовательского стиля линии.

_ksPolyline  Создать ломаную линию 
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/spline_postroenie.htm#POLYLINE
Синтаксис:
reference _ksPolyline (PolylineParam *par);
Выходной параметр:
4391



par " указатель на структуру параметров ломаной PolylineParam...

Возвращаемое значение:

указатель на ломаную линию " в случае удачного завершения,
0 " в случае неудачи.

Описание:

1.  Объект создается в текущем слое текущего вида. В стилях линии можно задавать номер
предопределенного (системного) или пользовательского стиля линии.

2.  В функции GetObjParam на указатель полилинии выдаются параметры полилинии в виде
структуры PolylineParam (если значение par равно ALLPARAM), если значение par другое
" выдается только стиль полилинии. В функции SetObjParam можно изменить параметры
полилинии.

ksPolylineEx  Создать ломаную линию
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/spline_postroenie.htm#POLYLINE
Синтаксис:
reference ksPolylineEx(PolylineParamEx * par);
Входной параметр:

par " указатель на структуру параметров ломаной PolylineParamEx...

Возвращаемое значение:

указатель на ломаную линию " в случае удачного завершения,
0 " в случае неудачи.

Nurbs  Создать NURBS
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/spline_postroenie.htm#SPLINE_NURBS
Аналог данной функции при использовании Automation " метод ksDocument2D::ksNurbs.
Синтаксис:
int Nurbs (unsigned char degree, 
unsigned char close, 
unsigned int style);
4392



 10,
Входные параметры:

degree " порядок NURBS (степень полинома + 1), от 3 до
close " признак замыкания сплайна: 

FALSE " незамкнутый, 
TRUE " замкнутый,

style стиль линии.

Системные стили линий...
Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Узлы кривой определяются следующими далее функциями Point или NurbsPoint. Описа"
ние кривой завершается функцией EndObj, возвращающей указатель на созданную кри"
вую.

2.  Объект создается в текущем слое текущего вида.
3.  В качестве стиля линии можно задавать номер предопределенного (системного LStyles)

или пользовательского стиля линии.

NurbsForConicCurve  Создать NURBS по 
характеристическим точкам конического сечения
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksNurbsForConicCurve.
Синтаксис:
reference NurbsForConicCurve (double x[4], 
double y[4], 
unsigned short style);
Входные параметры:

x[4], y[4] " массивы координат характеристических точек конического сечения; точки 
не должны совпадать, а касательные к кривой в этих точках не должны 
быть параллельными,

style " стиль линии.

Системные стили линий...
Возвращаемое значение:

указатель на NURBS " в случае удачного завершения,
0 " в случае неудачи.
4393



NurbsPoint  Создать узел NURBS
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_NURBS.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksNurbsPoint.
Синтаксис:
int  NurbsPoint (NurbsPointParam *par);
Входной параметр:

par " указатель на структуру параметров узла NURBS....

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Узлы кривой определяются следующими далее функциями Point или NurbsPoint. Описа"
ние кривой завершается функцией EndObj, возвращающей указатель на созданную кри"
вую.

TanLineAngCurve  Функция расчета касательной к 
кривой
Синтаксис:
void LIB_FUNC TanLineAngCurve( reference p,         // указатель на кривую,
                                                        double ang,        // угол касательной,
                                           reference pointArr );        // массив точек касания.
Входные параметры:

p " указатель на кривую,
ang " угол касательной.

Выходные параметры:

pointArr " массив точек касания.
4394



Составные объекты
Contour  Создать контур
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_ASSEMBLYCONTOUR.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksContour.
Синтаксис:
int Contour (unsigned short style);
Входной параметр:

style " стиль линии.

Примечание:
Все, определяемые далее до вызова функции EndObj, геометрические примитивы черте"
жа (отрезки, дуги, кривые) будут включены в контур. Контур должен быть непрерывным
" начальная точка очередного объекта обязана совпадать с конечной точкой предыдуще"
го. Полученный контур может быть использован для построения эквидистанты. Функция
EndObj возвращает указатель на созданный макроэлемент.

EndObj  Завершить создание комплексного объекта
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_MAKEMACRO.htm
Аналог данной функции при использовании Automation " метод ksDocument2D::ksEndObj 
Синтаксис:
reference EndObj (void);
Возвращаемое значение:

указатель на завершенный объект (контур, макроэлемент и т.п.) " в случае удачного 
завершения,

0 " в случае неудачи.

Примечание:
Комплексным считается объект, определяемый несколькими функциями.

ksDuplicateBoundaries  Получить временную группу 
контуров, задающих границы штриховки или заливки
Пример...
4395



Справка системы КОМПАС...
KOMPAS.chm::/164_20_1_Zadanie_granic_shtrikh.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksDuplicateBoundaries.
Синтаксис:
reference ksDuplicateBoundaries (reference p);
Входной параметр:

p " указатель на штриховку или заливку.

Возвращаемое значение:

указатель на временную группу контуров, " в случае удачного завершения,
задающих границы штриховки или заливки
0 " в случае неудачи.

Примечание:
Функция устарела, рекомендуется вместо нее использовать функцию
ksDuplicateBoundariesEx

ksDuplicateBoundariesEx  Получить копию границы 
штриховки или заливки во временной группе
Справка системы КОМПАС...
KOMPAS.chm::/164_20_1_Zadanie_granic_shtrikh.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksDuplicateBoundaries.
Синтаксис:
reference ksDuplicateBoundariesEx (reference p, unsigned char systemCoord);
Входной параметр:

p " указатель на штриховку или заливку.
systemCoord  1 " в системе координат листа,

 0 " в системе координат текущего вида.

Возвращаемое значение:

указатель на временную группу контуров, " в случае удачного завершения,
задающих границы штриховки или заливки
0 " в случае неудачи.
4396



Работа с макроэлементами и библиотечными 
макроэлементами
Функции работы с макроэлементами и библиотечными 
макроэлементами
Библиотечный макроэлемент " это макроэлемент, имеющий пользовательские параме"
тры.
Пользовательские параметры могут быть записаны в макроэлемент при помощи фун"
кции ksSetMacroParam.
Также при помощи функции ksSetMacroParam может быть включен режим управления
характерными точками макроэлемента (поддержка макроэлементом интерфейса
ILibHPObject ), отработка событий внешних воздействий на макроэлемент (поддержка
макроэлементом интерфейса ILibExternalObject), выключен\включен режим редактиро"
вания макроэлемента по двойному щелчку мыши.
Получить пользовательские параметры можно при помощи функции GetMacroParam.

EditMacroMode  Получить режим работы функции 
библиотеки (создание нового или редактирование 
существующего макроэлемента) 
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/Z_MACRO.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksEditMacroMode.
Синтаксис:
reference EditMacroMode();
Возвращаемое значение:

указатель на редактируе" " при редактировании макроэлемента,
мый макроэлемент 
0 " при создании макроэлемента.

EndObj  Завершить создание комплексного объекта
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/351_39_1_Sozdanie_novogo_makroe.htm
Аналог данной функции при использовании Automation " метод ksDocument2D::ksEndObj
Синтаксис:
reference EndObj (void);
Возвращаемое значение:
4397



указатель на завершенный объ" " в случае удачного завершения,
ект (контур, макроэлемент и
т.п.)
0 " в случае неудачи.

Примечание:
Комплексным считается объект, определяемый несколькими функциями.

GetMacroParam    Получить параметры макроэлемента
 Пример...

Справка системы КОМПАС...
KOMPAS.chm::/Z_MACRO.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetMacroParam.
Синтаксис:
int GetMacroParam (reference pMacro,
void * value,
unsigned int size);
Входные параметры:

pMacro " указатель на макроэлемент.

Выходные параметры:

valu "указатель на область памяти размером size, в ко"
e торую будут скопированы пользовательские дан"

ные из макроэлемента,
size "размер области памяти с пользовательскими

данными для макроэлемента.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1. Пользовательские данные могут быть сохранены в макроэлементе при помощи
ksSetMacroParam.

2. При pMacro == 0 выдаются параметры макроэлемента, редактирование которого произ"
водится в данный момент (если таковой существует).
4398



3. При необходимости значение параметра size можно получить при помощи функции
GetMacroParamSize.

GetMacroParamSize  Получить размер памяти 
параметров указанного макроэлемента
 Пример...

Справка системы КОМПАС...
KOMPAS.chm::/Z_MACRO.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetMacroParamSize.
Синтаксис:
int GetMacroParamSize (reference ref);
Входной параметр:

ref " указатель на макроэлемент.

Возвращаемое значение:

размер памяти " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
При ref = 0 выдается размер памяти параметров макроэлемента, редактирование кото"
рого производится в данный момент (если таковой имеется).

GetMacroPlacement  Получить точку привязки и угол 
поворота макроэлемента
Справка системы КОМПАС...
KOMPAS.chm::/Z_MACRO.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetMacroPlacement.
Синтаксис:
int GetMacroPlacement(reference macro,
double *x, 
double *y, 
double *angl);
Входные параметры:

macro " указатель на макроэлемент (0 " редактируемый макроэлемент),
4399



Выходные параметры:

x, y " координаты точки привязки макроэлемента
angl " угол поворота макроэлемента от оси OX против часовой стрелки (в градусах)

Возвращаемое значение:

1 " в случае успеха,
0 " в случае неудачи,
"1 " если у макроэлемента нет СК (не вызывалась функция 

SetMacroPlacement.)

Смотрите также:
Функция SetMacroPlacement.
Примечание:
Функция устарела, рекомендуется вместо нее использовать функцию
ksGetMacroPlacement.

ksAddObjectToMacro  Добавить объект, слой, вид или 
группу объектов в макроэлемент
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksAddObjectToMacro.
Синтаксис:
int ksAddObjectToMacro (reference macro,reference obj);
Входные параметры:

macro " указатель на макроэлемент,
obj " указатель на добавляемый объект.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1. Слой и вид добавляются россыпью.
2. Добавляемые объекты и макроэлемент должны принадлежать текущему документу и

одному виду.
3. Добавляемые объекты перестают быть самостоятельными.
4400



ksGetMacroEditParam  Получить параметры 
редактирования указанного макроэлемента 
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/Z_MACRO.htm
Синтаксис:
int ksGetMacroEditParam (reference ref,
char *  fileName,
unsigned int fileNameSize,
char * libName,
unsigned int libNameSize,
int * number); 
Входные параметры:

ref " указатель на макроэлемент,
fileName " указатель на буфер имени файла библиотеки,
fileNameSize " размер буферa имени файла библиотеки,
libName " указатель на буфер имени библиотеки,
libNameSize " размер буферa имени библиотеки,
number " указатель на буфер номерa функции редактирования.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1. Функция возвращает для указанного макроэлемента параметры редактирования: имя
файла прикладной библиотеки, имя библиотеки и номер функции, предназначенной для
редактирования данного макроэлемента.

2. При ref = 0 выдаются параметры для макроэлемента, редактирование которого произво"
дится в данный момент (если таковой имеется).

3. При значении NULL параметров fileName, libName, number или, если значение
fileNameSize, libNameSize меньше требуемой длины, параметры не возвращаются.

4. При использовании Unicode следует использовать функцию ksGetMacroEditParamW.

ksGetMacroEditParamW  Получить параметры 
редактирования указанного макроэлемента (Unicode)
Справка системы КОМПАС...
KOMPAS.chm::/Z_MACRO.htm
Синтаксис:
4401



int LIB_FUNC ksGetMacroEditParamW (reference ref,
LPWSTR fileName,
unsigned int fileNameSize,
LPWSTR libName,
unsigned int libNameSize,
int * number); 
Входные параметры:

ref " указатель на макроэлемент,
fileName " указатель на буфер имени файла библиотеки,
fileNameSize " размер буферa имени файла библиотеки,
libName " указатель на буфер имени библиотеки,
libNameSize " размер буферa имени библиотеки,
number " указатель на буфер номерa функции редактирования.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1. Функция возвращает для указанного макроэлемента параметры редактирования: имя
файла прикладной библиотеки, имя библиотеки и номер функции, предназначенной для
редактирования данного макроэлемента.

2. При ref = 0 выдаются параметры для макроэлемента, редактирование которого произво"
дится в данный момент (если таковой имеется).

3. При значении NULL параметров fileName, libName, number или если значение
fileNameSize, libNameSize меньше требуемой длины " параметры не возвращаются.

4. При использовании ANSI следует использовать функцию ksGetMacroEditParam.

ksGetMacroPlacement  Получить точку привязки и угол 
поворота макроэлемента
Справка системы КОМПАС...
KOMPAS.chm::/619_75_2_Vstavka_fragmentov_iz_.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetMacroPlacement.
Синтаксис:
int ksGetMacroPlacement (reference macro,
double *x, 
double *y, 
double *angl);
4402



unsigned char sheetParam);
Входные параметры:

macro " указатель на макроэлемент (0 " редактируемый макроэлемент),
sheetParam " признак системы координат:

1 " координаты и угол заданы в СК макроэлемента,
0 " в СК вида.

Выходные параметры:

x, y " координаты точки привязки макроэлемента,
angl " угол поворота макроэлемента от оси OX против часовой стрелки (в 

градусах).

Возвращаемое значение:

1 " в случае успеха,
0 " в случае неудачи,
"1 " если у макроэлемента нет СК (не вызывалась функция 

SetMacroPlacement),

Смотрите также:
Функция SetMacroPlacement.

ksGetMacroPlacementEx  Получить точку привязки и 
угол поворота макроэлемента
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetMacroPlacementEx.
Описание:
Развитие функции ksGetMacroPlacement. В дополнение можно получить флаг зеркаль"
ной симметрии объекта.
mirrorSymmetry = 0 " нормальный исходный объект,
mirrorSymmetry = 1 " макроэлемент получен операцией симметрии из исходного,
mirrorSymmetry = NULL " не заполняется.
Синтаксис:
int  ksGetMacroPlacementEx( reference macro,
double *x,
double *y,
double *angl,
unsigned char sheetParam,
unsigned char * mirrorSymmetry );//флаг зеркальной симметрии объекта
Входные параметры:
4403



macro " указатель на макроэлемент (0 " редактируемый макроэлемент),
sheetParam " признак системы координат:

1 " координаты и угол заданы в СК листа,
0 " в СК вида.

Выходные параметры:

x, y " координаты точки привязки макроэлемента,
angl " угол поворота макроэлемента от оси OX против часовой стрелки (в 

градусах),
mirrorSymmetry " флаг зеркальной симметрии объекта;

0 " нормальный исходный объект,
1 " макроэлемент получен операцией симметрии из исходного.

Возвращаемое значение:

1 " в случае успеха,
0 " ошибка выполнения функции (у макрообъекта нет СК).

Смотрите также:

1. Функции GetMacroPlacement, ksGetMacroPlacement.
2. Рекомендации по обеспечению корректного редактирования библиотекой макроэлемен"

тов, геометрия которых зеркально отражена, относительно исходного ее построения..
Примечание:
Функция позволяет получить СК макрообъекта в СК вида или листа, угол проворота,
флаг зеркальной симметрии объекта. Если СК макро не имеет, функция вернет 0.
Если macro = 0, функция позволяет получить СК редактируемого макроэлемента.

ksGetMacroWaitDblClickEdit  Получить режим ожидания 
DblClick при редактировании макроэлемента
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetMacroWaitDblClickEdit.
Синтаксис:
long ksGetMacroWaitDblClickEdit (reference ref);
Входные параметры:

ref " указатель на макроэлемент.

Возвращаемое значение:

1 " режим ожидания DblClick включен,
0 " режим ожидания DblClick выключен.

Примечание:
4404



Макроэлемент, созданный библиотекой, может редактироваться двумя способами: 
▼ по первому щелчку мыши " через характерные точки и\или интерфейс внешних воздей"

ствий;
▼ по двойному щелчку " через команду библиотеки.

Если время инициализации характерных точек сравнимо с двойным щелчком, то редак"
тирование через команду библиотеки становится невозможно. Во время редактирования
макроэлемента, при включенном режиме ожидания DblClick, после первого щелчка по
макроэлементу КОМПАС будет ожидать повторного нажатия, в течении времени, уста"
новленного в настройках "Скорость выполнения двойного щелчка".
При выключенном режиме ожидания DblClick пауза отсутствует и нажатие всегда интер"
претируется как одинарное нажатие.

ksOpenMacro  Открыть макроэлемент для 
редактирования
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/Z_MACRO.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksOpenMacro.
Синтаксис:
int ksOpenMacro(reference macro);
Входной параметр:

macro " указатель на макроэлемент.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1. После вызова функции можно добавлять в macro новые объекты вида, использовать
функцию FindObj; режим закрывается функцией EndObj();

2. Открыт доступ к внутренним объектам макроэлементов. Теперь при создании макроэле"
мента или при добавлении к макроэлементу новых объектов вида, на внутренние объек"
ты выдается указатель (reference), как и на самостоятельные объекты вида.
 Пример....

3. Допускается вводить пустой макроэлемент. Пустой макроэлемент является вырожден"
ным объектом. Он живет только в период редактирования документа. После записи до"
кумента, в котором находился пустой макро, этот макро будет удален. Макроэлемент
считается нормальным, если в нем находится хотя бы один внутренний объект.
4405



Пример…
4.  Функции работы с указателями на объекты допускают работу с внутренними объектами

макроэлемента. К ним относятся:
▼ CopyObj
▼ DecomposeObj
▼ DeleteObj
▼ GetObjGabaritRect
▼ GetObjParam
▼ ksEditViewObject
▼ LightObj
▼ MoveObj
▼ RotateObj 
▼ SetObjParam
▼ SymmetryObj
▼ TransformObj

ksSetMacroParam  Записать параметры макроэлемента
Справка системы КОМПАС...
KOMPAS.chm::/Z_MACRO.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksSetMacroParam.
Синтаксис:
int ksSetMacroParam( reference m,
void * value,
unsigned int size,
char * fileName,
char * libName,
int number,
unsigned char paramType );
Входные параметры:

m " указатель на макроэлемент,
value " указатель на область памяти размером size, содержащую 

пользовательские данные для макроэлемента (см. 
описание ниже),

size " размер области памяти с пользовательскими данными 
для макроэлемента;

fileName " имя файла библиотеки;
libName " имя библиотеки;
number " номер функции в библиотеке,
paramType " битовый флаг, указание какой тип редактирования 

поддерживает макроэлемент.
4406



Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Описание:
Запись в макроэлемент параметров, создающей его библиотечной функции, для даль"
нейшего редактирования. Если в сеансе работы системы КОМПАС"ГРАФИК такой макро"
элемент указывается двойным щелчком левой кнопки мыши, то автоматически будет
вызвана библиотечная функция для его редактирования. Она не обязательно должна
совпадать с родительской функцией.
При значении имен библиотеки и ее файла NULL и номера функции "1 редактирование
будет осуществляться родительской функцией.
При обработке событий это правило не действует, и в макроэлемент прописываются имя
той библиотеки и ее файла, которая была использована непосредственно перед этим со"
бытием. Поэтому при создании макроэлемента по событию необходимо явно задавать
имя библиотеки, имя файла и номер функции.
При необходимости в параметрах макроэлемента можно дополнительно сохранить
пользовательские данные (допустимы все типы данных, кроме указателей), задав указа"
тель на область памяти, в которой эти данные хранятся и размер этой области памяти
(параметры value и size).
Примечание.

1. При использовании Unicode следует использовать функцию ksSetMacroParamW.
2. Параметры макроэлемента можно получить, используя функцию GetMacroParam.

ksSetMacroParamW  Записать параметры 
макроэлемента (Unicode)
Справка системы КОМПАС...
KOMPAS.chm::/Z_MACRO.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksSetMacroParam.
Синтаксис:
extern "C" int LIB_FUNC ksSetMacroParamW( reference m,
void * value,
unsigned int size,
LPWSTR fileName,
LPWSTR libName,
int number,
unsigned char paramType );
Входные параметры:

m " указатель на макроэлемент,
4407



value " указатель на структуру, содержащую сохраняемые параметры;
size " размер структуры параметров редактирования;
fileName " имя файла библиотеки;
libName " имя библиотеки;
number " номер функции в библиотеке,
paramType " битовый флаг, указание какой тип редактирования поддерживает макро.
Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Описание:
Запись в макроэлемент параметров, создающей его библиотечной функции, для даль"
нейшего редактирования. Если в сеансе работы системы КОМПАС"ГРАФИК такой макро"
элемент указывается двойным щелчком левой кнопки мыши, то автоматически будет
вызвана библиотечная функция для его редактирования. Она не обязательно должна
совпадать с родительской функцией. При значении имен библиотеки и ее файла NULL и
номера функции "1 редактирование будет осуществляться родительской функцией.
При обработке событий это правило не действует, и в макроэлемент прописываются имя
той библиотеки и ее файла, которая была использована непосредственно перед этим со"
бытием. Поэтому при создании макроэлемента по событию необходимо явно задавать
имя библиотеки, имя файла и номер функции.
Примечание.

1. При использовании ANSI следует использовать функцию ksSetMacroParam.
2. Можно сохранить в макроэлементе дополнительные параметры, распределив блок па"

мяти userPars и заполнив его нужными значениями (допустимы все типы данных, кроме
указателей).

3. Параметры макроэлемента можно получить, используя функцию GetMacroParam.

ksSetMacroPlacementEx  Установить точку привязки и 
угол поворота макроэлемента
Справка системы КОМПАС...
KOMPAS.chm::/Z_MACRO.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksSetMacroPlacementEx.
Синтаксис:
int  ksSetMacroPlacementEx( reference macro,
double x,
double y,
double angl,
int relative,
unsigned char mirrorSymmetry );
Входные параметры:
4408



macro " указатель на макроэлемент (0 " редактируемый 
макроэлемент),

x, y " точка начала координат макроэлемента,
angl " угол поворота оcи X,
relative " признак системы координат:

1 " координаты и угол заданы в СК макроэлемента,
0 " в СК вида,

mirrorSymmetry " флаг зеркальной симметрии объекта.

Возвращаемое значение:

1 " в случае успеха,
0 " в случае неудачи.

Смотрите также:

1. Функции GetMacroPlacement, ksGetMacroPlacement.
2. Рекомендации по обеспечению корректного редактирования библиотекой макроэлемен"

тов, геометрия которых зеркально отражена относительно исходного ее построения.
Примечание:
Функция позволяет установить СК макроэлемента либо в СК вида, либо смещением от"
носительно СК макроэлемента.

ksSetMacroWaitDblClickEdit  Изменить режим ожидания 
DblClick при редактировании макроэлемента
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksSetMacroWaitDblClickEdit.
Синтаксис:
long ksSetMacroWaitDblClickEdit (reference ref, long waitDblClick);
Входные параметры:

ref " указатель на макроэлемент,
waitDblClick " режим ожидания DblClick (1 " включить, 0 " выключить).

Возвращаемое значение:

1 " в случае успеха,
0 " в случае неудачи.

Примечание:
Макроэлемент, созданный библиотекой, может редактироваться двумя способами: 

▼ по первому щелчку мыши " через характерные точки и\или интерфейс внешних воздей"
ствий;

▼ по двойному щелчку " через команду библиотеки.
4409



Если время инициализации характерных точек сравнимо с двойным щелчком, то редак"
тирование через команду библиотеки становится невозможно. Во время редактирования
макроэлемента при включенном режиме ожидания DblClick после первого щелчка по ма"
кроэлементу КОМПАС будет ожидать повторного нажатия, в течении времени, установ"
ленного в настройках "Скорость выполнения двойного щелчка".
При выключенном режиме ожидания DblClick пауза отсутствует и нажатие всегда интер"
претируется как одинарное нажатие.

ksUpdateMacro  Очистить макроэлемент и положить в 
него группу
Справка системы КОМПАС...
KOMPAS.chm::/Z_MACRO.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksUpdateMacro.
Синтаксис:
int ksUpdateMacro (reference macro, reference gr);
Входные параметры:

macro " указатель на макроэлемент,
gr " указатель на группу.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Macro  Создать новый макроэлемент 
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/Z_MACRO.htm
Аналог данной функции при использовании Automation " метод ksDocument2D::ksMacro.
Синтаксис:
int Macro (unsigned char type);
Входной параметр:

type " тип макроэлемента: 
0 " объединяет объекты текущего слоя, 
1" включаемые объекты могут принадлежать разным слоям.
4410



Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1. Макроэлемент " составной объект. 
2. Объекты вида, вводимые между методами ksDocument2D::ksMacro и EndObj, принадле"

жат макроэлементу. EndObj возвращает указатель на макроэлемент.
3. Допускается вложенность макроэлементов друг в друга (максимальное число вложений

не ограничено).

SetMacroParam  Установить параметры макроэлемента 
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/Z_MACRO.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksSetMacroParam.
Синтаксис:
int SetMacroParam (reference m, 
void * value,
unsigned int size,
char *fileName, 
char * libName ,
int number);
Входные параметры:

m " указатель на макроэлемент,
value " указатель на структуру, содержащую сохраняемые параметры;
size " размер структуры параметров редактирования;
fileName " имя файла библиотеки;
libName " имя библиотеки;
number " номер функции в библиотеке.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Описание:
4411



1. Запись в макроэлемент параметров, создающей его библиотечной функции, для даль"
нейшего редактирования. Если в сеансе работы системы КОМПАС"ГРАФИК такой макро"
элемент указывается двойным щелчком левой кнопки мыши, то автоматически будет
вызвана библиотечная функция для его редактирования. Она не обязательно должна
совпадать с родительской функцией. При значении имен библиотеки и ее файла NULL и
номера функции "1 редактирование будет осуществляться родительской функцией.

2. Можно сохранить в макроэлементе дополнительные параметры, распределив блок па"
мяти userPars и заполнив его нужными значениями (допустимы все типы данных, кроме
указателей).

3. Параметры макроэлемента можно получить, используя функцию GetMacroParam.
Примечание:
Функция устарела, рекомендуется вместо нее использовать функцию ksSetMacroParam .

SetMacroPlacement  Установить точку привязки и угол 
поворота макроэлемента
Справка системы КОМПАС..
KOMPAS.chm::/Z_MACRO.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksSetMacroPlacement.
Синтаксис:
int SetMacroPlacement(reference macro,
double x, 
double y, 
double angl, 
int relativ);
Входные параметры:

macro " указатель на макроэлемент (0 " редактируемый макроэлемент),
x, y " координаты точки привязки макроэлемента,
angl " угол поворота макроэлемента от оси OX против часовой стрелки (в 

градусах),
relativ " признак системы координат:

1 " координаты и угол заданы в СК макроэлемента,
0 " в СК вида.

Возвращаемое значение:

1 " в случае успеха,
0 " в случае неудачи.

Смотрите также:
▼ Функции GetMacroPlacement, ksGetMacroPlacement, ksSetMacroPlacementEx
4412



▼ Рекомендации по обеспечению корректного редактирования библиотекой макроэлемен"
тов, геометрия которых зеркально отражена, относительно исходного ее построения. 

Внешние воздействия на библиотечный элемент

Интерфейс ILibExternalObject
Интерфейс внешних воздействий на библиотечный элемент 2D.
Иерархия:
IUnknown

ILibExternalObject
Описание.
Интерфейс должен быть реализован на стороне библиотеки разработчиком приложе"
ния, если необходимо отработать события, возникающие при редактировании библио"
течного элемента 2D. 
Режим поддержки интерфейса управления характерными точками включается в фун"
кции ksSetMacroParam.
Вызывается КОМПАС при редактировании библиотечного элемента 2D через функцию
LibObjInterfaceEntry.
Является обработчиком событий, генерирующихся КОМПАС при редактировании библи"
отечного элемента 2D.
Интерфейс позволяет обработать события сдвига, поворота, деформации, удаления,
восстановления из Undo для библиотечного элемента 2D, а также добавление элемента
в модель.
Интерфейс реализован еще до реализации механизма событий в КОМПАС API.
Практически полностью дублирует события интерфейса IObject2DNotify.
Отличие состоит в том, что передача интерфейса КОМПАС осуществляется не через под"
писку а посредством предопределенной функции LibObjInterfaceEntry. Передача интер"
фейса КОМПАС может быть осуществлена из библиотеки, установленной в функции
ksSetMacroParam, в то время как подписка на интерфейс IObject2DNotify может быть
осуществлена с любой библиотеки.

ILibExternalObject  методы

Lib_AddToModel  Библиотечный элемент 2D добавлен в 
модель
Интерфейс...
Синтаксис:
BOOL Lib_AddToModel();
Возвращаемое значение:

TRUE " в случае успешного завершения,
4413



FALSE " в случае неудачи.
Примечания:
Этот метод позволяет отработать событие добавления библиотечного элемента в мо"
дель.

Lib_Deform  Деформация библиотечного элемента 2D
Интерфейс...
Синтаксис:
BOOL Lib_Deform();
Возвращаемое значение:

TRUE " в случае успешного завершения,
FALSE " в случае неудачи.

Примечания:
Этот метод позволяет отработать событие деформации библиотечного элемента.

