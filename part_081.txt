Lib_Delete  Удаление библиотечного элемента 2D
Интерфейс...
Синтаксис:
BOOL Lib_Delete();
Возвращаемое значение:

TRUE " в случае успешного завершения,
FALSE " в случае неудачи.

Примечания:
Этот метод позволяет отработать событие удаления библиотечного элемента.

Lib_Move  Сдвиг библиотечного элемента 2D
Интерфейс...
Синтаксис:
BOOL Lib_Move();
Возвращаемое значение:

TRUE " в случае успешного завершения,
FALSE " в случае неудачи.

Примечания:
4414



Этот метод позволяет отработать событие сдвига библиотечного элемента.

Lib_Restore  Воcстановление библиотечного элемента 
2D из Undo
Интерфейс...
Синтаксис:
BOOL Lib_Restore();
Выходной параметр:

text " текст для отображения рядом с курсором.

Возвращаемое значение:

TRUE " в случае успешного завершения,
FALSE " в случае неудачи.

Примечания:
Этот метод позволяет отработать событие восстановления библиотечного элемента.

Lib_Rotate  Поворот библиотечного элемента 2D
Интерфейс...
Синтаксис:
BOOL Lib_Rotate();
Возвращаемое значение:

TRUE " в случае успешного завершения,
FALSE " в случае неудачи.

Примечания:
Этот метод позволяет отработать событие поворота библиотечного элемента.

Lib_Transform  Трансформация библиотечного 
элемента 2D
Интерфейс...
Синтаксис:
BOOL Lib_Transform();
Возвращаемое значение:

TRUE " в случае успешного завершения,
FALSE " в случае неудачи.
4415



Примечания:
Этот метод позволяет отработать событие трансформации библиотечного элемента.

Интерфейс ILibPropertyObject
Интерфейс объекта со свойствами отображаемыми в окне свойств.
Описание:
Интерфейс должен быть реализован на стороне библиотеки разработчиком приложе"
ния, если необходимо обеспечить управление характерными точками библиотечного
элемента 2D.
Режим поддержки интерфейса управления характерными точками включается в фун"
кции ksSetMacroParam.
Вызывается КОМПАС при селектировании библиотечного элемента 2d через функцию
LibObjInterfaceEntry.
Интерфейс является обработчиком событий, генерирующихся КОМПАС при селектиро"
вании библиотечного элемента.
Интерфейс позволяет выполнить следующие действия:

▼  Добавить дополнительные свойства в окно свойств для библиотечных элементов.
▼  Выполнить изменение свойств через окно свойств.
▼  Выполнить копирование свойств в процессе копирования свойств между библиотечны"

ми элементами.
▼ Выполнить поиск и селектирование объектов по свойствам.

Интерфейс реализован по аналогии с интерфейсом хот"точек.
Передача интерфейса в КОМПАС осуществляется посредством предопределенной фун"
кции LibObjInterfaceEntry. 
Передача интерфейса КОМПАС может быть осуществлена из библиотеки, установленной
флагом MP_PROPERTY_OBJECT в функции ksSetMacroParam, или установившей свойст"
во IMacroObject::PropertyObjectEditable.
Группировка и сортировка свойств осуществляется по идентификатору. Свойства могут
быть заданы в любой последовательности. Они будут отсортированы по возрастанию
идентификатора. Принадлежность к группе определяется также по идентификатору.
Свойство добавится в группу с ближайшим меньшим идентификатором.
Применение интерфейса приведено в следующих примерах:
Gayka1 (Демонстрационные примеры КОМПАС"МАСТЕР);
 Пример описания ресурсов...

ILibPropertyObject  методы

ApplyProperty  Установить новое значение для свойства
Интерфейс...
Синтаксис COM:
4416



int ApplyProperty( PropertyParam * param );
Входные и выходные параметры:

param " cтруктура параметров свойства PropertyParam,

Возвращаемое значение:

1 " новое значение свойства установлено,
0 " новое значение не установлено.

Примечание:
Идентификация свойства осуществляется по параметру propertyId в PropertyParam.

EndEditProperty  Завершение редактирования свойств 
объекта
Интерфейс...
Синтаксис COM:
BOOL EndEditProperty( );
Возвращаемое значение:
Не используется.
Примечание:
Предназначено для освобождения каких либо данных, созданных на время редактирова"
ния свойств.

GetGroupName  Имя группы объектов
Интерфейс...
Синтаксис COM:
 LPOLESTR GetGroupName();
 Возвращаемое значение:

" имя группы объектов, отображаемой в списке ти"
пов выделенных объектов окна свойств.

Примечание:
Группы объектов также отображаются в окне поиска объектов по свойствам.

GetMouseEnterLeavePoint  Запрос параметров точек для 
визуального определения места применения параметра
Интерфейс...
Синтаксис:
4417



BOOL GetMouseEnterLeavePoint( int propertyId, long pointIndex, LPUNKNOWN parameters );
Входные параметры:

prope " идентификатор свойства,
rtyId
pointI " индекс точки,
ndex 
param " интерфейс параметров отображения точки
eters IMouseEnterLeaveParameters.

Примечание:
Функция вызывается при наведении на редактор свойства, если установлен признак
PropertyParam .needMouseEnterLeaveMessage.
Функция позволяет подсветить в чертеже одну или несколько точек применения контр"
ола.
Функция вызывается в цикле с увеличением индекса точки pointIndex пока библиотека
не вернет FALSE, как признак завершения получения параметров точек.

GetProperty  Добавить свойство в список свойств
Интерфейс...
Синтаксис COM:
BOOL GetProperty( int index, PropertyParam * param );
Входной параметр:

index " индекс свойства,

Выходной параметр:

param " структура параметров свойства PropertyParam,

Возвращаемое значение:

TRUE " если требуется добавить свойство с заданным индексом,
FALSE " формирование списка свойств закончено.

Примечание:

1.  Метод позволяет сформировать список внешних свойств объекта.
2.  Метод вызывается при первом селектировании объекта.
3.  Для получения текущих значений свойства используется метод

ILibPropertyObject::UpdateProperty.
4418



4. В отличие от работы с окном свойств, для организации полноценной работы поиска по
свойствам библиотечных макроэлементов необходимо:

▼ Задать для вещественных и целых значений минимальное и максимальное значение
свойства (для создания правильного валидатора).

▼ Заполнить список всеми возможными значениями свойства без учета зависимостей от
других свойств (т.к. в диалоге поиска это список всегда должен показываться полно"
стью). Это требуется для полноценной работы динамически задаваемых списочных
свойств (PropertyParam::additionData).

OnChoiceProperty  Событие запуска внешнего 
редактирования для пользовательского свойства
Интерфейс...
Синтаксис COM:
BOOL OnChoiceProperty( PropertyParam * param );
Входные и выходные параметры:

param " cтруктура параметров свойства PropertyParam,

Возвращаемое значение:

TRUE " значение изменилось,
FALSE " значение не изменилось.

Примечание:

1. Идентификация свойства осуществляется по параметру propertyId в PropertyParam.
2. Событие вызывается для свойств с типом ksOPControlExternalEdit и

ksOPControlExternalStringEdit из перечисления ksObjectPropertyControlTypeEnum.

UpdateProperty  Обновить параметры свойства
Интерфейс...
Синтаксис COM:
BOOL UpdateProperty( PropertyParam * param );
Входные и выходные параметры:

param " cтруктура параметров свойства PropertyParam,

Возвращаемое значение:

TRUE " если параметры свойства обновились,
FALSE " если параметры свойства не изменились.

Примечание:
4419



1. Идентификация свойства осуществляется по параметру propertyId в PropertyParam.
2. При выделении нескольких макроэлементов отображаемый в окне "Свойства" список

значений будет сформирован с учетом значения флага PropertyParam:
summList " // TRUE " объединять списки, FALSE " пересекать списки. 

Работа с характерными точками

Интерфейс ILibHPObject1
Интерфейс для работы с характерными точками.
Иерархия:
IKompasAPIObject

ILibHPObject1
Описание:
Дополнительный интерфейс управления характерными точками библиотечного элемен"
та 2d. Является обработчиком событий, которые генерируются системой КОМПАС при
селектировании библиотечного элемента 2d.
Интерфейс должен быть реализован на стороне библиотеки разработчиком приложения
в том же классе, который реализует интерфейс ILibHPObject, если необходимо обеспе"
чить управление характерными точками библиотечного элемента.
Данный интерфейс можно получить у объекта ILibHPObject посредством вызова метода
IUnknown::QueryInterface (const GUID far& IID, void** pif).
Интерфейс позволяет выполнить следующие действия.

▼ Сформировать отображение характерных точек, задав идентификаторы битмапов.
▼ Задать тексты характерных точек в расширенном представлении.
▼ Изменить отображение характерной точки и текст у курсора при попадании указателя

мыши в габарит точки.
▼ Получить выпадающее меню, ассоциированное с данным библиотечным элементом или

с данной hot"точкой.
▼ Установить состояния команд из библиотечного меню.
▼ Отработать события селектирования\расселектирования характерных точек.

ILibHPObject1  методы

LibHotPnt_GetEx  Получить текущее описание 
характерной точки
Интерфейс...
Синтаксис COM:
BOOL LibHotPnt_GetEx(HotPointDescription1* point, int index);
Входной параметр:
4420



index " номер характерной точки.

Выходной параметр:

point " структура параметров характерной точки HotPointDescription1.

Возвращаемое значение:

TRUE " в случае удачного завершения.

Примечания:

1.  Метод вызывается в цикле для каждой точки (увеличивая номер точки), пока не вернет
FALSE.

2.  Значения координат характерной точки необходимо устанавливать в собственной систе"
ме координат объекта.

LibHotPnt_GetCursorTextEx  Задать текст для 
отображения рядом с курсором
Интерфейс...
Синтаксис COM:
LPOLESTR LibHotPnt_GetCursorTextEx(int index );
Входной параметр:

index " номер характерной точки.

Выходной параметр:

text " текст для отображения рядом с курсором.

Возвращаемое значение:

TRUE " в случае успешного завершения,
FALSE " в случае неудачи.

Примечание:

1.  Метод вызывается при попадании мыши в габарит hot point. При помощи метода можно
указать текст, который будет выдан рядом с курсором. Текст выдается для UNICODE вме"
сто ILibHPObject::LibHotPnt_GetCursorText. 

2.  С присланной строки снимается копия, сама исходная строка не удаляется.
4421



LibHotPnt_GetMenuEx  Получить popupменю, 
ассоциированное с данным библиотечным элементом и 
ассоциированное с данной hotточкой, если index > 1
Интерфейс...
Синтаксис COM:
int LibHotPnt_GetMenuEx( int index );
Входной параметр:

index " номер характерной точки.

Возвращаемое значение:

Идентификатор меню (HMENU) или 0, если меню " в случае успешного завершения,
не определено.
FALSE " в случае неудачи.

Примечание:

1. Метод будет вызван при нажатии правой кнопки мыши на выделенном библиотечном
элементе или его характерной точке.

2. Метод позволяет получить выпадающее меню, ассоциированное с данным библиотеч"
ным элементом, если index = "1 и ассоциированное с данной hot"точкой, если index > "1.

3. Присланное меню будет модифицировано в системе.
4. Идентификаторы команд должны быть уникальны на уровне приложения.
5. При модификации меню идентификаторы команд становятся уникальными на уровне

КОМПАС.
6. Меню будет добавлено в конец системного выпадающего меню для библиотечного эле"

мента.
7.  При выборе команды из меню будет вызван метод

ILibHPObject::LibHotPnt_ExecuteCommand.
8.  Метод является расширением возможностей метода ILibHPObject::LibHotPnt_GetMenu.
9.  Присланное меню будет уничтожено вызовом функции DestroyMenu().

LibHotPnt_Select  Выделить характерную точку
Интерфейс...
Синтаксис COM:
BOOL LibHotPnt_Select( int index );
Входной параметр:

index " номер характерной точки.

Возвращаемое значение:
4422



TRUE " в случае удачного завершения,
FALSE " в случае неудачи.

Примечание:
Выделение характерной точки происходит при нажатии левой кнопки мыши на характер"
ной точке. При этом генерируется событие.
Этот метод является обработчиком события выделения характерной точки библиотечно"
го элемента 2d.
Библиотека может изменить отображение библиотечного элемента или выполнить дру"
гие действия, связанные с этим событием.

LibHotPnt_Unselect  Отменить выделение характерной 
точки
Интерфейс...
Синтаксис COM:
BOOL LibHotPnt_Unselect( int index );
Входной параметр:

index " номер характерной точки.

Возвращаемое значение:

TRUE " в случае удачного завершения,
FALSE " в случае неудачи.

Примечание:
Метод вызывается при снятии выделения характерной точки. Метод является обработ"
чиком события снятия выделения (расселектирования) характерной точки библиотечно"
го элемента 2d. Это событие происходит при нажатии левой кнопки мыши вне выделен"
ной характерной точки или после окончания перетаскивания характерной точки с
нажатой левой кнопкой мыши.
Библиотека может изменить отображение библиотечного элемента или выполнить дру"
гие действия, связанные с этим событием.

LibHotPnt_UpdateCommand  Установить состояния 
команд из меню
Интерфейс...
Синтаксис COM:
BOOL LibHotPnt_UpdateCommand( int commandId );
Входной параметр:
4423



commandId " идентификатор команды.

Возвращаемое значение:

TRUE " команда доступна,
FALSE " команда недоступна.

Примечание:
Метод позволяет установить состояния команд из меню, присланного по
ILibHPObject::LibHotPnt_GetMenu или ILibHPObject1::LibHotPnt_GetMenuEx.

Интерфейс ILibHPObject
Интерфейс управления характерными точками библиотечного объекта 2D.
Иерархия:
IUnknown

ILibHPObject
ILibHPObject1

Описание.
Посредством вызова метода IUnknown::QueryInterface (const GUID far& IID, void** pif) у
данного интерфейса можно получить дополнительный интерфейс ILibHPObject1 " интер"
фейс для работы с характерными точками.
Интерфейс должен быть реализован на стороне библиотеки разработчиком приложе"
ния, если необходимо обеспечить управление характерными точками библиотечного
элемента 2D.
Режим поддержки интерфейса управления характерными точками включается в фун"
кции ksSetMacroParam.
Вызывается КОМПАС при селектировании библиотечного элемента 2d через функцию
LibObjInterfaceEntry.
Является обработчиком событий, генерирующихся КОМПАС при селектировании библи"
отечного элемента.
Интерфейс позволяет выполнить следующие действия.

▼ Сформировать отображение характерных точек, задав координаты характерных точек.
▼ Задать тексты характерных точек.
▼ Задав идентификаторы курсора, изменить отображение курсора и его текст при попада"

нии указателя мыши в габарит точки.
▼ Получить выпадающее меню, ассоциированное с данным библиотечным элементом.
▼ Отработать события начала смещения, смещения и конца смещения характерных точек.
▼ Выполнить команду библиотечного меню.

Интерфейс реализован еще до реализации механизма событий в КОМПАС API.
4424



Отличие состоит в том, что передача интерфейса КОМПАС осуществляется не через под"
писку а посредством предопределенной функции LibObjInterfaceEntry. Передача интер"
фейса КОМПАС может быть осуществлена из библиотеки, установленной в функции
ksSetMacroParam.

ILibHPObject методы

LibHotPnt_Complete  Завершить редактирование 
методом перетаскивания характерных точек
Интерфейс...
Синтаксис:
BOOL LibHotPnt_Complete(int index, BOOL success);
Входные параметры:

index " номер характерной точки,
success " признак завершения сдвига характерной точки:

TRUE " нормальное завершение,
FALSE " во время сдвига нажата <Esc>.

Возвращаемое значение:

TRUE " в случае удачного завершения.

Описание:
Этот метод позволяет отработать событие окончания перетаскивания характерной точки
c нажатой левой кнопкой мыши. 
Библиотека может изменить отображение библиотечного элемента или выполнить дру"
гие действия, связанные с этим событием.

LibHotPnt_ExecuteCommand  Выполнить команду из 
меню, присланного по LibHotPnt_GetMenu()
Интерфейс...
Синтаксис:
BOOL LibHotPnt_ExecuteCommand(int id);
Входной параметр:

id " идентификатор команды контекстного меню.

Возвращаемое значение:

TRUE " что"то изменилось и требуется передача в UNDO и 
пересчет положения характерных точек,

FALSE " команда не обработана.
4425



Описание:
Этот метод позволяет отработать событие выбора команды контекстного меню, полу"
ченного методами ILibHPObject::LibHotPnt_GetMenu и
ILibHPObject1::LibHotPnt_GetMenuEx, и выполнить команду с присланным идентифика"
тором.
Выбор команды контекстного меню осуществляется нажатием левой кнопки мыши в га"
барите команды меню.
Библиотека может изменить отображение библиотечного элемента или выполнить дру"
гие действия, связанные с этим событием.

LibHotPnt_Get  Установить текущее описание 
характерной точки
Интерфейс...
Синтаксис:
BOOL LibHotPnt_Get(HotPointDescription* point, int index);
Входной параметр:

index " номер характерной точки,

Выходной параметр:

point " структура параметров характерной точки HotPointDescription,

Возвращаемое значение:

TRUE " в случае удачного завершения.

Описание:
Метод позволяет задать отображение характерных точек, задав координаты характер"
ных точек, тексты характерных точек, идентификаторы курсора, благодаря чему, можно
изменить отображение курсора при попадании указателя мыши в габарит точки.
Примечания:

1.  Метод вызывается в цикле для каждой точки (увеличивая номер точки), пока не вернет
FALSE.

2.  Значения координат характерной точки необходимо устанавливать в системе координат
макроэлемента.
Координаты характерных точек определены в системе координат макроэлемента.
4426



LibHotPnt_GetCursorText  Задать текст для отображения 
рядом с курсором
Интерфейс...
Синтаксис:
BOOL LibHotPnt_GetCursorText(int index, 
char** text);
Входной параметр:

index " номер характерной точки.

Выходной параметр:

text " текст для отображения рядом с курсором.

Возвращаемое значение:

TRUE " в случае успешного завершения,
FALSE " в случае неудачи.

Примечание:

1.  При движении мыши над характерной точкой, можно задать текст у курсора. Метод вы"
зывается при попадании мыши в габарит hot point.

2.  С присланной строки снимается копия, сама исходная строка не удаляется.

LibHotPnt_GetMenu  Задать контекстное меню, 
ассоциированное с данным библиотечным элементом
Интерфейс...
Синтаксис:
int LibHotPnt_GetMenu();
Возвращаемое значение:

контекстное меню (HMENU).

Описание:
Метод вызовется при нажатии правой кнопки мыши на селектированном библиотечном
элементе. Метод позволяет получить выпадающее меню, ассоциированное с данным би"
блиотечным элементом. Присланное меню будет модифицировано в системе.
Идентификаторы команд должны быть уникальны на уровне приложения.
При модификации меню идентификаторы команд становятся уникальными на уровне
КОМПАС. Меню будет добавлено в конец системного выпадающего меню для библио"
течного элемента.
4427



1.
При выборе команды из меню будет вызван метод
ILibHPObject::LibHotPnt_ExecuteCommand.
Присланное меню будет уничтожено вызовом функции DestroyMenu().

LibHotPnt_GetMenuEx  Получить popupменю, 
ассоциированное с данным библиотечным элементом и 
с данной hotточкой, если index > 1
Интерфейс...
Синтаксис COM:
BOOL LibHotPnt_ViewData( HotPointDescription1 * point, int index );
Входной параметр:

index " номер характерной точки.

Выходной параметр:

point " указатель структуры параметров характерной точки HotPointDescription

Возвращаемое значение:

TRUE " в случае успешного завершения,
FALSE " в случае неудачи.

Примечание:

1.  При движении мыши над характерной точкой можно задать новое изображение (под"
светку) точки и выдать текст у курсора.

2.  Метод вызывается при попадании мыши в габарит hot point.
3.  При помощи метода можно указать текст, который будет выдан рядом с курсором. Текст

выдается для UNICODE вместо ILibHPObject::LibHotPnt_GetCursorText.
4.  С присланной строки снимается копия, сама исходная строка не удаляется.
5.  Идентификатор нового битмапа характерной точки. Если идентификатор битмапа 0,

битмап не меняется.

LibHotPnt_Prepare  Подготовиться к редактированию 
методом перетаскивания характерных точек
Интерфейс...
Синтаксис:
BOOL LibHotPnt_Prepare(int index);
Входной параметр:
4428



index " номер характерной точки.

Возвращаемое значение:

TRUE " в случае удачного завершения.

Описание:
Этот метод позволяет отработать событие начала перетаскивания характерной точки c
нажатой левой кнопкой мыши.
Библиотека может изменить отображение библиотечного элемента или выполнить дру"
гие действия, связанные с этим событием.

LibHotPnt_Set  Получить положение характерной точки
Интерфейс...
Синтаксис:
BOOL LibHotPnt_Set(HotPointDescription* point, int index );
Входные параметры:

index " номер характерной точки,
point " структура параметров характерной точки HotPointDescription.

Возвращаемое значение:

TRUE " в случае удачного завершения.

Описание:
При перетаскивании характерной точки библиотечного элемента 2D c нажатой левой
кнопкой мыши генерируется событие.
Этот метод позволяет отработать событие изменения положения характерной точки. Би"
блиотека может изменить отображение библиотечного элемента или выполнить другие
действия, связанные с этим событием.
Примечания:

1.  Актуальны только координаты (x, y), остальные поля должны игнорироваться.
2.  Значения координат приходят в собственной системе координат объекта.

LibHotPnt_ViewData  Получить описание характерной 
точки при попадании указателя мыши в габарит точки
Интерфейс...
Синтаксис COM:
BOOL LibHotPnt_ViewData( HotPointDescription1 * point, int index );
4429



Входной параметр:

index " номер характерной точки.

Выходной параметр:

point " указатель структуры параметров характерной точки HotPointDescription1.

Возвращаемое значение:

TRUE " в случае успешного завершения,
FALSE " в случае неудачи.

Примечание:

1.  При движении мыши над характерной точкой можно задать новое изображение (под"
светку) точки и выдать текст у курсора.

2.  Метод вызывается при попадании мыши в габарит hot point.
3.  При помощи метода можно указать текст, который будет выдан рядом с курсором.
4. Текст выдается для UNICODE вместо ILibHPObject::LibHotPnt_GetCursorText
5. С присланной строки снимается копия, сама исходная строка не удаляется.
6. Идентификатор нового битмапа характерной точки. Если идентификатор битмапа 0, бит"

мап не меняется.

Матрицы преобразования
Функции данного радела обеспечивают трансформацию объектов с использованием ма"
триц преобразования координат.

DeleteMtr Отменить матрицу преобразования 
координат
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksDeleteMtr.
Синтаксис:
int DeleteMtr (void);
Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Описание:
4430



Отменяет режим преобразования координат, линейных и угловых параметров, введен"
ный функцией Mtr.

ksMtr  Создать матрицу преобразования координат
Пример...
Аналог данной функции при использовании Automation " метод ksDocument2D::ksMtr.
Синтаксис:
int ksMtr (double x, double y,
double angle,
double scaleX,
double scaleY);
Входные параметры:

x, y " координаты начала локальной системы координат,
angle " угол наклона системы координат в градусах,
scaleX " масштаб локальной системы координат по оси Х,
scaleY " масштаб локальной системы координат по оси Y.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Допускается вложение матриц трансформации. В результате вложения действует сум"
марная матрица, полученная произведением накопленных матриц.

2.  Объекты вида, вводимые между операторами ksMtr и DeleteMtr, подвергаются преобра"
зованию по суммарной матрице.

Mtr  Создать матрицу преобразования координат
Пример...
Синтаксис:
int Mtr (double x, double y, 
double ang, 
double scale);
Входные параметры:

x, y " координаты начала локальной системы координат,
ang " угол наклона системы координат в градусах,
scale " коэффициент масштабирования.

Возвращаемое значение:
4431



1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Введенный режим преобразования отменяется функцией DeleteMtr.

MtrForIGES  Создать матрицу преобразования 
координат 
Пример...
Синтаксис:
int MtrForIGES (double rotateMtr[2][2], 
double moveArr[2]);
Входные параметры:

rotateMtr " матрица поворота,
moveArr " вектор сдвига.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Все объекты вида, вводимые между операторами MtrForIGES и DeleteMtr, подвергаются
трансформации по суммарной матрице.

Проверка условий 
IsGeomObject  Проверить геометрический объект или 
нет
Пример...
Синтаксис:
int IsGeomObject (reference obj);
Входные параметры:

obj " указатель на объект.

Возвращаемое значение:

1 " объект геометрический,
0 " объект не геометрический.
4432



IsObjFromAssociativeView  Проверить, принадлежит ли 
объект ассоциативному виду
Пример...
Синтаксис:
int IsObjFromAssociativeView (reference obj);
Входные параметры:

obj " указатель на объект.

Возвращаемое значение:

1 " объект принадлежит ассоциативному виду,
0 " объект не принадлежит ассоциативному виду,

IsVisibleOrHiddenArraysInObject Проверить наличие 
видимых или невидимых участков на кривой
Синтаксис:
int IsVisibleOrHiddenArraysInObject (reference obj);
Входные параметры:

obj " указатель на объект кривой.

Возвращаемое значение:

1 " кривая содержит видимые и невидимых участки,
0 " кривая не содержит видимые и невидимых участки или

в случае ошибки.

Примечание:
Объект может состоять из видимых и невидимых участков, если он принадлежит ассо"
циативному виду.

Простановка текстовых надписей
Функции работы с текстовыми надписями и 
таблицами 
Функции данного раздела обеспечивают построение и обработку текстовых надписей
(простых, сложноструктурированных, форматированных).

GetTextLength  Получить длину текста
Пример...
4433



Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetTextLength.
Синтаксис:
double GetTextLength (char * text, unsigned short style);
Входные параметры:

style " стиль текста.

Системные стили текстов...
Входные параметры:

text " указатель на строку текста.

Возвращаемое значение:

вычисленное значение длины текста (в миллиметрах).

Примечание:

1.  Функция может принимать строку в синтаксисе версии КОМПАС 4 (спецзнаки, дроби,
отклонения).

2.  При использовании Unicode следует использовать функцию GetTextLengthW.

GetTextLengthW  Получить длину текста (Unicode)
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetTextLength.
Синтаксис:
double LIB_FUNC GetTextLengthW (LPWSTR text, unsigned short style);
Входные параметры:

style " стиль текста.

Системные стили текстов...
Входные параметры:

text " указатель на строку текста.

Возвращаемое значение:

вычисленное значение длины текста (в миллиметрах).

Примечание:
4434



1.  Функция может принимать строку в синтаксисе версии КОМПАС 4 (спецзнаки, дроби,
отклонения).

2.  При использовании ANSI следует использовать функцию GetTextLength.

GetTextLengthFromReference  Получить длину текста, 
заданного указателем
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetTextLengthFromReference.
Синтаксис:
double GetTextLengthFromReference (reference pText);
Входной параметр:

pText " указатель на текст.

Возвращаемое значение:

вычисленное значение длины текста (в миллиметрах).

Примечание:
Функция может принимать строку в синтаксисе версии КОМПАС 4 (спецзнаки, дроби, от"
клонения).

ksConvertTextToCurve  Преобразовать указанный текст 
в кривые
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksConvertTextToCurve.
Синтаксис:
reference ksConvertTextToCurve (reference pText);
Входной параметр:

pText " указатель на текст.

Возвращаемое значение:

указатель на временную группу кривых " в случае удачного завершения,
0 " в случае неудачи.
4435



ksEditTextLine  Вызвать диалог редактирования 
сложноструктурированного текста
Аналог данной функции при использовании Automation " метод
KompasObject::ksEditTextLine.
Синтаксис:
int ksEditTextLine (void *HWindow,
char *str,
int sizeStr);
Входные параметры:

HWindow " HWND окна,
sizeStr " размер строки str.

Выходной параметр:

str " строка текста.

Возвращаемое значение:

1 " выход из диалога по кнопке OK,
0 " выход из диалога по кнопке Отмена.

Примечание.
При использовании Unicode следует использовать функцию ksEditTextLineW.

ksEditTextLineW  Вызвать диалог редактирования 
сложноструктурированного текста (Unicode)
Аналог данной функции при использовании Automation " метод
KompasObject::ksEditTextLine.
Синтаксис:
int LIB_FUNC ksEditTextLine (void *HWindow,
LPWSTRstr,
int sizeStr);
Входные параметры:

HWindow " HWND окна,
sizeStr " размер строки str.

Выходной параметр:

str " строка текста.

Возвращаемое значение:
4436



1 " выход из диалога по кнопке OK,
0 " выход из диалога по кнопке Отмена.

Примечание.
При использовании ANSI следует использовать функцию ksEditTextLine.

ksGetTextAlign  Получить тип привязки текста
Пример...

Справка системы КОМПАС...
kompas.chm::/528_65_5_1_Izmenenie_parametrov.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetTextAlign.
Синтаксис:
int ksGetTextAlign (reference pText);
Входной параметр:

pText " указатель на объект "текст".

Возвращаемое значение:

тип привязки текста " в случае успешного завершения,
"1 " в случае неудачи.

Типы привязки текста...

ksSetTableColumnText  Задать текст ячейки таблицы
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksSetTableColumnText.
Синтаксис:
int ksSetTableColumnText (unsigned int numb, TextParam *par);
Входные параметры:

numb " номер ячейки,

Выходные параметры:

par " указатель на структуру параметров строки текста TextParam.
4437



Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Функция используется в режиме редактирования таблицы:
ksOpenTable ();
ksSetTableColumnText ();
EndObj ();

ksSetTextAlign  Установить тип привязки текста
Пример...

Справка системы КОМПАС...
kompas.chm::/528_65_5_1_Izmenenie_parametrov.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksSetTextAlign.
Синтаксис:
int ksSetTextAlign (reference pText, unsigned int align);
Входные параметры:

pText " указатель на объект "текст",
align " тип привязки текста.

Типы привязки текста...
Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

ksSetTextLineAlign  Установить выравнивание текста
Пример...

Справка системы КОМПАС...
kompas.chm::/528_65_5_1_Izmenenie_parametrov.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksSetTextLineAlign.
Синтаксис:
int ksSetTextLineAlign (unsigned char align);
Входной параметр:
4438



align " признак выравнивания:
0 " по левому краю,
1 " по центру,
2 " по правому краю,
3 " по ширине.

Возвращаемое значение:

предыдущий признак выравнивания " в случае успешного завершения,
"1 " в случае неудачи.

Примечание.
Функция ksSetTextLineAlign должна использоваться внутри блока, т.е. необходимо, что"
бы был открытый на редактирование текст. Иначе функция не работает.

Paragraph  Начать параграф
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksParagraph.
Синтаксис:
int Paragraph (ParagraphParam *par);
Выходной параметр:

par " указатель на структуру параметров параграфа
ParagraphParam.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Описание:

1.  Параграфом называется автоматически форматируемый блок текста (левосторонний,
правосторонний, центрированный, по двум сторонам).

2.  При работе в текстовом процессоре он завершается символом <ENTER>. Описание па"
раграфа заканчивается функцией EndObj, возвращающей указатель на созданный объ"
ект.

Text  Создать строку текста в графическом документе
Пример...
4439



Справка системы КОМПАС...
kompas.chm::/562_Glava67_Tekst_v_grafichesko.htm
Аналог данной функции при использовании Automation " метод ksDocument2D::ksText.
Синтаксис:
reference Text (double x, 
double y,
double ang, 
double hStr, 
double ksuStr,
unsigned int bitVector,
char *s);
Входные параметры:

x, y " координаты точки привязки текста,
ang " угол наклона текста,
hStr " высота символов,
ksuStr " сужение текста,
bitVector " битовый вектор, задающий признаки начертания текста,
s " строка символов.

Признаки начертания текста...
Возвращаемое значение:

указатель на текст " в случае удачного завершения,
0 " в случае неудачи.

Примечание:

1.  Строка символов может включать спецсимвол. Например, чтобы задать 10 градусов, не"
обходимо указать значение "10&01". Таблица спецсимволов размещена в файле
SDK\NumbSymb.frw.

2.  Не рекомендуется использовать в строке символы, которые могут идентифицироваться
как управляющие символы: @ $ & ; ~ ^ #, кроме случаев, когда эти символы использу"
ются в строке именно как управляющие.

3.  Использование управляющих символов:
▼ отклонение: $ верхнее отклонение; нижнее отклонение $
▼ дробь: $d числитель ; знаменатель $
▼ спецсимвол: &nn номер спецсимвола 0...99.
4.  bitVector формируется с помощью логической операции |. Поддерживаются определе"

ния:
▼ ITALIC_ON (включить наклон),
▼ BOLD_ON (включить утолщение),
▼ UNDERLINE_ON (включить подчеркивание). См. ltdefine.h.
5.  При использовании Unicode следует использовать функцию TextW.
4440



6.  При использовании внутри таблицы функция Text не возвращает указатель на текст—
в случае успешного завершения возвращается 1.

TextW  Создать строку текста в графическом документе 
(Unicode)
Справка системы КОМПАС...
kompas.chm::/562_Glava67_Tekst_v_grafichesko.htm
Аналог данной функции при использовании Automation " метод ksDocument2D::ksText.
Синтаксис:
reference TextW (double x, 
double y,
double ang, 
double hStr, 
double ksuStr,
unsigned int bitVector,
LPWSTR s);
Входные параметры:

x, y " координаты точки привязки текста,
ang " угол наклона текста,
hStr " высота символов,
ksuStr " сужение текста,
bitVector " битовый вектор, задающий признаки начертания текста,
s " строка символов.

Признаки начертания текста...
Возвращаемое значение:

указатель на текст " в случае удачного завершения,
0 " в случае неудачи.

Примечание:

1.  Строка символов может включать спецсимвол. Например, чтобы задать 10 градусов, не"
обходимо указать значение "10&01". Таблица спецсимволов размещена в файле
SDK\NumbSymb.frw.

2.  Не рекомендуется использовать в строке символы, которые могут идентифицироваться
как управляющие символы: @ $ & ; ~ ^ #, кроме случаев, когда эти символы использу"
ются в строке именно как управляющие."

3.  Использование управляющих символов:
▼ отклонение: $ верхнее отклонение ; нижнее отклонение $
▼ дробь: $d числитель ; знаменатель $
▼ спецсимвол: &nn номер спецсимвола 0...99.
4441



4.  bitVector формируется с помощью логической операции |. Поддерживаются определе"
ния:

▼ ITALIC_ON ( включить наклон ),
▼ BOLD_ON (включить утолщение),
▼ UNDERLINE_ON (включить подчеркивание). См. ltdefine.h.
5.  При использовании ANSI следует использовать функцию Text.
6.  При использовании внутри таблицы функция TextW не возвращает указатель на текст —

в случае успешного завершения возвращается 1.

TextLine  Задать подстроку параграфа текста
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksTextLine.
Синтаксис:
int TextLine (unsigned int bitVector, int type, void *value, char * s);
Входной параметр:

bitVector " значения свойств, устанавливаемые двоичными флагами,
type " тип свойства.

Выходной параметр:

value " указатель на значение свойства,
s " создаваемый компонент текста.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Функция предназначена для задания сложноструктурированного текста, отдельные
компоненты которого имеют различные параметры.

2.  Спецзнак задается отдельной компонентой. Таблица спецсимволов размещена в файле
SDK\NumbSymb.frw.

3.  Не рекомендуется использовать в строке символы, которые могут идентифицироваться
как управляющие символы: @ $ & ; ~ ^ # кроме случаев, когда эти символы используют"
ся в строке именно как управляющие."

4.  Использование управляющих символов:
▼ отклонение: $ верхнее отклонение ; нижнее отклонение $
▼ дробь: $d числитель ; знаменатель $
▼ спецсимвол: &nnn номер спецсимвола 
4442



5.  bitVector формируется с помощью логической операции | из набора определений
[INVARIABLE ...NEW_LINE] (см. ltdefine.h).

6.  При использовании Unicode следует использовать функцию TextLineW.

TextLineW  Задать подстроку параграфа текста 
(Unicode)
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksTextLine.
Синтаксис:
int TextLineW (unsigned int bitVector, int type, void *value, LPWSTR s);
Входной параметр:

bitVector " значения свойств, устанавливаемые двоичными флагами,
type " тип свойства.

Выходной параметр:

value " указатель на значение свойства,
s " создаваемый компонент текста.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Функция предназначена для задания сложноструктурированного текста, отдельные
компоненты которого имеют различные параметры.

2.  Спецзнак задается отдельной компонентой. Таблица спецсимволов размещена в файле
SDK\NumbSymb.frw.

3.  Не рекомендуется использовать в строке символы, которые могут идентифицироваться
как управляющие символы: @ $ & ; ~ ^ #, кроме случаев, когда эти символы использу"
ются в строке именно как управляющие."

4.  Использование управляющих символов:
▼ отклонение: $ верхнее отклонение ; нижнее отклонение $
▼ дробь: $d числитель ; знаменатель $
▼ спецсимвол: &nnn номер спецсимвола 
5.  bitVector формируется с помощью логической операции | из набора определений

[INVARIABLE ...NEW_LINE] (см. ltdefine.h).
6.  При использовании ANSI следует использовать функцию TextLine.
4443



Работа с таблицей 
Функции данного раздела обеспечивают оформление таблиц.

ksClearTableColumnText  Очистить ячейку таблицы 
или допуска формы
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksClearTableColumnText.
Синтаксис:
int ksClearTableColumnText (unsigned int numb);
Входной параметр:

numb " номер ячейки,

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Если numb = 0, очищается вся таблица.
2.  Нумерация ячеек начинается с 1.
3.  Функция используется в режиме редактирования таблицы или допуска формы.

ksCombineTwoTableItems  Объединить две ячейки 
таблицы, если они имеют общее ребро 
Пример...

Справка системы КОМПАС...
kompas.chm::/584_69_1_3_Obwedinenie_jacheek.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksCombineTwoTableItems.
Синтаксис:
int ksCombineTwoTableItems (unsigned int index1, unsigned int index2);
Входные параметры:

index1 " номер первой ячейки,
index2 " номер второй ячейки.

Возвращаемое значение:

1 " в случае успешного завершения,
4444



0 " в случае неудачи.
Примечание:

1.  Нумерация ячеек начинается с 1.
2.  Функция используется в режиме редактирования таблицы или допуска формы.

ksDivideTableItem  Разделить ячейку таблицы
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksDivideTableItem.
Синтаксис:
int ksDivideTableItem (unsigned int index, unsigned char vertical, unsigned short style);
Входные параметры:

index " номер ячейки,
vertical " направление разделения ячейки:

1 " вертикально, 
0 " горизонтально,

style " стиль линии получившейся границы:
0 " невидимая, 
1 " основная, 
2 " тонкая, 
7 " утолщенная.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Нумерация ячеек начинается с 1. 
2.  Функция используется в режиме редактирования таблицы или допуска формы.

ksGetPointOnToleranceTable  Получить координаты 
точки на таблице допуска формы 
Пример,,,
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetPointOnToleranceTable.
Синтаксис:
int ksGetPointOnToleranceTable (reference tolerance, unsigned char entry, MathPointParam *
point);
4445



Входные параметры:

tolerance " указатель на допуск формы,
entry " положение базовой точки.

Выходной параметр:

point " указатель на структуру параметров математической точки MathPointParam.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

ksGetTableBorderStyle  Получить стиль границы 
ячейки
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/587_69_1_7_Granicy_jacheek.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetTableBorderStyle.
Синтаксис:
int ksGetTableBorderStyle (unsigned int index, unsigned char typeBorder);
Входные параметры:

index " номер ячейки,
typeBorder " тип границы:

0 " левая, 
1 " правая, 
2 " верхняя, 
3 " нижняя.

Возвращаемое значение:

" стиль линии границы: " в случае успешного завершения,
0 " невидимая, 
1 " основная, 
2 " тонкая, 
7 " утолщенная.
"1 " в случае неудачи.

Примечание:
4446



1.  Нумерация ячеек начинается с 1.
2.  Функция используется в режиме редактирования таблицы или допуска формы.

ksGetTableColumnText  Получить текст ячейки 
 Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetTableColumnText.
Синтаксис:
int ksGetTableColumnText (unsigned int *numb, TextParam *par);
Выходные параметры:

numb " номер ячейки,
par " указатель на структуру параметров текста

TextParam.

Возвращаемое значение:

указатель на динамический массив строк текста " " в случае успешного 
TEXT_LINE_ARR завершения,
0 " все графы пройдены,
номер графы " в случае ошибки.

Примечание:

1.  Функция используется в режиме редактирования таблицы.
2.  Нумерация ячеек начинается с единицы.
3.  Если не определен номер ячейки с помощью функции ColumnNumber, функция начина"

ет работу с первой ячейки. 
4.  После выполнения метода происходит смещение на следующую ячейку.

ksGetTableItemsCount  Получить количество ячеек в 
таблице
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetTableItemsCount.
Синтаксис:
int ksGetTableItemsCount (unsigned char type);
Входной параметр:
4447



type " признак, какое число требуется получить:
0 " общее число ячеек, 
1 " число ячеек в строке, 
2 " число ячеек в колонке.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Функция используется в режиме редактирования таблицы или допуска формы.

ksGetToleranceColumnText  Получить текст ячейки
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetToleranceColumnText.
Синтаксис:
int ksGetToleranceColumnText (unsigned int *numb, TextLineParam *par);
Выходные параметры:

numb " номер ячейки,
par " указатель на структуру параметров строки текста TextLineParam.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Функция используется в режиме редактирования допуска формы.
2.  Нумерация ячеек начинается с единицы.
3.  Если не определен номер ячейки с помощью функции ColumnNumber, функция начина"

ет работу с первой ячейки.
4.  После выполнения функции происходит смещение на следующую ячейку.
5.  Если par=0, все графы пройдены.
6.  После использования массив par">pTextItem желательно удалить.
7. Если numb = NULL, функция возвращает номер графы.
4448



ksOpenTable  Oткрыть составной объекттаблицу 
для редактирования
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksOpenTable.
Синтаксис:
int ksOpenTable (reference table);
Входной параметр:

table " указатель на таблицу.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Чтобы закрыть редактирование таблицы, нужно вызвать функцию EndObj.

ksOpenTolerance  Открыть допуск формы для 
редактирования
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksOpenTolerance.
Синтаксис:
int ksOpenTolerance (reference tolerance);
Входной параметр:

tolerance " указатель на допуск формы.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Чтобы завершить редактирование допуска формы, нужно вызвать функцию EndObj.

ksReadTableFromFile  Создать таблицу, используя 
файл таблицы *.tbl
Пример...
4449



Справка системы КОМПАС...
KOMPAS.chm::/DLG_GENERATE_TBL.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksReadTableFromFile.
Синтаксис:
reference ksReadTableFromFile (char * tblFileName); 
Выходной параметр:

tblFileName " полное имя файла таблицы.

Возвращаемое значение:

указатель на таблицу " в случае удачного завершения,
0 " в случае неудачи.

Примечание.
При использовании Unicode следует использовать функцию ksReadTableFromFileW.

ksReadTableFromFileW  Создать таблицу, используя 
файл таблицы *.tbl (Unicode)
Справка системы КОМПАС...
KOMPAS.chm::/DLG_GENERATE_TBL.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksReadTableFromFile.
Синтаксис:
reference LIB_FUNC ksReadTableFromFile (LPWSTR tblFileName); 
Выходной параметр:

tblFileName " полное имя файла таблицы.

Возвращаемое значение:

указатель на таблицу " в случае удачного завершения,
0 " в случае неудачи.

Примечание.
При использовании ANSI следует использовать функцию ksReadTableFromFile.

ksRebuildTableVirtualGrid  Перестроить 
виртуальную сетку таблицы
Пример...
4450



Аналог данной функции при использовании Automation " метод
ksDocument2D::ksRebuildTableVirtualGrid.
Синтаксис:
int ksRebuildTableVirtualGrid();
Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Функция используется в режиме редактирования таблицы или допуска формы. Таблица
работает с виртуальной сеткой " регулярная таблица, наложенная на редактируемую та"
блицу, отображающая все ячейки. Если редактируемая таблица регулярная, то ее вирту"
альная сетка полностью совпадает с таблицей.

2.  Нумерация ячеек начинается с левого верхнего угла и с единицы по строкам.
3.  Перестраивать сетку нужно после объединения или разделения ячеек.

ksSetTableBorderStyle  Изменить стиль границы 
ячейки 
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/587_69_1_7_Granicy_jacheek.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksSetTableBorderStyle.
Синтаксис:
int ksSetTableBorderStyle (unsigned int index, unsigned char typeBorder, unsigned short
style);
Входные параметры:

index " номер ячейки,
typeBorder " тип границы:

0 " левая, 
1 " правая, 
2 " верхняя, 
3 " нижняя,

style " стиль линии границы:
0 " невидимая, 
1 " основная, 
2 " тонкая, 
7 " утолщенная.
4451



Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Нумерация ячеек начинается с 1.
2.  Функция используется в режиме редактирования таблицы или допуска формы.

ksSetToleranceColumnText  Задать текст ячейки 
допуска формы
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksSetToleranceColumnText.
Синтаксис:
int ksSetToleranceColumnText (unsigned int numb, TextLineParam *par);
Входные параметры:

numb " номер ячейки,

Выходные параметры:

par " указатель на структуру параметров строки текста TextLineParam.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Функция используется в режиме редактирования допуска формы.

Table  Создать таблицу в графическом документе
Пример...

Справка системы КОМПАС...
kompas.chm::/582_Glava69_Obshchie_svedenija.htm
Аналог данной функции при использовании Automation " метод ksDocument2D::ksTable.
Синтаксис:
reference Table (void);
Возвращаемое значение:
4452



указатель на таблицу " в случае удачного завершения,
0 " в случае неудачи.

Примечание:

1.  После вызова функции и далее до вызова функции EndObj объекты чертежа (включая
вертикальные и горизонтальные отрезки и тексты) будут объединены в таблицу.

2.  Таблица может быть регулярной и нерегулярной.
3.  Допустимые стили линии для отрезков таблицы: 

▼ 1 " основная, 
▼ 2 " тонкая, 
▼ 7 " утолщенная, 
▼ 0 " невидимая.

Оформление чертежа 
Функции оформления чертежа
Функции данного радела обеспечивают общую работу с документами (открытие, закры"
тие, запись документа), работу с видами а также общее оформление и компоновку до"
кумента " задание технических требований, основной надписи штампа, использование
типовых шаблонов.

ClearStamp  Очистить графу штампа чертежа/
текстового документа
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/574_68_2_Osnovnaja_nadpisq_i_fo.htm
Аналог данной функции при использовании Automation " метод ksStamp::ksClearStamp.
Синтаксис:
int ClearStamp (unsigned int numb);
Входной параметр:

numb " номер очищаемой ячейки основной надписи
(0 " очищается вся основная надпись).

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
4453



1.  Метод действителен для чертежа и спецификации.
2.  Функция устарела, рекомендуется вместо нее использовать функцию ClearStampEx.

ClearStampEx  Очистить графу штампа чертежа/
текстового документа по номеру листа
Справка системы КОМПАС...
KOMPAS.chm::/574_68_2_Osnovnaja_nadpisq_i_fo.htm
Синтаксис:
int ClearStampEx (int sheetNumb, unsigned int numb);
Входной параметр:

sheetNumb " номер листа, начиная с 1,
numb " номер очищаемой ячейки основной над"

писи
(0 " очищается вся основная надпись).

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Метод действителен для чертежа и спецификации.

CloseStamp  Закрыть штамп чертежа/текстового 
документа
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/574_68_2_Osnovnaja_nadpisq_i_fo.htm
Аналог данной функции при использовании Automation " метод ksStamp::ksCloseStamp.
Синтаксис:
reference CloseStamp();
Возвращаемое значение:

указатель на штамп " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Метод действителен для чертежа и спецификации.
4454



ColumnNumber  Определить номер графы штампа 
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/574_68_2_Osnovnaja_nadpisq_i_fo.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksColumnNumber.
Синтаксис:
int ColumnNumber (unsigned int numb);
Входной параметр:

numb " номер ячейки.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Функция используется в режиме редактирования штампа, таблицы, допуска формы, в
режиме создания допуска формы.

GetStampColumnText  Получить текст графы штампа
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/574_68_2_Osnovnaja_nadpisq_i_fo.htm
Аналог данной функции при использовании Automation " метод
ksStamp::ksGetStampColumnText.
Синтаксис:
reference GetStampColumnText (unsigned int *numb);
Выходной параметр:

numb " номер ячейки основной надписи.

Возвращаемое значение:

указатель на динамический массив строк " в случае успеха,
текста " TEXT_LINE_ARR и номер графы (если 
numb!= NULL).. 
0 " когда все графы пройдены или в 

случае ошибки.
4455



Примечание:

1.  Функция используется в режиме редактирования штампа.
2.  Функция выдает текст графы с указанным номером и смещается на следующую графу.

Если не определен номер графы с помощью функции ColumnNumber или при предыду"
щем вызове самой этой функции, начинает с первой графы.

3.  После использования полученный массив желательно удалить.

GetReferenceDocumentPart  Получить указатель на 
основную надпись, или технические требования, или 
неуказанную шероховатость, или текущий вид, или 
спецификацию на листе 
Пример...

 Справка системы КОМПАС...
KOMPAS.chm::/574_68_2_Osnovnaja_nadpisq_i_fo.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetReferenceDocumentPart.
Синтаксис:
reference GetReferenceDocumentPart (unsigned char t);
Входной параметр:

t " Тип объекта оформления чертежа.

Возвращаемое значение:

указатель на объект выбранного типа " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
Метод предназначен для использования в листе чертежа.

GetReferenceDocumentPartEx  Получить указатель на 
объект оформления чертежа
Справка системы КОМПАС...
KOMPAS.chm::/574_68_2_Osnovnaja_nadpisq_i_fo.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetReferenceDocumentPartEx.
Синтаксис:
reference GetReferenceDocumentPartEx (unsigned char t, int sheetNumb);
Входные параметры:
4456



t " Тип объекта оформления чертежа.
sheetNumb " зависит от типа получаемого объекта оформле"

ния чертежа:
для t=0 sheetNumb " номер листа, начиная с 1, 
для t=1 sheetNumb не используется,
для t=2 sheetNumb не используется,
для t=3 sheetNumb не используется,
для t=4 sheetNumb " номер спецификации, начи"
ная с 1; 0 " текущая спецификация,
для t=5 sheetNumb не используется,
для t=6 sheetNumb " номер листа, начиная с 1. 

Возвращаемое значение:

указатель на объект выбранного типа " в случае удачного завершения,
0 " в случае неудачи.

ksGetZona  Получить зону текущего чертежа по 
заданной точке
Пример...

Справка системы КОМПАС: определение зоны источника...
KOMPAS.chm::/568_67_3_1_Sozdanie.htm

Разбиение на зоны...
KOMPAS.chm::/DLG_ZONE_SETUP.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetZona.
Синтаксис:
int ksGetZona (double x,
double y,
char * zona,
int size);
Входные параметры:

x, y " координаты точки в текущем документе.
size " размер буфера.

Выходной параметр:

zona " буфер для возврата зоны,

Возвращаемое значение:
4457



1 " успешное завершение,
0 " ошибка (например, точка вне документа или документ " не чертеж),
"1 " в текущем документе нет разбиения на зоны.

Примечание.
При использовании Unicode следует использовать функцию ksGetZonaW.

ksGetZonaW  Получить зону текущего чертежа по 
заданной точке (Unicode)
Справка системы КОМПАС: определение зоны источника...
KOMPAS.chm::/568_67_3_1_Sozdanie.htm

Разбиение на зоны...
KOMPAS.chm::/DLG_ZONE_SETUP.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetZona.
Синтаксис:
int LIB_FUNC ksGetZonaW (double x,
double y,
LPWSTR zona,
int size);
Входные параметры:

x, y " координаты точки в текущем документе,
size " размер буфера.

Выходной параметр:

zona " буфер для возврата зоны.

Возвращаемое значение:

1 " успешное завершение,
0 " ошибка (например, точка вне документа или документ " не чертеж),
"1 " в текущем документе нет разбиения на зоны.

Примечание.
При использовании ANSI следует использовать функцию ksGetZona.
4458



ksRebuildDocument  Перестроить графический 
документ
Справка системы КОМПАС...
KOMPAS.chm::/CM_REBUILD_SHEET.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksRebuildDocument.
Синтаксис:
int ksRebuildDocument (reference sheet);
Входные параметры:

sheet " указатель на графический документ.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Позволяет перестроить все ассоциативные виды чертежа. Если в чертеже нет ни одного
ассоциативного вида, перестраиваться ничего не будет. После вызова функции ассоци"
ативные виды перерисовываются в соответствии с деталями, изображение которых в
них содержится.

2.  Если sheet = 0, перестраивается текущий документ.

OpenStamp  Открыть штамп чертежа/текстового 
документа
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/574_68_2_Osnovnaja_nadpisq_i_fo.htm
Аналог данной функции при использовании Automation " метод ksStamp::ksOpenStamp.
Синтаксис:
int OpenStamp();
Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
4459



1.  Следующие далее функции до вызова CloseStamp определяют текст граф основной над"
писи штампа.

2.  Функция устарела, рекомендуется вместо нее использовать функцию OpenStampEx.

OpenStampEx  Открыть составной объект "штамп" по 
номеру листа
Справка системы КОМПАС...
KOMPAS.chm::/574_68_2_Osnovnaja_nadpisq_i_fo.htm
Синтаксис:
int OpenStampEx (int sheetNumb);
Входные параметры:

sheetNumb " номер листа, начиная с 1.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Операторы ColumnNumber и TextLine, вводимые между операторами OpenStampEx и
CloseStamp, принадлежат штампу листа с номером sheetNumb.

2.  ColumnNumber определяет номер ячейки, куда помещать текcт.
3.  Номера определены в соответствии с ГОСТ на данный штамп.
4.  CloseStamp возвращает указатель на штамп.

SetStampColumnText  Задать текст графы штампа
Пример...
Аналог данной функции при использовании Automation " метод
ksStamp::ksSetStampColumnText.
Синтаксис:
int SetStampColumnText (unsigned int numb,
reference textArr);
Входные параметры:

numb " номер ячейки основной надписи,
textArr " указатель на динамический массив строк

текста " TEXT_LINE_ARR.

Возвращаемое значение:
4460



1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Метод используется в режиме редактирования штампа.

Работа со слоями
Функции работы со слоями 
Функции данного радела обеспечивают работу со слоями вида или фрагмента чертежа
(создание и обработка слоя, слияние слоев и редактирование их параметров).

ChangeObjectLayer  Изменить слой объекта
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksChangeObjectLayer.
Синтаксис:
int ChangeObjectLayer (reference obj, int number);
Входные параметры:

obj " указатель на объект,
number " номер слоя, на который переносится объект.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
Слой, на который переносится объект, должен существовать и быть доступным для ре"
дактирования (не фоновым и не выключенным).

GetLayerNumber  Получить номер слоя
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetLayerNumber.
Синтаксис:
int GetLayerNumber (reference p);
Входной параметр:
4461



p " указатель на слой.

Возвращаемое значение:

номер слоя " в случае удачного завершения,
"1 " в случае неудачи.

Примечания:

1.  Системный слой имеет номер 0.
2.  Если p " объект слоя, возвращается номер слоя этого объекта.
3.  Если p = 0, то возвращается номер текущего слоя.

GetLayerReference  Получить указатель на слой по 
номеру слоя текущего вида
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetLayerReference.
Синтаксис:
reference GetLayerReference (int number);
Входной параметр:

number " номер слоя.

Возвращаемое значение:

указатель на слой " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
Возврат нулевого значения означает, что слой с таким номером в документе отсутствует.

Layer  Сделать слой текущим
Пример...

Справка системы КОМПАС...
kompas.chm::/401_46_4_Perekljuchenie_mezhdu_.htm
Аналог данной функции при использовании Automation " метод ksDocument2D::ksLayer.
Синтаксис:
reference Layer (int n);
Входной параметр:
4462



n " номер слоя.

Возвращаемое значение:

указатель на слой " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
Если слоя с заданным номером нет, он создается.

Работа с видами
Функции работы с видами
Функции данного радела обеспечивают работу с видами чертежа (создание и изменение
их параметров).

CreateSheetView  Создать новый вид в чертеже
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_CREATESHEETVIEW.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksCreateSheetView.
Синтаксис:
reference CreateSheetView(ViewParam *par, 
int *number);
Входные параметры:

number " номер вида.

Выходные параметры:

par " указатель на структуру параметров вида,

Возвращаемое значение:

указатель на вид " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
4463



1.  Созданный вид становится текущим. 
2.  Если указать *number = 0, то создается вид с номером по возрастанию.
3.  Если *number = n, создается вид с номером n. Если вид n существует, ничего не созда"

ется (reference = 0) " ошибка.
4.  При использовании Unicode следует использовать функцию CreateSheetViewW.

CreateSheetViewW  Создать новый вид в чертеже 
(Unicode)
Справка системы КОМПАС...
KOMPAS.chm::/CM_CREATESHEETVIEW.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksCreateSheetView.
Синтаксис:
reference LIB_FUNC CreateSheetView(ViewParamW *par, 
int *number);
Входные параметры:

number " номер вида.

Выходные параметры:

par " указатель на структуру параметров вида,

Возвращаемое значение:

указатель на вид " в случае удачного завершения,
0 " в случае неудачи.

Примечание:

1.  Созданный вид становится текущим. 
2.  Если указать *number = 0, то создается вид с номером по возрастанию.
3.  Если *number = n, создается вид с номером n. Если вид n существует, ничего не созда"

ется (reference = 0) " ошибка.
4.  При использовании ANSI следует использовать функцию CreateSheetView.

GetViewNumber  Получить номер вида по   указателю на 
вид или объект вида
Пример...
4464



Справка системы КОМПАС...
KOMPAS.chm::/387_45_1_Perekljuchenie_mezhdu_.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetViewNumber.
Синтаксис:
int GetViewNumber (reference p);
Входной параметр:

p " указатель на вид или объект вида.

Возвращаемое значение:

номер вида " в случае удачного завершения,
"1 " в случае неудачи.

Примечание:

1.  Если p " указатель на объект вида, возвращается номер вида этого объекта.
2.  Если p = 0, то возвращается номер текущего вида.

GetViewReference  Получить указатель на вид по 
номеру вида
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/387_45_1_Perekljuchenie_mezhdu_.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetViewReference.
Синтаксис:
reference GetViewReference(int number);
Входной параметр:

number " номер вида.

Возвращаемое значение:

указатель на вид " в случае удачного завершения,
0 " в случае неудачи.
4465



ksAssociationViewMatrix3D  Создать матрицу 
ассоциативного вида
Справка системы КОМПАС...
KOMPAS.chm::/DLG_SET_VIEWS_SCHEMA.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksAssociationViewMatrix3D.
Синтаксис:
VARIANT ksAssociationViewMatrix3D (reference view);
Входные параметры:

view " указатель на ассоциативный вид.

Возвращаемое значение:

SAFEARRAY double (VT_ARRAY | VT_R8)
В массиве будут лежать 16 элементов, которые представляют собой ма"
трицу размера 4х4.

Примечание:
Если указатель на вид не задан (view = 0), то функция будет выполняться для текущего
вида.

ksCreateSheetArbitraryView  Создать произвольный 
ассоциативный вид
Справка системы КОМПАС...
KOMPAS.chm::/CM_CREATE_ARBITRARY_VIEW.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksCreateSheetArbitraryView.
Синтаксис:
reference ksCreateSheetArbitraryView (AssociationViewParam * par, int *number);
Входные параметры:

number " номер создаваемого вида.
par " структура параметров ассоциативного вида 

AssociationViewParam.

Возвращаемое значение:

указатель на вид " в случае успешного завершения,
0 " в случае неудачи.
4466



Примечания:

1.  Созданный вид становится текущим.
2.  Если значение параметра number = 0, то создается вид с номером по возрастанию.
3.  Если значение параметра *number = n, где n = 1 … 255, то создается вид с номером n.

Если вид n существует, то ничего не создается.
4.  При использовании Unicode следует использовать функцию

ksCreateSheetArbitraryViewW.

ksCreateSheetArbitraryViewW  Создать произвольный 
ассоциативный вид (Unicode)
Справка системы КОМПАС...
KOMPAS.chm::/CM_CREATE_ARBITRARY_VIEW.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksCreateSheetArbitraryView.
Синтаксис:
reference LIB_FUNC ksCreateSheetArbitraryView (AssociationViewParamW * par, int
*number);
Входные параметры:

number " номер создаваемого вида,
par " структура параметров ассоциативного вида 

AssociationViewParam.

Возвращаемое значение:

указатель на вид " в случае успешного завершения,
0 " в случае неудачи.

Примечания:

1.  Созданный вид становится текущим.
2.  Если значение параметра number = 0, то создается вид с номером по возрастанию.
3.  Если значение параметра *number = n, где n = 1 … 255, то создается вид с номером n.

Если вид n существует, то ничего не создается.
4.  При использовании ANSI следует использовать функцию ksCreateSheetArbitraryView.
4467



ksCreateSheetArrowView  Создать ассоциативный вид 
по стрелке
Справка системы КОМПАС...
KOMPAS.chm::/CM_CREATE_ARROW_VIEW.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksCreateSheetArrowView.
Синтаксис:
reference ksCreateSheetArrowView ( AssociationViewParam *par,
int *number,
reference obj);
Входные параметры:

par " структура параметров ассоциативного вида AssociationViewParam,
number " номер создаваемого вида,
obj " указатель на объект "стрелка вида".

Возвращаемое значение:

указатель на вид " в случае успешного завершения,
0 " в случае неудачи.

Примечания:

1.  Созданный вид становится текущим.
2.  Объект "стрелка вида" должен быть построен в ассоциативном виде. Этот вид будет ба"

зовым для создаваемого вида.
3.  Если значение параметра number = 0, то создается вид с номером по возрастанию.
4.  Если значение параметра *number = n, где n = 1 … 255, то создается вид с номером n.

Если вид n существует, то ничего не создается.
5.  При использовании Unicode следует использовать функцию ksCreateSheetArrowViewW.

ksCreateSheetArrowViewW  Создать ассоциативный вид 
по стрелке (Unicode)
Справка системы КОМПАС...
KOMPAS.chm::/CM_CREATE_ARROW_VIEW.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksCreateSheetArrowView.
Синтаксис:
reference LIB_FUNC ksCreateSheetArrowViewW (AssociationViewParamW *par,
int *number,
reference obj);
Входные параметры:
4468



par " структура параметров ассоциативного вида AssociationViewParam,
number " номер создаваемого вида,
obj " указатель на объект "стрелка вида".

Возвращаемое значение:

указатель на вид " в случае успешного завершения,
0 " в случае неудачи.

