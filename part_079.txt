GetNotifyType  Получить тип события
Интерфейс...
4304



Синтаксис Automation:
long GetNotifyType();
Синтаксис COM:
long GetNotifyType();
Возвращаемое значение:

" Идентификатор события из перечисления  
ksDocument3DNotifyEnum.

GetRequestFilesType  Тип процесса, запрашивающего 
файл
Интерфейс...
Синтаксис Automation:
long GetRequestFilesType();
Синтаксис COM:
long GetRequestFilesType();
Возвращаемое значение:

" Тип процесса из перечисления
ksRequestFilesTypeEnum.
4305



4306



API экспортныx функций
Функции работы с документом моделью
Функции данного раздела позволяют работать с документом"моделью.

ksGetActive3dDocument  Получить указатель на 
активный документмодель
Аналог данной функции при использовании Automation " метод
KompasObject::ActiveDocument3D.
Синтаксис:
LPDOCUMENT3D ksGetActive3dDocument();
Возвращаемое значение:

указатель на активный документ трехмерной модели " в случае удачного завершения,
NULL " если активного документа нет.

ksGet3dDocument  Получить указатель на объект 
документамодели
Синтаксис:
LPDOCUMENT3D ksGet3dDocument();
Возвращаемое значение:

указатель на объект документа трех" " в случае удачного завершения,
мерной модели
NULL " если такого документа нет.

ksGet3dDocumentFromReference  Получить 
указатель на документ трехмерной модели, 
соответствующий присланному указателю
Аналог данной функции при использовании Automation " метод
KompasObject::ksGet3dDocumentFromRef.
Синтаксис:
LPDOCUMENT3D ksGet3dDocumentFromReference (reference doc);
Входной параметр:

doc " указатель на документ.

Возвращаемое значение:
4307



указатель на документ трехмерной модели " в случае удачного завершения,
NULL " если такого документа нет.

ksGetModelLibrary  Получить указатель на 
интерфейс библиотеки моделей
Аналог данной функции при использовании Automation " метод
KompasObject::GetModelLibrary.
Синтаксис:
LPMODELLIBRARY ksGetModelLibrary();
Возвращаемое значение:

" указатель на интерфейс ksModelLibrary.

ksGetObjectsFilter3D  Получить интерфейс 
фильтрации объектов 3D
Справка системы КОМПАС...
KOMPAS.chm::/683_82_7_2_Filqtry_obwektov.htm
Аналог данной функции при использовании Automation " метод
KompasObject::ksGetObjectsFilter3D.
Синтаксис:
IObjectsFilter3D * ksGetObjectsFilter3D();
Возвращаемое значение:

указатель на интерфейс ksObjectsFilter3D

ksGetReferenceFrom3dDocument Получить 
указатель на документ трехмерной модели, 
соответствующий присланному интерфейсу
Синтаксис:
reference ksGetReferenceFrom3dDocument (LPDOCUMENT3D doc);
Входной параметр:

doc " интерфейс документа трехмерной модели.

Возвращаемое значение:
4308



указатель на документ трехмерной модели " в случае удачного завершения,
NULL " если такого документа нет.

Функции работы с графическим документом
Функции управления масштабом
Функции данного раздела позволяют управлять масштабом отображения объектов до"
кумента

ksGetZoomScale  Получить масштаб и центр изменения 
масштаба окна графического документа
 Пример...

Справка системы КОМПАС...
KOMPAS.chm::/62_6_1_Izmenenie_masshtaba_izob.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetZoomScale.
Синтаксис:
int ksGetZoomScale (double *x, double *y, double *scale);
Выходные параметры:

x, y " координаты (в СК вида) точки центра изменения масштаба,
scale " коэффициент изменения масштаба изображения.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

ksRefreshActiveWindow  Обновить окно документа
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/67_6_4_Obnovlenie_izobrazhenija.htm
Синтаксис:
int ksRefreshActiveWindow ();
Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.
4309



ksZoom  Задать масштаб изображения прямоугольной 
рамкой
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/62_6_1_Izmenenie_masshtaba_izob.htm
Аналог данной функции при использовании Automation " метод ksDocument2D::ksZoom.
Синтаксис:
int ksZoom (double x1, double y1, double x2, double y2);
Входные параметры:

x1, y1 " координаты (в СК вида) первой точки диагонали рамки,
x2, y2 " координаты (в СК вида) второй точки диагонали рамки.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

ksZoomPrevNextOrAll  Показать документ в 
предыдущем/последующем масштабе или документ 
целиком
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/62_6_1_Izmenenie_masshtaba_izob.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksZoomPrevNextOrAll.
Синтаксис:
int ksZoomPrevNextOrAll (unsigned char type);
Входной параметр:

type тип масштабирования:
0 " следующий масштаб,
1 " предыдущий масштаб,
2 " весь документ.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.
4310



ksZoomScale  Задать масштаб изображения по точке и 
коэффициенту масштабирования
 Пример...

Справка системы КОМПАС...
KOMPAS.chm::/62_6_1_Izmenenie_masshtaba_izob.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksZoomScale.
Синтаксис:
int ksZoomScale (double x, double y, double scale);
Входные параметры:

x1, y1 " координаты (в СК вида) точки центра изменения масштаба,
scale_ " коэффициент изменения масштаба изображения.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Вспомогательные построения
Математические функции
Функции данного раздела позволяют выполнять математические вычисления.

AtanD  Получить арктангенс аргумента
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/74_8_1_3_Vvod_znachenij_v_polja.htm
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksAtanD.
Синтаксис:
double AtanD (double tang);
Входной параметр:

tang " тангенс угла.

Возвращаемое значение:

" значение угла (в градусах).
4311



CosD  Получить косинус аргумента
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/74_8_1_3_Vvod_znachenij_v_polja.htm
Аналог данной функции при использовании Automation " метод ksMathematic2D::ksCosD.
Синтаксис:
double CosD (double ang);
Входной параметр:

ang " угол в градусах.

 Возвращаемое значение:

" косинус аргумента.

ksDistanceT1T2OnCurve  Получить расстояние между 
двумя точками на кривой по параметрам кривой в 
данных точках
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksDistanceT1T2OnCurve.
Синтаксис:
double ksDistanceT1T2OnCurve (reference curve,double t1,double t2);
Входные параметры:

curve " указатель на кривую,
t1 " параметр кривой в точке 1,
t2 " параметр кривой в точке 2.

Возвращаемое значение:

" Расстояние между двумя точками на кривой.

ksEqualPoints  Определить эквивалентность 
(совпадение) двух точек
 Пример...
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksEqualPoints.
4312



Синтаксис:
int ksEqualPoints(double x1, double y1, double x2, double y2);
Входные параметры:

x1, y1 " координаты первой точки,
x2, y2 " координаты второй точки.

Возвращаемое значение:

1 " точки совпадают,
0 " точки не совпадают.

ksGetCurveMinMaxParametr  Получить минимальный и 
максимальный параметр кривой
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksGetCurveMinMaxParametr.
Синтаксис:
int ksGetCurveMinMaxParametr (reference curve,double *tMin,double *tMax);
Входные параметры:

curve " указатель на кривую,

Выходные параметры:

tMin " минимальный параметр кривой,
tMax " максимальный параметр кривой.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

ksGetCurvePerpendicular  Получить угол нормали к 
кривой в заданной точке
Пример...
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksGetCurvePerpendicular.
Синтаксис:
double ksGetCurvePerpendicular (reference curve, double x, double y);
Входные параметры:
4313



curve " указатель на кривую,
x, y " координаты точки.

Возвращаемое значение:

угол нормали к кривой в заданной точке (в градусах). " в случае успеха,
"1 " в случае неудачи.

Примечание:
Если указанная точка не находится на кривой, она проецируется на кривую.

ksGetCurvePoint  Преобразовать параметр кривой t в 
координаты вида
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksGetCurvePoint.
Синтаксис:
int ksGetCurvePoint (reference curve,
double t,
double *kx,
double *ky);
Входные параметры:

curve " указатель на кривую,
t " параметр кривой.

Выходные параметры:

kx, ky " координаты проекции точки на кривую,

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
См. также ksGetCurvePointProjectionEx

ksGetCurvePointProjection  Получить координаты 
проекции точки на кривую
Пример...
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksGetCurvePointProjection.
4314



Синтаксис:
int ksGetCurvePointProjection (reference curve,
double x, double y,
double *kx, double *ky);
Входные параметры:

curve " указатель на кривую,
x, y " координаты проецируемой точки.

Выходные параметры:

kx, ky " координаты проекции точки на кривую.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание:

1.  См. также ksGetCurvePointProjectionEx
2.  При выполнении функции ksGetCurvePointProjection проекция на кривую из данной точ"

ки может быть не найдена, например, если проекция находится на продолжении кривой.
В таком случае возвращаются координаты ближайшей к проекции начальной или конеч"
ной точки кривой.

3.  В функцию ksGetCurvePointProjection нужно передавать координаты в системе коорди"
нат кривой, то есть в системе координат макроэлемента, которому принадлежит кривая.
Возвращаются координаты также в системе координат кривой.

ksGetCurvePointProjectionEx  Расcчитать координаты 
проекции точки на кривую
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksGetCurvePointProjectionEx.
Синтаксис:
int ksGetCurvePointProjectionEx (reference curve,
double x,
double y,
double *kx,
double *ky,
double *t);
Входные параметры:

curve " указатель на кривую,
x, y " координаты проецируемой точки.
4315



Выходные параметры:

kx, ky " координаты проекции точки на кривую,
t " параметр кривой.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание:

1.  См. также ksGetCurvePointProjection
2.  При выполнении функции ksGetCurvePointProjectionEx проекция на кривую из данной

точки может быть не найдена, например, если проекция находится на продолжении кри"
вой. В таком случае возвращаются координаты ближайшей к проекции начальной или
конечной точки кривой.

3.  В функцию ksGetCurvePointProjectionEx нужно передавать координаты в системе коор"
динат кривой, то есть в системе координат макроэлемента, которому принадлежит кри"
вая. Возвращаются координаты также в системе координат кривой.

ksIsCurveClosed  Проверить, замкнута ли указанная 
кривая
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksIsCurveClosed.
Синтаксис:
int ksIsCurveClosed (reference p);
Входной параметр:

p " указатель на кривую.

Возвращаемое значение:

1 " кривая замкнута,
0 " кривая разомкнута,
"1 " в случае неудачи.

ksIsPointInsideContour  Проверить положение точки 
относительно кривой
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksIsPointInsideContour.
4316



Синтаксис:
int ksIsPointInsideContour (reference p, double x, double y, double precision);
Входные параметры:

p " указатель на контур,
x, y " координаты точки,
precision " точность проверки (от 1 до 1E"6).

Возвращаемое значение:

0 " в случае неудачи,
1 " точка вне контура,
2 " точка на контуре,
3 " точка внутри контура.

ksLengthFromMtr  Пересчитать длину из локальной СК в 
СК вида
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksLengthFromMtr.
Синтаксис:
int ksLengthFromMtr (double *len);
Входной и Выходной параметр:

len " длина.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Параметр len является одновременно и входным, и выходным. На входе он представляет
собой длину в локальной СК, а в результате работы функции преобразуется в длину в СК
вида.

ksLengthIntoMtr  Пересчитать длину из СК вида в 
локальную СК
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksLengthIntoMtr.
Синтаксис:
4317



int ksLengthIntoMtr (double *len);
Входной и Выходной параметр:

len " длина.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Параметр len является одновременно и входным, и выходным. На входе он представляет
собой длину в СК вида, а в результате работы функции преобразуется в длину в локаль"
ной СК.

ksLinePointTangentCurve  Функция расчета касательных 
к кривой, проходящих через заданную точку
Синтаксис:
void LIB_FUNC ksLinePointTangentCurve( reference p,       // указатель на кривую
                                         double xc,         // координаты точки
                                         double yc,
                                         reference angArr ) // массив углов касательных
Входные параметры:

 p " указатель на кривую,
xc, yc "  координаты точки.

Выходные параметры:

angArr " массив углов касательных к кривой,
проходящих через заданную точку.

ksMakeEncloseContours   Определить группу объектов, 
охватывающих заданную точку
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksMakeEncloseContours.
Синтаксис:
reference ksMakeEncloseContours (reference gr, double x, double y);
Входные параметры:
4318



gr " временная группа 
или 0, если требуются контуры в текущем виде,

x, y " координаты точки внутри охватываемых контуров.

Возвращаемое значение:

указатель на временную группу контуров " в случае удачного завершения,
0 " если контуров не нашлось 

или в случае неудачи.

ksPointFromMtr  Пересчитать координаты точки из 
локальной СК в СК вида
 Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksPointFromMtr.
Синтаксис:
int ksPointFromMtr (double x, double y, double *xn, double *yn);
Входные параметры:

x, y " координаты точки в локальной системе координат,

Выходные параметры:

xn, yn " координаты точки в СК вида.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

ksPointIntoMtr  Пересчитать координаты точки из СК 
вида в локальную СК
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksPointIntoMtr.
Синтаксис:
int ksPointIntoMtr (double x, double y, double *xn, double *yn);
Входные параметры:

x, y " координаты точки в системе координат вида.
4319



Выходные параметры:

xn, yn " координаты точки в локальной СК.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

ksPointsOnCurve  Получить массив равномерно 
расположенных по кривой точек
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/1391_Postroenie_tochek.htm#point_on_curve
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksPointsOnCurve.
Синтаксис:
reference ksPointsOnCurve (reference curve, int count);
Входные параметры:

curve " указатель на кривую,
count " количество точек.

Возвращаемое значение:

" указатель на массив равномерно " в случае успеха,
расположенных на указанной кривой точек.
0 " в случае неудачи.

ksTanCurvCurv  Получить координаты точек касания 
прямых к двум кривым
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/1396_vspomogatelnye.htm#TANGENT2_LINE
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksTanCurvCurv.
Синтаксис:
int ksTanCurvCurv(reference p1, reference p2,reference pointArr1,reference pointArr2);
Входные параметры:
4320



p1 " указатель на первую кривую,
p2 " указатель на вторую кривую.

Выходные параметры:

pointArr1 " динамический массив математических точек
POINT_ARR на кривой p1,

pointArr2 " динамический массив математических точек
POINT_ARR на кривой p2.

Возвращаемое значение:

1 " успешное завершение,
0 " построить касательную нельзя (кривые совпа"

дают или одна кривая вложена в другую),
"1 " первый объект не существует,
"2 " второй объект не существует,
"3 " кривые расположены в разных видах,
"4 " не совпадают СК определения кривых (геоме"

трическая и аннотационная),
"5 " первый объект не является кривой,
"6 " второй объект не является кривой,
"7 " ошибка.

MovePoint  Сдвинуть точку по вектору
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksMovePoint.
Синтаксис:
void MovePoint (double *x, double *y, double ang, double len);
Входные параметры:

x, y " координаты точки,
ang " угол вектора сдвига в градусах,
len " длина вектора сдвига.

Возвращаемое значение:

TRUE " в случае успешного завершения,
FALSE " в случае неудачи.

Примечание:
4321



Параметры x и y являются одновременно и входными, и выходными. На входе они пред"
ставляют собой начальные координаты точки, а в результате работы метода они прео"
бразуются в координаты точки после сдвига.

Rotate  Повернуть точку относительно центра
Пример...
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksRotate.
Синтаксис:
void Rotate (double x, double y, double xc, double yc, double ang, double *xr, double *yr);
Входные параметры:

x, y " координаты базовой точки,
xс, yс " координаты центра поворота,
ang " угол поворота.

Выходные параметры:

xr, yr " координаты точки после поворота.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

SheetToView  Пересчитать координаты точки из СК 
листа в СК текущего вида
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksSheetToView.
Синтаксис:
int (double x, double y, double * outX, double * outY);
Входные параметры:

x, y " координаты точки в системе координат листа.

Выходные параметры:

outX, outY " координаты точки в системе координат вида.

Возвращаемое значение:
4322



1 " в случае успешного завершения,
0 " в случае неудачи.

SinD  Получить синус аргумента
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/74_8_1_3_Vvod_znachenij_v_polja.htm
Аналог данной функции при использовании Automation " метод ksMathematic2D::ksSinD.
Синтаксис:
double SinD (double ang);
Входной параметр:

ang " угол в градусах.

Возвращаемое значение:

синус аргумента.

Symmetry  Получить координаты точки, симметричной 
относительно заданной оси
 Пример...
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksSymmetry.
Синтаксис:
void Symmetry (double x, double y,double x1, double y1, double x2, double y2, double *xs,
double *ys);
Входные параметры:

x, y " координаты базовой точки,
x1, y1 " координаты первой точки на оси симметрии,
x2, y2 " координаты второй точки на оси симметрии.

Выходные параметры:

xs, ys " координаты симметричной точки.

Возвращаемое значение:

TRUE " в случае удачного завершения,
4323



FALSE " в случае неудачи.

TanD  Получить тангенс аргумента 
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/74_8_1_3_Vvod_znachenij_v_polja.htm
Аналог данной функции при использовании Automation " метод ksMathematic2D::TanD.
Синтаксис:
double TanD (double ang);
Входной параметр:

ang " угол в градусах.

Возвращаемое значение:

тангенс аргумента.

ViewToSheet  Пересчитать координаты точки из СК 
текущего вида в СК листа
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksViewToSheet.
Синтаксис:
int ViewToSheet (double x, double y, double * outX, double * outY);
Входные параметры:

x, y " координаты точки в системе координат вида.

Выходные параметры:

outX, outY " координаты точки в системе координат листа.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Функции вычисления пересечений
Функции данного раздела обеспечивают вычисление пересечений геометрических объ"
ектов друг с другом. 
4324



IntersectArcArc  Получить координаты точек 
пересечения двух дуг окружностей
Пример...
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksIntersectArcArc.
Синтаксис:
void IntersectArcArc (double xac, double yac,
double rada,
double fa1, double fa2,
short directa,
double xbc, double ybc,
double radb,
double fb1, double fb2,
short directb,
int * kp,
double xp[], double yp[]);
Входные параметры:

xac, yac " координаты центра первой дуги,
rada " радиус первой дуги,
fa1, fa2 " углы начальной и конечной точек первой дуги,
directa " направление первой дуги:

 1 " против часовой стрелки,
 "1 – по часовой стрелке,

xbc, ybc " координаты центра второй дуги,
radb " радиус второй дуги,
fb1, fb2 " углы начальной и конечной точек второй дуги,
directb " направление второй дуги:

 1 " против часовой стрелки,
 "1 – по часовой стрелке.

Выходные параметры:

kp " число пересечений (от 0 до 2),
xp[], yp[] " массивы координат точки пересечения.

IntersectArcLine  Получить координаты точек 
пересечения дуги окружности и прямой
Пример...
Синтаксис:
4325



void IntersectArcLine (double xc,
double yc,
double rad,
double f1,
double f2,
int n,
double x,
double y,
double ang,
int *kp,
double xp[],
double yp[]);
Входные параметры:

xc, yc " координаты центра окружности,
rad " радиус дуги,
f1, f2 " углы начальной и конечной точек дуги,
n " направление дуги,
x, y " координаты точки на прямой,
ang " угол наклона прямой.

Выходные параметры:

kp " число пересечений (от 0 до 2),
xp, yp " координаты точки пересечения.

IntersectCirArc  Получить координаты точек 
пересечения окружности и дуги
Пример...
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksIntersectCirArc.
Синтаксис:
void IntersectCirArc (double xcc, double ycc,
double radc,
double xac, double yac,
double rada,
double fa1, double fa2,
short directa,
int * kp,
double xp, double yp);
Входные параметры:

xcс, ycс " координаты центра окружности,
4326



radc " радиус окружности,
xac, yac " координаты центра дуги,
rada " радиус дуги,
fa1, fa2 " углы начальной и конечной точек дуги,
directa " направление дуги:

 1 " против часовой стрелки,
 "1 " по часовой стрелке.

Выходные параметры:

kp " число пересечений (от 0 до 2),
xp, yp " координаты точки пересечения.

IntersectCirCir  Получить координаты точек пересечения 
двух окружностей
Пример...
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksIntersectCirCir.
Синтаксис:
void IntersectCirCir (double xc1,double yc1,
double rad1, double xc2,
double yc2, double rad2,
int *kp, double xp, double yp);
Входные параметры:

xc1, yc1 " координаты центра первой окружности,
rad1 " радиус первой окружности,
xc2, yc2 " координаты центра второй окружности,
rad2 " радиус второй окружности,

Выходные параметры:

kp " число пересечений (от 0 до 2),
xp, yp " координаты точки пересечения.

IntersectCirLin  Получить координаты точек пересечения 
окружности и прямой
Пример...
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksIntersectCirLin.
Синтаксис:
4327



void IntersectCirLin (double xc,
double yc,
double rad,
double x,
double y,
double ang,
int *kp,
double xp,
double yp);
Входные параметры:

xc, yc " координаты центра окружности,
rad " радиус окружности,
x, y " координаты точки на прямой,
ang " угол наклона прямой.

Выходные параметры:

kp " число пересечений (от 0 до 2),
xp, yp " координаты точки пересечения.

IntersectCurvCurv  Получить координаты точек 
пересечения двух кривых
Пример...
Синтаксис:
void IntersectCurvCurv (reference p1, reference p2, int *kp, double xp, double yp, int
MaxCount);
Входные параметры:

p1 " указатель на первую кривую,
p2 " указатель на вторую кривую,
MaxCount " максимальное число выдаваемых точек пересечений.

Выходные параметры:

kp " число пересечений,
xp, yp " координаты точки пересечения.

IntersectCurvCurvEx  Получить координаты точек 
пересечения двух кривых
Синтаксис:
void IntersectCurvCurv (reference p1, reference p2, int *kp, double xp, double yp, int
MaxCount, int touchInclude );
Входные параметры:
4328



p1 " указатель на первую кривую,
p2 " указатель на вторую кривую,
MaxCount " максимальное число выдаваемых точек пересечений,
touchInclude " включать точки касания.

Выходные параметры:

kp " число пересечений,
xp, yp " координаты точки пересечения.

IntersectLinLin  Получить координаты точки 
пересечения двух прямых
Пример...
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksIntersectLinLin.
Синтаксис:
void IntersectLinLin (double x1, double y1,
double angle1,
double x2, double y2,
double angle2,
int *kp,
double *xp, double *yp);
Входные параметры:

x1, y1 " координаты точки на первой прямой,
angle1 " угол наклона первой прямой,
x2, y2 " координаты точки на второй прямой,
angle2 " угол наклона второй прямой,

Выходной параметр:

kp " число пересечений (0 или 1),
xp, yp " координаты точки пересечения.

IntersectLinSArc  Получить координаты точек 
пересечения отрезка и дуги
Пример...
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksIntersectLinSArc.
Синтаксис:
4329



void IntersectLinSArc (double x1, double y1,
double x2, double y2,
double xc, double yc,
double rad,
double f1, double f2,
short direct,
int * kp,
double xp, double yp);
Входные параметры:

x1, y1 " координаты начальной точки отрезка,
x2, y2 " координаты конечной точки отрезка,
xc, yc " координаты центра дуги,
rad " радиус дуги,
f1, f2 " углы начальной и конечной точек дуги,
direct " направление дуги:

" 1 " против часовой стрелки,
" 1 " по часовой стрелке.

Выходные параметры:

kp " число пересечений (от 0 до 2),
xp, yp " координаты точки пересечения.

IntersectLinSCir  Получить координаты точек 
пересечения отрезка и окружности 
Пример...
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksIntersectLinSCir.
Синтаксис:
void IntersectLinSCir (double x1, double y1,
double x2, double y2,
double xc, double yc,
double rad,
int * kp,
double xp, double yp);
Входные параметры:

x1, y1 " координаты начальной точки отрезка,
x2, y2 " координаты конечной точки отрезка,
4330



xc, yc " координаты центра окружности,
rad " радиус окружности.

Выходные параметры:

kp " число пересечений (от 0 до 2),
xp, yp " координаты точки пересечения.

IntersectLinSLine  Получить координаты точки 
пересечения отрезка и прямой
Пример...
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksIntersectLinSLine.
Синтаксис:
void IntersectLinSLine (double x1,
double y1,
double x2,
double y2,
double x,
double y,
double ang,
int *kp,
double *xp,
double *yp);
Входные параметры:

x1, y1 " координаты начальной точки отрезка,
x2, y2 " координаты конечной точки отрезка,
x, y " координаты точки на прямой,
ang " угол наклона прямой.

Выходные параметры:

kp " число пересечений (0 или 1),
xp, yp " координаты точки пересечения.

IntersectLinSLinS  Получить координаты точки 
пересечения двух отрезков
Пример...
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksIntersectLinSLinS.
Синтаксис:
Void IntersectLinSLinS (double x11, double y11,
4331



double x12, double y12,
double x21, double y21,
double x22, double y22,
int * kp,
double * xp, double *yp);
Входные параметры:

x11, y11 " координаты начальной точки первого отрезка,
x12, y12 " координаты конечной точки первого отрезка,
x21, y21 " координаты начальной точки второго отрезка,
x22, y22 " координаты конечной точки второго отрезка.

Выходные параметры:

kp " число пересечений (0 или 1),
xp, yp " координаты точки пересечения.

ksIntersectCurvCurv  Получить координаты точек 
пересечения двух кривых
Пример...
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksIntersectCurvCurv.
Синтаксис:
int ksIntersectCurvCurv (reference p1, reference p2, reference array);
Входные параметры:

p1 " указатель на первую кривую,
p2 " указатель на вторую кривую.

Выходной параметр:

array " динамический массив точек пересечения MathPointParam.

Возвращаемое значение:

1 " пересечение данных объектов обнаружено,
0 " пересечение не обнаружено (кривые не пересе"

каются или совпадают),
"1 " первый объект не существует,
"2 " второй объект не существует,
"3 " кривые расположены в разных видах,
"4 " не совпадают СК определения кривых,
"5 " первый объект не является кривой,
"6 " второй объект не является кривой,
4332



"7 " ошибка: массив типа POINT_ARR предвари"
тельно не создан.

Примечание :
Динамический массив точек пересечения array должен быть создан до передачи его в
функцию.

ksIntersectCurvCurvEx  Получить координаты точек 
пересечения двух кривых
Синтаксис:
void IntersectCurvCurv (reference p1, reference p2, reference array, int touchInclude );
Входные параметры:

p1 " указатель на первую кривую,
p2 " указатель на вторую кривую,
touchInclude " включать точки касания.

Выходной параметр:

array " динамический массив точек пересечения
MathPointParam.

Возвращаемое значение:

1 " пересечение данных объектов обнаружено,
0 " пересечение не обнаружено (кривые не пересе"

каются или совпадают),
"1 " первый объект не существует,
"2 " второй объект не существует,
"3 " кривые расположены в разных видах,
"4 " не совпадают СК определения кривых,
"5 " первый объект не является кривой,
"6 " второй объект не является кривой,
"7 " ошибка: массив типа POINT_ARR предвари"

тельно не создан.

Примечание:
Динамический массив точек пересечения array должен быть создан до передачи его в
функцию.

Perpendicular  Получить координаты точки пересечения 
отрезка и перпендикуляра к нему, проходящего через 
заданную точку
Пример...
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksPerpendicular.
4333



Синтаксис:
void Perpendicular (double x, double y, double x1, double y1,
double x2, double y2, double *xp, double *yp);
Входные параметры:

x, y " координаты точки,
x1, y1 " координаты начальной точки отрезка,
x2, y2 " координаты конечной точки отрезка.

Выходные параметры:

xp, yp " координаты точки пересечения отрезка и перпен"
дикуляра к нему, проходящего через заданную точ"
ку.

Функции вычисления касаний и сопряжений
Функции данного раздела обеспечивают вычисление касаний и сопряжений геометриче"
ских объектов.

CouplingLineLine  Получить параметры окружностей, 
касательных к двум прямым
Пример...
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksCouplingLineLine.
Синтаксис:
void CouplingLineLine (double x1, 
double y1, 
double ang1,
double x2, 
double y2, 
double ang2,
double rad, 
int *kp, 
CON *con);
Входные параметры:

x1, y1 " координаты точки на первой прямой,
angl1 " угол наклона первой прямой,
x2, y2 " координаты точки на второй прямой,
angl2 " угол наклона второй прямой.

Выходные параметры:
4334



rad " радиус окружности сопряжения,
kp "количество сопрягающих окружностей,
con " Структура параметров сопрягающей окружности...

(описана в LTDEFINE.H).

Примечание:
Возможное число сопряжений " от 0 до 4.

ksCouplingCircleCircle  Получить параметры 
сопрягающих окружностей определенного радиуса и 
точки сопряжения для двух окружностей
Пример...
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksCouplingCircleCircle.
Синтаксис:
void ksCouplingCircleCircle (double xc1, 
double yc1, 
double radc1, 
double xc2, 
double yc2, 
double radc2, 
double rad, 
int *kp, 
CON *con);
Входные параметры:

xc1, yc1 " координаты центра первой окружности,
radc1 " радиус первой окружности,
xc2, yc2 " координаты центра второй окружности,
radc2 " радиус второй окружности,
rad " радиус окружности сопряжения.

Выходные параметры:

kp "количество сопрягающих окружностей,
con Структура параметров сопрягающей окружности...

(описана в LTDEFINE.H).

Примечание:
Заполняются до 8 структур CON, если сопряжение существует.
4335



ksCouplingLineCircle  Получить параметры сопрягающих 
окружностей определенного радиуса и точки касания 
при сопряжении окружности и прямой
Пример...
Аналог данной функции при использовании Automation " метод
Mathematic2D::ksCouplingLineCircle.
Синтаксис:
void ksCouplingLineCircle (double xc, 
double yc, 
double radc, 
double x1, 
double y1, 
double angle1, 
double rad, 
int *kp, 
CON *con);
Входные параметры:

xc, yc " координаты центра окружности,
radc " радиус окружности,
x1, y1 " координаты точки на прямой,
angle1 " угол наклона прямой.

Выходные параметры:

rad " радиус окружности сопряжения,
kp "количество сопрягающих окружностей,
con " Структура параметров сопрягающей окружности...

(описана в LTDEFINE.H).

Примечание:
Заполняются до 8 структур CON, если сопряжение существует.

ksCouplingLineLine  Получить параметры сопряжения 
двух прямых
Пример...
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksCouplingLineLine.
Синтаксис:
void CouplingLineLine (double x1, 
double y1, 
double angle1, 
double x2, 
double y2, 
4336



double angle2, 
double rad, 
int *kp, 
CON *con);
Входные параметры:

x1, y1 " координаты точки на первой прямой,
angle1 " угол наклона первой прямой,
x2, y2 " координаты точки на второй прямой,
angle2 " угол наклона второй прямой.

Выходные параметры:

rad " радиус окружности сопряжения,
kp "количество сопрягающих окружностей,
con " Структура параметров сопрягающей окружности...

(описана в LTDEFINE.H).

Примечание:
Заполняются 4 структуры con, если сопряжение есть.

ksTanLinePointCurve  Получить точки касания кривой и 
прямой, проведенной из заданной точки
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/1396_vspomogatelnye.htm#TANLINE_BY_OUTSIDE_PNT
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksTanLinePointCurve.
Синтаксис:
int ksTanLinePointCurve (double x,
double y,
reference pCur,
reference array);
Входные параметры:

pCur " указатель на кривую,
x, y  " координаты точки.

Выходной параметр:

array " указатель на динамический массив точек касания MathPointParam.

Возвращаемое значение:
4337



количество точек касания " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Динамический массив точек касания array должен быть создан до передачи его в фун"
кцию.

TanCircleCircle  Получить координаты точек касания 
прямых к двум окружностям 
Пример...
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksTanCircleCircle.
Синтаксис:
int TanCircleCircle (double xc1, 
double yc1, 
double radius1,
double xc2, 
double yc2, 
double radius2, 
struct TAN tang);
Входные параметры:

xc1, yc1 " координаты центра первой окружности,
radius1 " радиус первой окружности,
xc2, yc2 " координаты центра второй окружности,
radius2 " радиус второй окружности.

Выходной параметр:

tang " указатель на массив структур параметров касательных отрезков.

Описание:
Функция определяет точки касания прямых к двум окружностям. Структура типа TAN
(описана в LIBTOOL.H) содержит координаты двух точек касания и определяет одну ка"
сательную прямую. Касательных прямых может быть от 0 до 4.

TanLineAngCircle  Получить точки касания окружности и 
прямой, проходящей под заданным углом
Пример...
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksTanLineAngCircle.
Синтаксис:
4338



void TanLineAngCircle (double xc, 
double yc, 
double rad, 
double ang, 
double xp[], 
double yp[]);
Входные параметры:

xc, yc " координаты центра окружности,
rad " радиус окружности,
ang " угол касательной прямой.

Выходные параметры:

xp, yp " координаты точки касания.

TanLinePointCircle  Получить точки касания окружности 
и прямой, проходящей через заданную точку
Пример...
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksTanLinePointCircle.
Синтаксис:
void TanLinePointCircle (double x, 
double y, 
double xc, 
double yc, 
double rad, 
int *kp, 
double xp, 
double yp);
Входные параметры:

x, y " координаты точки,
xc, yc " координаты центра окружности,
rad " радиус окружности.

Выходной параметр:

kp " число касательных (от 0 до 2),
xp, yp " координаты точки касания.

Примечание:
4339



Построение касательной невозможно в случае, если точка лежит внутри окружности. В
противном случае точек касания или две (точка вне окружности), или одна (если точка
принадлежит окружности).

Функции вычисления длин, расстояний, углов и МЦХ
Функции данного раздела позволяют вычислять расстояния от точки до объекта, длины
объектов, углы между объектами или между объектом и осью X и массово"центровочные
характеристики.

Angle  Получить угол (в градусах) между осью OX и 
вектором, заданным двумя точками
Пример...
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksAngle.
Синтаксис:
double Angle (double x1, double y1, double x2, double y2);
Входные параметры:

x1, y1 " координаты начальной точки вектора,
x2, y2 " координаты конечной точки вектора.

Возвращаемое значение:

угол в градусах. " в случае успеха,
0 " в случае неудачи.

DistancePntPnt  Получить расстояние между двумя 
точками
Пример...
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksDistancePntPnt.
Синтаксис:
double DistancePntPnt (double x1, double y1, double x2, double y2);
Входные параметры:

x1, y1 " координаты первой точки,
x2, y2 " координаты второй точки.

Возвращаемое значение:
4340



расстояние между двумя точками. " в случае успеха,
0 " в случае неудачи.

ksCalcInertiaProperties  Получить плоские массово
центровочные характеристики кривой или группы 
кривых
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_MIX.htm
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksCalcInertiaProperties.
Синтаксис:
int ksCalcInertiaProperties (reference p,
InertiaParam * properties,
unsigned char dimension); 
Входные параметры:

p " указатель на кривую или группу кривых,
dimension " размерность длины.

Размерности длины...
Выходные параметры:

properties " указатель на структуру параметров для расчета плоских МЦХ.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
Кривые должны быть замкнутыми и представлять собой наружные и внутренние конту"
ра.

ksCalcMassInertiaProperties  Получить объемные 
массовоцентровочные характеристики тел вращения 
или выдавливания, заданных кривой или группой 
кривых
Пример...
4341



Справка системы КОМПАС...
KOMPAS.chm::/CM_MEASURE_MIX3D.htm
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksCalcMassInertiaProperties.
Синтаксис:
int ksCalcMassInertiaProperties (reference p,
 MassInertiaParam * properties, 
 unsigned int bitVector,
 double density,
 double param);
Входные параметры:

p " указатель на кривую или группу кривых,
density " плотность тела (г/куб.мм),
param " параметр тела (для тела вращения " угол раствора в градусах, 

для тела выдавливания " толщина),
bitVector " структура параметров, определяющая размерности длины, 

массы и типы деталей.

Выходные параметры:

properties " указатель на структуру параметров для расчета МЦХ объемных тел.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечания:
Кривые должны быть замкнутыми и представлять собой наружные и внутренние конту"
ра.

ksDistancePntArc  Получить расстояние между точкой и 
дугой
Пример...
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksDistancePntArc.
Синтаксис:
double ksDistancePntArc (double x, double y,
double xac, double yac,
double rada,
4342



double fa1, double fa2,
short directa);
Входные параметры:

x, y " координаты точки,
xac, yac " координаты центра дуги,
rada " радиус дуги,
fa1, fa2 " начальный и конечный углы дуги,
directa " направление дуги:

 1 " против часовой стрелки,
 "1 – по часовой стрелке.

Возвращаемое значение:

расстояние между точкой и дугой. " в случае успеха,
0 " в случае неудачи.

ksDistancePntCircle  Получить расстояние между точкой 
и окружностью
Пример...
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksDistancePntCircle.
Синтаксис:
double ksDistancePntCircle (double x,
double y,
double xc, double yc,
double rad);
Входные параметры:

x, y " координаты точки,
xc, yc " координаты центра окружности,
rad " радиус окружности.

Возвращаемое значение:

расстояние между точкой и окружностью. " в случае успеха,
0 " в случае неудачи.

ksDistancePntLine  Получить расстояние между точкой и 
прямой, заданной точкой и углом
Пример...
4343



Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksDistancePntLine.
Синтаксис:
double ksDistancePntLine (double x, 
double y, 
double x1, 
double y1, 
double angle);
Входные параметры:

x, y " координаты точки,
x1, y1 " координаты точки на прямой,
angle " угол наклона прямой.

Возвращаемое значение:

расстояние между точкой и прямой. " в случае успеха,
0 " в случае неудачи.

ksDistancePntLineForPoint  Получить расстояние между 
точкой и прямой, заданной двумя точками
Пример...
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksDistancePntLineForPoint.
Синтаксис:
double ksDistancePntLineForPoint (double x, 
double y, 
double x1, 
double y1, 
double x2, 
double y2);
Входные параметры:

x, y " координаты точки,
x1, y1 " координаты первой точки на прямой,
x2, y2 " координаты второй точки на прямой.

Возвращаемое значение:

расстояние между точкой и прямой. " в случае успеха,
0 " в случае неудачи.
4344



ksDistancePntLineSeg  Получить расстояние между 
точкой и отрезком
Пример...
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksDistancePntLineSeg.
Синтаксис:
double ksDistancePntLineSeg (double x, double y,
double x1, double y1,
double x2, double y2);
Входные параметры:

x, y " координаты точки,
x1, y1 " координаты начальной точки отрезка,
x2, y2 " координаты конечной точки отрезка.

Возвращаемое значение:

расстояние между точкой и отрезком. " в случае успеха,
0 " в случае неудачи.

ksDistancePntPntOnCurve  Получить расстояние между 
двумя точками на кривой
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_MEASURE_DISTANCE_2POINTS_BYCURVE.htm
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksDistancePntPntOnCurve.
Синтаксис:
double ksDistancePntPntOnCurve (reference curve,
double x1, double y1,
double x2, double y2);
Входные параметры:

curve " указатель на кривую,
x1, y1 " координаты первой точки,
x2, y2 " координаты второй точки.

Возвращаемое значение:

расстояние между двумя точками на кривой " в случае успеха,
4345



0 " в случае неудачи.
Примечание:
Если заданные точки не находятся на кривой, то определяется расстояние между их про"
екциями на кривую.

ksGetCurvePerimeter  Получить длину периметра 
кривой
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_PERIMETER.htm
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksGetCurvePerimeter.
Синтаксис:
double ksGetCurvePerimeter (reference curve,
 unsigned char dimension); 
Входные параметры:

curve " указатель на кривую,
dimension " размерность длины.

Размерности длины...
Возвращаемое значение:

длина периметра кривой " в случае успеха,
0 " в случае неудачи.

ksViewGetDensity  Выбрать из диалога значение 
плотности
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/dlg_mix_density.htm
Аналог данной функции при использовании Automation " метод
KompasObject::ksViewGetDensity.
Синтаксис:
double ksViewGetDensity (void * HWindow);
Входной параметр:

HWindow " дескриптор "родительского" окна или NULL.
4346



Возвращаемое значение:

плотность (г/куб.мм) " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Плотность выбирается из системного файла плотностей graphic.dns.

ksViewGetDensityAndMaterial  Выбрать из диалога 
плотность и наименование материала
Справка системы КОМПАС...
KOMPAS.chm::/dlg_mix_density.htm
Аналог данной функции при использовании Automation " метод
KompasObject::ksViewGetDensityAndMaterial.
Синтаксис:
double ksViewGetDensityAndMaterial (char * material, int sizeStr, void *HWindow);
Входные параметры:

HWindow " дескриптор "родительского" окна,
sizeStr " размер строки material.

Выходные параметры:

material " наименование материала.

Возвращаемое значение:

плотность (г/куб.мм) " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Плотность выбирается из системного файла плотностей graphic.dns.
При использовании Unicode следует использовать функцию
ksViewGetDensityAndMaterialW.

ksViewGetDensityAndMaterialW  Выбрать из диалога 
плотность и наименование материала (Unicode)
Справка системы КОМПАС...
KOMPAS.chm::/dlg_mix_density.htm
Аналог данной функции при использовании Automation " метод
KompasObject::ksViewGetDensityAndMaterial.
Синтаксис:
4347



double LIB_FUNC ksViewGetDensityAndMaterial (LPWSTR material, int sizeStr, void
*HWindow);
Входные параметры:

HWindow " дескриптор "родительского" окна,
sizeStr " размер строки material.

Выходные параметры:

material " наименование материала.

Возвращаемое значение:

плотность (г/куб.мм) " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Плотность выбирается из системного файла плотностей graphic.dns.
2.  При использовании ANSI следует использовать функцию ksViewGetDensityAndMaterial.

ReadFragment  Прочитать фрагмент в текущий вид
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_INSERTFRAGMENT.htm
Аналог данной функции при использовании Automation " метод
ksFragment::ksReadFragment.
Синтаксис:
int ReadFragment (char *fileName,
unsigned char currentLayer,
PlacementParam * par);
Входные параметры:

fileName " имя фрагмента,
curentLayer " тип размещения объектов фрагмента по слоям:

0 " на "свои" слои, 
1" на текущий слой,

par " указатель на структуру параметров привязки.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
4348



1.  Допускается задание имени файла следующего вида: "c:\gr\lib1.lfr|детали|литье|фла"
нец", 
где
c:\gr\lib1.lfr " имя файла библиотеки фрагментов,
|детали|литье| " разделы, подразделы внутри библиотеки фрагментов,
фланец " имя фрагмента.
В этом случае фрагмент берется из библиотеки фрагментов.

2.  При использовании Unicode следует использовать функцию ReadFragmentW.

ReadFragmentW  Прочитать фрагмент в текущий вид 
(Unicode)
Справка системы КОМПАС...
KOMPAS.chm::/CM_INSERTFRAGMENT.htm
Аналог данной функции при использовании Automation " метод
ksFragment::ksReadFragment.
Синтаксис:
int LIB_FUNC ReadFragmentW (LPWSTR fileName,
unsigned char currentLayer,
PlacementParam * par);
Входные параметры:

fileName " имя фрагмента,
curentLayer " тип размещения объектов фрагмента по слоям:

0 " на "свои" слои, 
1" на текущий слой,

par " указатель на структуру параметров привязки.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Допускается задание имени файла следующего вида: "c:\gr\lib1.lfr|детали|литье|фла"
нец", где
c:\gr\lib1.lfr " имя файла библиотеки фрагментов,
|детали|литье| " разделы, подразделы внутри библиотеки фрагментов,
фланец " имя фрагмента.
В этом случае фрагмент берется из библиотеки фрагментов.

2.  При использовании ANSI следует использовать функцию ReadFragment.
4349



Функции работы с фрагментами и библиотеками 
фрагментов
Функции работы с фрагментами 
Справка системы КОМПАС: Фрагменты...
KOMPAS.chm::/454_Glava52_Obshchie_svedenija_.htm

Библиотеки фрагментов...
KOMPAS.chm::/617_Glava75_Biblioteka_fragment.htm
Функции данного раздела позволяют работать с фрагментами и библиотеками фрагмен"
тов.

Фрагменты

FragmentDefinition  Определить данные для вставки 
фрагмента 
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/456_Glava53_Fragmenty_v_grafich.htm
Аналог данной функции при использовании Automation " метод
ksFragment::ksFragmentDefinition.
Синтаксис:
reference   FragmentDefinition (char * fileName,
char * comment,
unsigned char insertType);
Входные параметры:

fileName " имя файла фрагмента,
comment " имя вставки,
insertType " тип вставки (действителен для внешнего

фрагмента): 
0 " взять в документ, 
1 " внешней ссылкой.

Возвращаемое значение:

указатель на определение фрагмента " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
4350



1.  Функция определяет данные для вставки фрагмента (внешнего или находящегося непо"
средственно в документе) с указанным именем по ссылке.

2.  Непосредственно вставка фрагмента (вставка ссылки) производится при помощи мето"
да ksFragment::ksInsertFragment.

3.  Допускается задание имени фрагмента следующего вида: "c:\gr\lib1.lfr|детали|ли"
тье|фланец", где:

▼ c:\gr\lib1.lfr " имя файла библиотеки фрагментов,
▼ |детали|литье| " разделы, подразделы внутри библиотеки фрагментов,
▼ фланец " имя фрагмента.

В этом случае определение создается для фрагмента из библиотеки фрагментов.
4.  Определение для данного фрагмента одно; вставок может быть сколько угодно.
5.  При использовании Unicode следует использовать функцию FragmentDefinitionW.

FragmentDefinitionW  Определить данные для вставки 
фрагмента (Unicode)
Справка системы КОМПАС...
KOMPAS.chm::/456_Glava53_Fragmenty_v_grafich.htm
Аналог данной функции при использовании Automation " метод
ksFragment::ksFragmentDefinition.
Синтаксис:
reference LIB_FUNC FragmentDefinitionW (LPWSTR fileName,
LPWSTR comment,
unsigned char insertType);
Входные параметры:

fileName " имя файла фрагмента,
comment " имя вставки,
insertType " тип вставки (действителен для внешнего

фрагмента): 
0 " взять в документ, 
1 " внешней ссылкой.

Возвращаемое значение:

указатель на определение фрагмента " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Функция определяет данные для вставки фрагмента (внешнего или находящегося непо"
средственно в документе) с указанным именем по ссылке.

2.  Непосредственно вставка фрагмента (вставка ссылки) производится при помощи мето"
да ksFragment::ksInsertFragment.
4351



3.  Допускается задание имени фрагмента следующего вида: "c:\gr\lib1.lfr|детали|ли"
тье|фланец", где:

▼ c:\gr\lib1.lfr " имя файла библиотеки фрагментов,
▼ |детали|литье| " разделы, подразделы внутри библиотеки фрагментов,
▼ фланец " имя фрагмента.

В этом случае определение создается для фрагмента из библиотеки фрагментов.
4.  Определение для данного фрагмента одно; вставок может быть сколько угодно.
5.  При использовании ANSI следует использовать функцию FragmentDefinition.

InsertFragment  Вставить фрагмент в документ
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/456_Glava53_Fragmenty_v_grafich.htm
Замечание:
Функция устарела, рекомендуется использовать вместо нее функцию
ksInsertFragmentEx.
Аналог данной функции при использовании Automation " метод
ksFragment::ksInsertFragment.
Синтаксис:
reference InsertFragment (reference p,
unsigned char currentLayer, 
PlacementParam * par);
Входные параметры:

p " указатель на фрагмент,
curentLayer " тип размещения объектов фрагмента по слоям:

0 " на "свои" слои, 
1" на текущий слой,

par " указатель на структуру параметров привязки

Возвращаемое значение:

указатель на вставку фрагмента " в случае успешного завершения,
0 " в случае неудачи.

ksInsertFragmentEx  Вставить фрагмент в документ
Справка системы КОМПАС...
KOMPAS.chm::/456_Glava53_Fragmenty_v_grafich.htm
Аналог данной функции при использовании Automation " метод
ksFragment::ksInsertFragmentEx.
4352



Синтаксис:
reference ksInsertFragmentEx (reference p,
unsigned char currentLayer, 
PlacementParam * par, 
unsigned char scaleProjLinesSize);
Входные параметры:

p " указатель на фрагмент,
curentLayer " тип размещения объектов фрагмента по слоям:

0 " на "свои" слои, 
1" на текущий слой,

par " указатель на структуру параметров привязки
scaleProjLinesSize " признак масштабирования длины выносных линий размеров:

1 " выносные линии масштабируются,
0 " выносные линии не масштабируются.

Возвращаемое значение:

указатель на вставку фрагмента " в случае успешного завершения,
0 " в случае неудачи.

ksReadFragmentToGroup  Вставить фрагмент россыпью 
во временную группу
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_INSERTFRAGMENT.htm
Замечание:
Функция устарела, рекомендуется использовать вместо нее функцию
ksReadFragmentToGroupEx.
Аналог данной функции при использовании Automation " метод
ksFragment::ksReadFragmentToGroup.
Синтаксис:
reference ksReadFragmentToGroup (char * fileName,
unsigned char  curentLayer,
PlacementParam *  par);
Входные параметры:

fileName " имя фрагмента,
curentLayer " тип размещения объектов фрагмента по слоям:

0 " на "свои" слои, 
1" на текущий слой,

par " указатель на структуру параметров привязки.
4353



Возвращаемое значение:

указатель на временную группу " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Допускается задание имени файла следующего вида: "c:\gr\lib1.lfr|детали|литье|фланец", 
где:
c:\gr\lib1.lfr " имя файла библиотеки фрагментов,
|детали|литье| " разделы, подразделы внутри библиотеки фрагментов,
фланец " имя фрагмента.
В этом случае фрагмент берется из библиотеки фрагментов.

ksReadFragmentToGroupEx  Вставить фрагмент 
россыпью во временную группу
Справка системы КОМПАС...
KOMPAS.chm::/CM_INSERTFRAGMENT.htm
Аналог данной функции при использовании Automation " метод
ksFragment::ksReadFragmentToGroupEx.
Синтаксис:
reference ksReadFragmentToGroupEx (char * fileName,
unsigned char  curentLayer,
PlacementParam *  par.
unsigned char scaleProjLinesSize);
Входные параметры:

fileName " имя фрагмента,
curentLayer " тип размещения объектов фрагмента по слоям:

0 " на "свои" слои, 
1" на текущий слой,

par " указатель на структуру параметров привязки,
scaleProjLinesSize " признак масштабирования длины выносных линий 

размеров:
1 " выносные линии масштабируются,
0 " выносные линии не масштабируются.

Возвращаемое значение:

указатель на временную группу " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
4354



1.  Допускается задание имени файла следующего вида: "c:\gr\lib1.lfr|детали|литье|фла"
нец", где

▼ c:\gr\lib1.lfr " имя файла библиотеки фрагментов,
▼ |детали|литье| " разделы, подразделы внутри библиотеки фрагментов,
▼ фланец " имя фрагмента.

В этом случае фрагмент берется из библиотеки фрагментов.
2.  При использовании Unicode следует использовать функцию

ksReadFragmentToGroupExW.

ksReadFragmentToGroupExW  Вставить фрагмент 
россыпью во временную группу (Unicode)
Справка системы КОМПАС...
KOMPAS.chm::/CM_INSERTFRAGMENT.htm
Аналог данной функции при использовании Automation " метод
ksFragment::ksReadFragmentToGroupEx.
Синтаксис:
reference LIB_FUNC ksReadFragmentToGroupExW (LPWSTR fileName,
unsigned char  curentLayer,
PlacementParam *  par.
unsigned char scaleProjLinesSize);
Входные параметры:

fileName " имя фрагмента,
curentLayer " тип размещения объектов фрагмента по слоям:

0 " на "свои" слои, 
1" на текущий слой,

par " указатель на структуру параметров привязки
scaleProjLinesSize " признак масштабирования длины выносных линий 

размеров:
1 " выносные линии масштабируются,
0 " выносные линии не масштабируются.

Возвращаемое значение:

указатель на временную группу " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Допускается задание имени файла следующего вида: "c:\gr\lib1.lfr|детали|литье|фла"
нец", где

▼ c:\gr\lib1.lfr " имя файла библиотеки фрагментов,
▼ |детали|литье| " разделы, подразделы внутри библиотеки фрагментов,
4355



▼ фланец " имя фрагмента.
В этом случае фрагмент берется из библиотеки фрагментов.

2.  При использовании ANSI следует использовать функцию ksReadFragmentToGroupEx.

LocalFragmentDefinition  Начать определение 
локального фрагмента
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_INSERTFRAGMENT.htm
Аналог данной функции при использовании Automation " метод
ksFragment::ksLocalFragmentDefinition.
Синтаксис:
int LocalFragmentDefinition(char * comment);
Входной параметр:

comment " имя вставки.

Возвращаемое значение:

указатель на определение фрагмента " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Вставка ссылки на фрагмент производится с помощью функции InsertFragment. Указа"
тель на определение фрагмента возвращается при окончании описания " функцией
CloseLocalFragmentDefinition. Отдельного файла фрагмента нет; "тело" фрагмента хра"
нится в документе.

2.  Все объекты вида, вводимые между функциями LocalFragmentDefinition и
CloseLocalFragmentDefinition, принадлежат локальному фрагменту.

3.  При использовании Unicode следует использовать функцию LocalFragmentDefinitionW.

LocalFragmentDefinitionW  Начать определение 
локального фрагмента (Unicode)
Справка системы КОМПАС...
KOMPAS.chm::/CM_INSERTFRAGMENT.htm
Аналог данной функции при использовании Automation " метод
ksFragment::ksLocalFragmentDefinition.
Синтаксис:
int LIB_FUNC LocalFragmentDefinitionW( LPWSTR comment);
Входной параметр:
4356



comment " имя вставки.

Возвращаемое значение:

указатель на определение фрагмента " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Вставка ссылки на фрагмент производится с помощью функции InsertFragment. Указа"
тель на определение фрагмента возвращается при окончании описания функцией
CloseLocalFragmentDefinition. Отдельного файла фрагмента нет; "тело" фрагмента хра"
нится в документе.

2.  Все объекты вида, вводимые между функциями LocalFragmentDefinition и
CloseLocalFragmentDefinition, принадлежат локальному фрагменту.

3.  При использовании ANSI следует использовать функцию LocalFragmentDefinition.

WriteFragment  Записать группу во фрагмент
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_INSERTFRAGMENT.htm
Аналог данной функции при использовании Automation " метод
ksFragment::ksWriteFragment.
Синтаксис:
int WriteFragment (reference gr,
char *filename,
char *comment,
double xb,
double yb);
Входные параметры:

gr " указатель на группу
(0 " записывается группа выделения),

filename " имя файла фрагмента,
comment " комментарий для фрагмента,
xb, yb " координаты точки привязки.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.
4357



Примечание.
При использовании Unicode следует использовать функцию WriteFragmentW.

WriteFragmentW  Записать группу во фрагмент 
(Unicode)
Справка системы КОМПАС...
KOMPAS.chm::/CM_INSERTFRAGMENT.htm
Аналог данной функции при использовании Automation " метод
ksFragment::ksWriteFragment.
Синтаксис:
int LIB_FUNC WriteFragment (reference gr,
LPWSTR filename,
LPWSTR comment,
double xb,
double yb);
Входные параметры:

gr " указатель на группу
(0 " записывается группа выделения),

filename " имя файла фрагмента,
comment " комментарий для фрагмента,
xb, yb " координаты точки привязки.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание.
При использовании ANSI следует использовать функцию WriteFragment.

Библитеки фрагментов

ksAddFragmentToLibrary  Добавить фрагмент в 
библиотеку фрагментов
Функция не поддерживается
Пример...
4358



Справка системы КОМПАС...
KOMPAS.chm::/618_75_1_Sozdanie_biblioteki_fr.htm
Аналог данной функции при использовании Automation " метод
ksFragmentLibrary::ksAddFragmentToLibrary
Синтаксис:
int ksAddFragmentToLibrary (char * libName, char * frwName);
Входные параметры:

libName " имя фрагмента в библиотеке,
frwName " имя файла фрагмента.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Допускается задание имени фрагмента следующего вида: "c:\gr\lib1.lfr|детали|ли"
тье|фланец", где:

▼ c:\gr\lib1.lfr " имя файла библиотеки фрагментов,
▼ |детали|литье| " разделы, подразделы внутри библиотеки фрагментов,
▼ фланец " имя фрагмента.
2.  При использовании Unicode следует использовать функцию ksAddFragmentToLibraryW.

ksAddFragmentToLibraryW  Добавить фрагмент в 
библиотеку фрагментов (Unicode)
Функция не поддерживается

Справка системы КОМПАС...
KOMPAS.chm::/618_75_1_Sozdanie_biblioteki_fr.htm
Аналог данной функции при использовании Automation " метод
ksFragmentLibrary::ksAddFragmentToLibrary.
Синтаксис:
int LIB_FUNC ksAddFragmentToLibraryW (LPWSTR libName, LPWSTR frwName);
Входные параметры:

libName " имя фрагмента в библиотеке,
frwName " имя файла фрагмента.

Возвращаемое значение:

1 " в случае успешного завершения,
4359



0 " в случае неудачи.
Примечание:

1.  Допускается задание имени фрагмента следующего вида: "c:\gr\lib1.lfr|детали|ли"
тье|фланец",где:

▼ c:\gr\lib1.lfr " имя файла библиотеки фрагментов,
▼ |детали|литье| " разделы, подразделы внутри библиотеки фрагментов,
▼ фланец " имя фрагмента.
2.  При использовании ANSI следует использовать функцию ksAddFragmentToLibrary.

ksCheckFragmentLibrary  Проверить, открыта ли 
библиотека фрагментов
Функция не поддерживается
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/617_Glava75_Biblioteka_fragment.htm
Аналог данной функции при использовании Automation " метод
ksFragmentLibrary::ksCheckFragmentLibrary.
Синтаксис:
int ksCheckFragmentLibrary (char * libName, unsigned char possibleMessage);
Входные параметры:

libName " имя файла библиотеки фрагментов,
possibleMessage " признак выдачи сообщения:

" 1 " сообщать, если библиотека уже открыта,
" 0 " не сообщать.

Возвращаемое значение:

1 " если библиотека открыта,
