Примечания:

1.  Созданный вид становится текущим.
2.  Объект "стрелка вида" должен быть построен в ассоциативном виде. Этот вид будет ба"

зовым для создаваемого вида.
3.  Если значение параметра number = 0, то создается вид с номером по возрастанию.
4.  Если значение параметра *number = n, где n = 1 … 255, то создается вид с номером n.

Если вид n существует, то ничего не создается.
5.  При использовании ANSI следует использовать функцию ksCreateSheetArrowView.

ksCreateSheetProjectionView  Создать проекционный 
ассоциативный вид
Справка системы КОМПАС...
KOMPAS.chm::/CM_CREATE_PROJECTION_VIEW.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksCreateSheetProjectionView.
Синтаксис:
reference ksCreateSheetProjectionView( AssociationViewParam * par,
int * number,
reference view);
Входные параметры:

par " структура параметров ассоциативного вида
AssociationViewParam,

number " номер создаваемого вида,
view " указатель на базовый вид.

Возвращаемое значение:

указатель на вид " в случае успешного завершения,
0 " в случае неудачи.

Примечания:
4469



1.  Созданный вид становится текущим.
2.  Базовый вид должен быть ассоциативным.
3.  Если значение параметра number = 0, то создается вид с номером по возрастанию.
4.  Если значение параметра *number = n, где n = 1 … 255, то создается вид с номером n.

Если вид n существует, то ничего не создается.
5.  При использовании Unicode следует использовать функцию

ksCreateSheetProjectionViewW.

ksCreateSheetProjectionViewW  Создать проекционный 
ассоциативный вид (Unicode)
Справка системы КОМПАС...
KOMPAS.chm::/CM_CREATE_PROJECTION_VIEW.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksCreateSheetProjectionView.
Синтаксис:
reference LIB_FUNC ksCreateSheetProjectionViewW( AssociationViewParamW * par,
int * number,
reference view);
Входные параметры:

par " структура параметров ассоциативного вида AssociationViewParam,
number " номер создаваемого вида,
view " указатель на базовый вид.

Возвращаемое значение:

указатель на вид " в случае успешного завершения,
0 " в случае неудачи.

Примечания:

1.  Созданный вид становится текущим.
2.  Базовый вид должен быть ассоциативным.
3.  Если значение параметра number = 0, то создается вид с номером по возрастанию.
4.  Если значение параметра *number = n, где n = 1 … 255, то создается вид с номером n.

Если вид n существует, то ничего не создается.
5.  При использовании ANSI следует использовать функцию ksCreateSheetProjectionView.
4470



ksCreateSheetSectionView  Создать ассоциативный вид 
разреза/сечения
Справка системы КОМПАС...
KOMPAS.chm::/CM_CREATE_SECTION_VIEW.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksCreateSheetSectionView.
Синтаксис:
reference ksCreateSheetSectionView (AssociationViewParam *par,
int *number,
reference obj);
Входные параметры:

par " структура параметров ассоциативного вида AssociationViewParam,
number " номер создаваемого вида,
obj " указатель на объект "линия разреза".

Возвращаемое значение:

указатель на вид " в случае успешного завершения,
0 " в случае неудачи.

Примечания:

1.  Созданный вид становится текущим.
2.  Объект "линия разреза" должен быть построен в ассоциативном виде. Этот вид будет ба"

зовым для создаваемого вида.
3.  Если значение параметра number = 0, то создается вид с номером по возрастанию.
4.  Если значение параметра *number = n, где n = 1 … 255, то создается вид с номером n.

Если вид n существует, то ничего не создается.
5.  При использовании Unicode следует использовать функцию

ksCreateSheetSectionViewW.

ksCreateSheetSectionViewW  Создать ассоциативный 
вид разреза/сечения (Unicode)
Справка системы КОМПАС...
KOMPAS.chm::/CM_CREATE_SECTION_VIEW.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksCreateSheetSectionView.
Синтаксис:
reference LIB_FUNC ksCreateSheetSectionViewW (AssociationViewParamW *par,
int *number,
reference obj);
4471



Входные параметры:

par " структура параметров ассоциативного вида AssociationViewParam,
number " номер создаваемого вида,
obj " указатель на объект "линия разреза".

Возвращаемое значение:

указатель на вид " в случае успешного завершения,
0 " в случае неудачи.

Примечания:

1.  Созданный вид становится текущим.
2.  Объект "линия разреза" должен быть построен в ассоциативном виде. Этот вид будет ба"

зовым для создаваемого вида.
3.  Если значение параметра number = 0, то создается вид с номером по возрастанию.
4.  Если значение параметра *number = n, где n = 1 … 255, то создается вид с номером n.

Если вид n существует, то ничего не создается.
5.  При использовании ANSI следует использовать функцию ksCreateSheetSectionView.

ksCreateSheetStandartViews  Создать стандартные 
ассоциативные виды
Справка системы КОМПАС...
KOMPAS.chm::/CM_CREATE_STANDART_VIEW.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksCreateSheetStandartViews.
Синтаксис:
int ksCreateSheetStandartViews (AssociationViewParam *par,
unsigned int bitVector,
double dx,
double dy);
Входные параметры:

par " структура параметров ассоциативного вида 
AssociationViewParam,

bitVector " набор типов стандартных видов, которые нужно создать,
dx " расстояние между видами по горизонтали,
dy " расстояние между видами по вертикали.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.
4472



Примечание:

1.  Последний из созданных видов становится текущим.
2.  При использовании Unicode следует использовать функцию

ksCreateSheetStandartViewsW.

ksCreateSheetStandartViewsW  Создать стандартные 
ассоциативные виды (Unicode)
Справка системы КОМПАС...
KOMPAS.chm::/CM_CREATE_STANDART_VIEW.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksCreateSheetStandartViews.
Синтаксис:
int LIB_FUNC ksCreateSheetStandartViewsW (AssociationViewParamW *par,
unsigned int bitVector,
double dx,
double dy);
Входные параметры:

par " структура параметров ассоциативного вида
AssociationViewParam,

bitVector " набор типов стандартных видов, которые нуж"
но создать,

dx " расстояние между видами по горизонтали,
dy " расстояние между видами по вертикали.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Последний из созданных видов становится текущим.
2.  При использовании ANSI следует использовать функцию ksCreateSheetStandartViews.

ksCreateSheetRemoteView  Создать ассоциативный 
выносной вид
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksCreateSheetRemoteView.
Синтаксис:
4473



reference ksCreateSheetRemoteView (AssociationViewParam *par,
int *number,
reference obj);
Входные параметры:

par " структура параметров ассоциативного вида
AssociationViewParam,

number " номер создаваемого вида,
obj " указатель на объект "Обозначение выносного

элемента".

Возвращаемое значение:

указатель на вид " в случае успешного завершения,
0 " в случае неудачи.

Примечания:

1.  Созданный вид становится текущим.
2.  Объект "Обозначение выносного элемента" должен быть построен в ассоциативном ви"

де. Этот вид будет базовым для создаваемого вида.
3.  Если значение параметра number = 0, то создается вид с номером по возрастанию.
4.  Если значение параметра *number = n, где n = 1 … 255, то создается вид с номером n.

Если вид n существует, то ничего не создается.
5.  При использовании Unicode следует использовать функцию

ksCreateSheetRemoteViewW.

ksCreateSheetRemoteViewW  Создать ассоциативный 
выносной вид (Unicode)
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksCreateSheetRemoteView.
Синтаксис:
reference LIB_FUNC ksCreateSheetRemoteViewW (AssociationViewParamW *par,
int *number,
reference obj);
Входные параметры:

par " структура параметров ассоциативного вида
AssociationViewParam,

number " номер создаваемого вида,
obj " указатель на объект "Обозначение выносного

элемента".

Возвращаемое значение:
4474



указатель на вид " в случае успешного завершения,
0 " в случае неудачи.

Примечания:

1.  Созданный вид становится текущим.
2.  Объект "Обозначение выносного элемента" должен быть построен в ассоциативном ви"

де. Этот вид будет базовым для создаваемого вида.
3.  Если значение параметра number = 0, то создается вид с номером по возрастанию.
4.  Если значение параметра *number = n, где n = 1 … 255, то создается вид с номером n.

Если вид n существует, то ничего не создается.
5.  При использовании ANSI следует использовать функцию ksCreateSheetRemoteView.

ksGetQualityNames  Получить массив полей допусков, 
которые поддерживают размер dimValue и не 
превышают указанных отклонений
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/185_23_4_Vybor_kvaliteta.htm
Аналог данной функции при использовании Automation " метод
KompasObject::ksGetQualityNames.
Синтаксис:
int ksGetQualityNames (reference names, 
double dimValue, 
double high, 
double low,
unsigned char system, 
unsigned char withLimitation);
Входные параметры:

names " указатель на динамический массив полей допусков,
dimValue " номинальное значение размера (в мм),
high " верхнее отклонение,
low " нижнее отклонение,
system " система:

 1 " отверстия, 
 0 " вала.

withLimitation " признак учета ограничений:
 0 " без учёта ограничений, 
 1 " с учётом ограничений, наложенных в системе.

Возвращаемое значение:
4475



1 " в случае удачного завершения,
0 " в случае неудачи.

ksPoint3DToAssociationView  Преобразовать 
координаты 3D точки в координаты ассоциативного 
вида
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksPoint3DToAssociationView.
Синтаксис:
int ksPoint3DToAssociationView (reference view,
double x3D, double y3D, double z3D,
double * x2D, double * y2D);
Входные параметры:

view " указатель на ассоциативный вид,
x3D, y3D, z3D " координаты 3D точки.

Выходные параметры:

x2D, y2D " координаты 3D точки в ассоциативном виде.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Если указатель на вид не задан (view = 0), то функция будет выполняться для текущего
вида.

NewViewNumber  Определить номер следующего вида
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/387_45_1_Perekljuchenie_mezhdu_.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksNewViewNumber.
Синтаксис:
int NewViewNumber();
Возвращаемое значение:
4476



номер следующего вида " в случае успешного завершения,
0 " в случае неудачи.

OpenView  Сделать текущим существующий вид с 
указанным номером
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/379_44_2_Sostojanija_vidov.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksOpenView.
Синтаксис:
reference OpenView (int view);
Входной параметр:

view " номер вида, который требуется открыть.

Возвращаемое значение:

указатель на вид " в случае успешного завершения,
0 " в случае неудачи.

Описание:
Открытый вид становится текущим (после открытия или создания чертежа по умолча"
нию текущим является системный вид с номером 0).

Размеры и технологические обозначения
Функции построения размеров /обозначений
Функции данного раздела обеспечивают простановку в чертеже обозначений различных
типов: размеры, обозначения шероховатости, линии"выноски, обозначения базы, допу"
ски формы, линии разреза или сечения, стрелки вида.

AngBreakDimension  Проставить угловой размер с 
обрывом
Справка системы КОМПАС...
KOMPAS.chm::/CM_CUT_DIMA.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksAngBreakDimension.
4477



Синтаксис:
reference AngBreakDimension (ABreakDimParam *angPar);
Выходной параметр:

angPar " указатель на структуру параметров угло"
вого размера с обрывом ABreakDimParam.

Возвращаемое значение:

указатель на угловой размер с обрывом " в случае удачного завершения,
0 " в случае неудачи.

AngDimension  Проставить угловой размер
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_DIMA.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksAngDimension.
Синтаксис:
reference AngDimension (ADimParam *Par);
Выходной параметр:

Par " указатель на структуру параметров
углового размера ADimParam.

Возвращаемое значение:

указатель на угловой размер " в случае удачного завершения,
0 " в случае неудачи.

Base  Проставить обозначения базы
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_BASE.htm
Аналог данной функции при использовании Automation " метод ksDocument2D::ksBase.
Синтаксис:
reference Base (BaseParam *basePar);
Выходной параметр:
4478



basePar " указатель на структуру параметров 
обозначения базы BaseParam.

Возвращаемое значение:

указатель на обозначение базы " в случае удачного завершения,
0 " в случае неудачи.

Примечание.
При использовании Unicode следует использовать функцию BaseW.

BaseW  Проставить обозначения базы (Unicode)
Справка системы КОМПАС...
KOMPAS.chm::/CM_BASE.htm
Аналог данной функции при использовании Automation " метод ksDocument2D::ksBase.
Синтаксис:
reference BaseW (BaseParamW *basePar);
Выходной параметр:

basePar " указатель на структуру параметров 
обозначения базы BaseParamW.

Возвращаемое значение:

указатель на обозначение базы " в случае удачного завершения,
0 " в случае неудачи.

Примечание.
При использовании ANSI следует использовать функцию Base.

BrandLeader  Создать линиювыноску для обозначения 
клеймения
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_BRANDLEADER.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksBrandLeader.
Синтаксис:
reference BrandLeader(BrandLeaderParam *leaderPar);
Выходной параметр:
4479



brandLeaderParam " указатель на структуру параметров линии"
выноски для обозначения клеймения 
BrandLeaderParam.

Возвращаемое значение:

указатель на линию"выноску для " в случае удачного завершения,
обозначения клеймения
0 " в случае неудачи.

CloseTechnicalDemand  Закрыть технические 
требования
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/IPR_TEXT_SLAVE.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksCloseTechnicalDemand.
Синтаксис:
reference CloseTechnicalDemand ();
Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

CutLine  Создать линию разреза/сечения
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_CUTLINE.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksCutLine.
Синтаксис:
reference CutLine (CutLineParam *cutPar);
Выходной параметр:

cutPar " указатель на структуру параметров линии 
разреза/сечения CutLineParam.

Возвращаемое значение:
4480



указатель на линию разреза/сечения " в случае удачного завершения,
0 " в случае неудачи.

DiamDimension  Проставить диаметральный размер
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_DIMD.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksDiamDimension.
Синтаксис:
reference DiamDimension (RDimParam *Par);
Выходной параметр:

Par " указатель на структуру параметров 
диаметрального размера RDimParam.

Возвращаемое значение:

указатель на диаметральный размер " в случае удачного завершения,
0 " в случае неудачи.

ksAxisLine  Создать объект "Осевая линия"
Справка системы КОМПАС...
KOMPAS.chm::/CM_AXEDLINESEG.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksAxisLine.
Синтаксис:
reference ksAxisLine (AxisLineParam * param);
Входные параметры:

param " указатель на структуру параметров осевой линии 
AxisLineParam.

Возвращаемое значение:

указатель на объект "Осевая линия" " в случае успешного завершения,
0 " в случае неудачи.
4481



ksCentreMarker  Создать обозначение центра
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_CENTRE_MARKER.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksCentreMarker.
Синтаксис:
reference ksCentreMarker (CentreParam * par);
Выходной параметр:

par " указатель на структуру параметров обозначения 
центра CentreParam.

Возвращаемое значение:

указатель на обозначение центра " в случае удачного завершения,
0 " в случае неудачи.

ksCreateQualityIterator  Создать итератор по 
квалитетам
Аналог данной функции при использовании Automation " метод
ksIterator::ksCreateQualityIterator
Синтаксис:
reference ksCreateQualityIterator (unsigned char system,
unsigned char withLimitation);
Входные параметры:

system " система допуска
1 " система отверстия, 
0 " система вала,

withLimitation " признак учета ограничений, наложенных в системе:
0 " без учёта ограничений, 
1 " с учётом ограничений.

Возвращаемое значение:

указатель на итератор " в случае успешного завершения,
0 " в случае неудачи.
4482



ksExecQualityDialog  Вызов диалога Выбор квалитета
Аналог данной функции при использовании Automation " метод
KompasObject::ksExecQualityDialog .
Синтаксис:
int LIB_FUNC ksExecQualityDialog( void *HWindow, char * curQual, double * dimValue, 
                                                 short inMM, QualityContensParam * param );
Входные параметры:

HWindow " дескриптор окна,
curQual " текущее значение квалитета,
dimValue " значение для которого требуется выбрать квалитет или NULL,
inMM " размерность параметров dimValue, high, low :

1 " миллиметры, 
0 " единицы измерения текущего документа.

Выходной параметр:

param " указатель на структуру параметров квалитета QualityContensParam.

Возвращаемое значение:

1 " в случае выбора квалитета,
0 " в случае отмены выбора или ошибки.

ksExecQualityDialogW  Вызов диалога Выбор квалитета 
(Unicode)
Аналог данной функции при использовании Automation " метод
KompasObject::ksExecQualityDialog .
Синтаксис:
int LIB_FUNC ksExecQualityDialogW( void *HWindow, LPWSTR curQual, double * dimValue, 
                                                 short inMM, QualityContensParamW * param );
Входные параметры:

HWindow " дескриптор окна,
curQual " текущее значение квалитета,
dimValue " значение, для которого требуется выбрать квалитет или NULL,
inMM " размерность параметров dimValue, high, low :

1 " миллиметры, 
0 " единицы измерения текущего документа.

Выходной параметр:
4483



param " указатель на структуру параметров квалитета QualityContensParamW.

Возвращаемое значение:

1 " в случае выбора квалитета,
0 " в случае отмены выбора или ошибки.

ksGetLeaderShelfLength  Получить длину полки линии
выноски и координаты ее конечной точки в системе 
координат вида
Справка системы КОМПАС...
KOMPAS.chm::/CM_LEADER.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetLeaderShelfLength.
Синтаксис:
double ksGetLeaderShelfLength (long leader, double *x, double *y);
Входные параметры:

leader " указатель на линию"выноску.

Выходные параметры:

x " координата конечной точки полки линии выноски по оси X,
y " координата конечной точки полки линии выноски по оси Y.

ksGetShelfPoint  Получить координаты начала и конца 
выносной полки и ножки
Справка системы КОМПАС...
KOMPAS.chm::/CM_LEADER.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetShelfPoint.
Синтаксис:
int LIB_FUNC ksGetShelfPoint( reference p, int index, double *x, double *y, int paramType );
double ksGetLeaderShelfLength (long leader, double *x, double *y);
4484



Входные параметры:

p " указатель на объект (размер или линию"выноску),
index " индекс точки.

Значения индекса:
Для линии с ножкой:
             1 __ 2
             /
        0 /    
Для линии без ножки (с выносной полкой на продолжении выносной 
линии):
          0 __ 1  

Точка 0 примыкает к выносной линии;
paramType " тип параметров, задает систему координат:

ALLPARAM " в системе координат владельца;
SHEET_ALLPARAM " в системе координат листа;
VIEW_ALLPARAM " в системе координат вида.

Выходные параметры:

x, y " координаты точки.

Возвращаемое значение:

TRUE " в случае успешного завершения,
FALSE " в случае неудачи.

ksGetQualityContensParam  Получить параметры 
квалитета
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/185_23_4_Vybor_kvaliteta.htm
Аналог данной функции при использовании Automation " метод
KompasObject::ksGetQualityContensParam.
Синтаксис:
int ksGetQualityContensParam (const char* name,
QualityContensParam* param,
unsigned char inMM);
Входные параметры:
4485



inMM " размерность параметров minLimit, maxLimit, high, low :
1 " миллиметры, 
0 " единицы измерения текущего документа.

Выходной параметр:

param " указатель на структуру параметров квалитета 
QualityContensParam.

name " поле допуска.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание.
При использовании Unicode следует использовать функцию
ksGetQualityContensParamW.

ksGetQualityContensParamW  Получить параметры 
квалитета (Unicode)
Справка системы КОМПАС...
KOMPAS.chm::/185_23_4_Vybor_kvaliteta.htm
Аналог данной функции при использовании Automation " метод
KompasObject::ksGetQualityContensParam.
Синтаксис:
int LIB_FUNC ksGetQualityContensParamW (LPWSTR* name,
QualityContensParamW* param,
unsigned char inMM);
Входные параметры:

inMM " размерность параметров minLimit, maxLimit, high, low :
1 " миллиметры, 
0 " единицы измерения текущего документа.

Выходной параметр:

param " указатель на структуру параметров квалитета 
QualityContensParam.

name " поле допуска.

Возвращаемое значение:
4486



1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание.
При использовании ANSI следует использовать функцию ksGetQualityContensParam.

ksGetQualityDefects  Получить отклонения
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/185_23_4_Vybor_kvaliteta.htm
Аналог данной функции при использовании Automation " метод
KompasObject::ksGetQualityDefects.
Синтаксис:
int ksGetQualityDefects (const char *name, 
double dimValue,
double *high, 
double *low, 
unsigned char inMM);
Входные параметры:

dimValue " значение размера,
inMM " размерность параметров dimValue, high, low:

1 " миллиметры, 
0 " единицы измерения текущего документа.

Выходные параметры:

name " поле допуска, (например, "H7"),
high " верхнее отклонение,
low " нижнее отклонение.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание.
При использовании Unicode следует использовать функцию ksGetQualityDefectsW.
4487



ksGetQualityDefectsW  Получить отклонения (Unicode)
Справка системы КОМПАС...
KOMPAS.chm::/185_23_4_Vybor_kvaliteta.htm
Аналог данной функции при использовании Automation " метод
KompasObject::ksGetQualityDefects.
Синтаксис:
int LIB_FUNC ksGetQualityDefectsW (const LPWSTRname, 
double dimValue,
double *high, 
double *low, 
unsigned char inMM);
Входные параметры:

dimValue " значение размера,
inMM " размерность параметров dimValue, high, low:

1 " миллиметры, 
0 " единицы измерения текущего документа.

Выходные параметры:

name " поле допуска, (например, "H7"),
high " верхнее отклонение,
low " нижнее отклонение.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание.
При использовании ANSI следует использовать функцию ksGetQualityDefects.

ksMoveQualityIterator Двигаться по квалитетам
Аналог данной функции при использовании Automation " метод
ksIterator::ksMoveQualityIterator.
Синтаксис:
int ksMoveQualityIterator (reference iterator, 
QualityContensParam* param, 
unsigned char inMM, 
unsigned char ch);
Входные параметры:
4488



inMM " размерность параметров minLimit, maxLimit, high, low:
1 " миллиметры, 
0 " единицы измерения текущего документа.

ch " направление перемещения итератора:
F " первый квалитет,
N " следующий квалитет.

Выходные параметры:

param " указатель на структуру параметров квалитета 
StructQualityContensParam.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

ksMoveQualityIteratorW  Двигаться по квалитетам 
(Unicode)
Аналог данной функции при использовании Automation " метод
ksIterator::ksMoveQualityIterator.
Синтаксис:
int LIB_FUNC ksMoveQualityIteratorW (reference iterator, 
QualityContensParamW* param, 
unsigned char inMM, 
unsigned char ch);
Входные параметры:

inMM " размерность параметров minLimit, maxLimit, high, low :
1 " миллиметры, 
0 " единицы измерения текущего документа.

ch " направление перемещения итератора:
F " первый квалитет,
N " следующий квалитет.

Выходные параметры:

param " указатель на структуру параметров 
квалитета StructQualityContensParam.

Возвращаемое значение:

1 " в случае успешного завершения,
4489



0 " в случае неудачи.

ksOrdinatedDimension  Проставить размер высоты
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_ORDINATE_DIM.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksOrdinatedDimension.
Синтаксис:
reference ksOrdinatedDimension (OrdinatedDimParam *ordPar);
Выходной параметр:

ordPar " указатель на структуру параметров размера высоты 
OrdinatedDimParam.

Возвращаемое значение:

указатель на размер " в случае удачного завершения,
высоты
0 " в случае неудачи.

ksRemoteElement  Создать объект "Выносной элемент"
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksRemoteElement.
Синтаксис:
reference ksRemoteElement (RemoteElementParam * par);
Входные параметры:

par " структура параметров выносного элемента 
RemoteElementParam,

Возвращаемое значение:

указатель на объект " в случае успешного завершения,
"Выносной элемент"

Примечание:
Создается новый объект "Выносной элемент" в текущем виде и в текущем документе.
4490



ksSetMaterialParam  Установить параметры материала 
в чертеже
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksSetMaterialParam.
Синтаксис:
int ksSetMaterialParam (reference material, double density);
Входные параметры:

material " наименование материала, динамический массив 
строк текста (TEXT_LINE_ARR),

density " плотность (г/куб. мм).

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

ksSpecRough  Проставить знак неуказанной 
шероховатости в чертеже
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_ROUGH.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksSpecRough.
Синтаксис:
reference LIB_FUNK ksSpecRough (SpecRoughParam * par);
Выходной параметр:

par " указатель на структуру параметров знака 
неуказанной шероховатости SpecRoughParam.

Возвращаемое значение:

указатель на знак неуказанной шероховатости " в случае удачного завершения,
0 " в случае неудачи.

Примечание.
При использовании Unicode следует использовать функцию ksSpecRoughW.
4491



ksSpecRoughW  Проставить знак неуказанной 
шероховатости в чертеже (Unicode)
Справка системы КОМПАС...
KOMPAS.chm::/CM_ROUGH.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksSpecRough.
Синтаксис:
reference LIB_FUNK ksSpecRoughW (SpecRoughParamW * par);
Выходной параметр:

par " указатель на структуру параметров знака 
неуказанной шероховатости SpecRoughParam.

Возвращаемое значение:

указатель на знак неуказанной шероховатости " в случае удачного завершения,
0 " в случае неудачи.

Примечание.
При использовании ANSI следует использовать функцию ksSpecRough.

ksTolerance  Проставить обозначение допуска формы
Справка системы КОМПАС...
KOMPAS.chm::/CM_FORMTOLERANCE.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksTolerance.
Синтаксис:
int ksTolerance (ksToleranceParam *par);
Выходной параметр:

par " указатель на структуру параметров 
обозначения допуска формы ksTolerancePar.

Возвращаемое значение:

указатель на допуск формы " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
4492



1.  Допуск формы является составным объектом, состоящим из таблицы (в общем случае
10х10) и двух опор. Каждая ячейка таблицы имеет свой номер. Нумерация идет слева на"
право и сверху вниз.

2.  Номер ячейки задается функцией ColumnNumber, а текст ячейки определяется фун"
кцией TextLine (первые два параметра " SPECIAL_SYMBOL и SPECIAL);

Leader  Создать линиювыноску
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_LEADER.htm
Аналог данной функции при использовании Automation " метод ksDocument2D::ksLeader.
Синтаксис:
reference Leader (LeaderParam *leaderPar);
Выходной параметр:

leaderPar " указатель на структуру параметров линии"
выноски LeaderParam.

Возвращаемое значение:

указатель на линию"выноску " в случае удачного завершения,
0 " в случае неудачи.

LinDimension  Проставить линейный размер
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_DIML.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksLinDimension.
Синтаксис:
reference LinDimension (LDimParam *Par);
Выходной параметр:

Par " указатель на структуру параметров линейного 
размера LdimParam.

Возвращаемое значение:
4493



указатель на линейный размер " в случае удачного завершения,
0 " в случае неудачи.

LinBreakDimension  Проставить линейный размер с 
обрывом
Справка системы КОМПАС...
KOMPAS.chm::/CM_CUT_DIML.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksLinBreakDimension.
Синтаксис:
reference LinBreakDimension (LBreakDimParam *linPar);
Выходной параметр:

linPar " указатель на структуру параметров линейного размера 
с обрывом LBreakDimParam.

Возвращаемое значение:

указатель на линейный размер с " в случае удачного завершения,
обрывом
0 " в случае неудачи.

MarkerLeader  Создать линиювыноску для 
обозначения маркировки
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/obozn_priemy_raboty.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksMarkerLeader.
Синтаксис:
reference MarkerLeader (MarkerLeaderParam *leaderPar);
Выходной параметр:

leaderParam " указатель на структуру параметров линии"выноски 
для обозначения маркировки MarkerLeaderParam.

Возвращаемое значение:

указатель на линию"выноску для " в случае удачного завершения,
обозначения маркирования
4494



0 " в случае неудачи.

OpenTechnicalDemand  Открыть технические 
требования
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/413_Glava47_Tekhnicheskie_trebo.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksOpenTechnicalDemand
Синтаксис:
int OpenTechnicalDemand (reference pGab);
Входные параметры:

pGab " указатель на динамический массив параметров листов 
технических требований типа RECT_ARR.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Следующие далее функции до вызова CloseTechnicalDemand определяют текст техниче"
ских требований. Параметр pGab определяет массив габаритных прямоугольников стра"
ниц технических требований неопределенной длины. Если pGab = 0, то технические тре"
бования размещаются на одной странице автоматически.

PositionLeader  Создать позиционную линиювыноску
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_POSITIONLEADER.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksPositionLeader.
Синтаксис:
reference PositionLeader(PosLeaderParam *leaderPar);
Выходной параметр:

posLeaderParam " указатель на структуру параметров позиционной 
линии"выноски PosLeaderParam.
4495



Возвращаемое значение:

указатель на позиционную линию"выноску " в случае удачного завершения,
0 " в случае неудачи.

RadDimension  Проставить радиальный размер
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_DIMR.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksRadDimension.
Синтаксис:
reference RadDimension (RDimParam *Par);
Выходной параметр:

Par " указатель на структуру параметров 
радиального размера RDimParam.

Возвращаемое значение:

указатель на радиальный размер " в случае удачного завершения,
0 " в случае неудачи.

RadBreakDimension  Проставить радиальный размер с 
изломом
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_DIMR_WITH_BREAK.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksRadBreakDimension.
Синтаксис:
reference RadBreakDimension (RBreakDimParam *Par);
Выходной параметр:

Par " указатель на структуру параметров радиального размера 
с изломом RBreakDimParam.

Возвращаемое значение:
4496



указатель на радиальный размер с изломом " в случае удачного завершения,
0 " в случае неудачи.

Rough  Проставить обозначение шероховатости
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_ROUGH.htm
Аналог данной функции при использовании Automation " метод ksDocument2D::ksRough.
Синтаксис:
reference Rough (RoughParam *roughPar);
Выходной параметр:

roughPar " указатель на структуру параметров 
обозначения шероховатости....

Возвращаемое значение:

указатель на обозначение шероховатости " в случае удачного завершения,
0 " в случае неудачи.

SpecRough  Задать шероховатость неуказанных 
поверхностей
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_ROUGH.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksSpecRough.
Синтаксис:
int SpecRough (unsigned char type, unsigned char t, char * s);
Входные параметры:

type " тип знака
0 " вид обработки не устанавливается
1 " обработка удалением слоя материала
2 " обработка без удаления слоя материала

t " наличие знака в скобках (1 " есть, 0 " нет).

Выходные параметры:

s " строка текста.
4497



Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Tolerance  Проставить обозначение допуска формы
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_FORMTOLERANCE.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksTolerance.
Синтаксис:
int Tolerance (ToleranceParam *par);
Выходной параметр:

par " указатель на структуру параметров обозначения 
допуска формы ToleranceParam.

Возвращаемое значение:

указатель на допуск формы " в случае удачного завершения,
0 " в случае неудачи.

Примечание:

1.  Допуск формы является составным объектом, состоящим из таблицы (в общем случае
10х10) и двух опор. Каждая ячейка таблицы имеет свой номер. Нумерация идет слева на"
право и сверху вниз.

2.  Номер ячейки задается функцией ColumnNumber, а текст ячейки определяется фун"
кцией TextLine (первые два параметра " SPECIAL_SYMBOL и SPECIAL);

ViewPointer  Создать стрелку направления взгляда
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_VIEWPOINTER.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksViewPointer.
Синтаксис:
reference ViewPointer (ViewPointerParam *par);
Выходной параметр:
4498



par " указатель на структуру параметров стрелки направления 
взгляда ViewPointerParam.

Возвращаемое значение:

указатель на стрелку взгляда " в случае удачного завершения,
0 " в случае неудачи.

Примечание.
При использовании Unicode следует использовать функцию ViewPointerW.

ViewPointerW  Создать стрелку направления взгляда
Справка системы КОМПАС...
KOMPAS.chm::/CM_VIEWPOINTER.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksViewPointer.
Синтаксис:
reference ViewPointerW (ViewPointerParamW *par);
Выходной параметр:

par " указатель на структуру параметров стрелки 
направления взгляда ViewPointerParam.

Возвращаемое значение:

указатель на стрелку взгляда " в случае удачного завершения,
0 " в случае неудачи.

Примечание.
При использовании ANSI следует использовать функцию ViewPointer.

Работа с группами объектов
Функции работы с группами объектов
Справка системы КОМПАС...
KOMPAS.chm::/DLG_STORE_GROUP.htm
Операции редактирования можно выполнять с выделенными объектами. После выделе"
ния их можно объединить в отдельную группу для дальнейшего использования. Фун"
кции данного раздела позволяют выделить объекты, объединить их в группу на текущий
сеанс работы или с последующей записью в документ, а также обрабатывать имеющиеся
в документе группы объектов.
4499



AddObjGroup  Добавить объект в группу
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/DLG_STORE_GROUP.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksAddObjGroup.
Синтаксис:
int AddObjGroup (reference group, reference obj);
Входные параметры:

group " указатель на группу,
obj " указатель на добавляемый объект.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Если указатель на группу равен нулю, то добавление производится в группу выделения
(т.е. происходит выделение объекта).

ClearGroup  Очистить группу объектов
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/DLG_STORE_GROUP.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksClearGroup.
Синтаксис:
int ClearGroup (reference group);
Входные параметры:

group " указатель на очищаемую группу 
(0 " очищается группа выделения),

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Описание:
4500



1.  Все объекты исключаются из группы. Если группа создавалась как временная, то при
этом все ее объекты автоматически удаляются.

2.  Если указатель group равен нулю, то очистится группа выделения (снимется текущее вы"
деление объектов).

EndGroup  Завершить создание группы объектов
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/DLG_STORE_GROUP.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksEndGroup.
Синтаксис:
void EndGroup (void);
Возвращаемое значение:

1 " в случае успеха,
0 " в случае неудачи.

Примечание:
Завершить создание группы объектов, начатое функцией NewGroup.

ExcludeObjGroup  Исключить объект из группы
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/DLG_STORE_GROUP.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksExcludeObjGroup.
Синтаксис:
int ExcludeObjGroup (reference group, reference obj);
Входные параметры:

group " указатель на группу,
obj " указатель на исключаемый объект.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
4501



Если указатель на группу равен нулю, то исключение производится из группы выделения
(т.е. снимается выделение объекта чертежа). Если объект создавался в режиме форми"
рования временной группы, то при исключении он автоматически удаляется.

ExistGroupObj  Проверить группу на наличие объектов
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/DLG_STORE_GROUP.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksExistGroupObj.
Синтаксис:
int ExistGroupObj (reference group);
Входной параметр:

group " указатель на группу.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Если указатель группы равен нулю, то проверяется группа выделения (есть ли выделен"
ные объекты документа).

GetGroup  Получить указатель на группу по ее имени
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/DLG_STORE_GROUP.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetGroup.
Синтаксис:
reference GetGroup (char *name);
Входной параметр:

name " имя группы.

Возвращаемое значение:

указатель на группу " в случае удачного завершения,
0 " в случае неудачи.
4502



Примечание.
При использовании Unicode следует использовать функцию GetGroupW.

GetGroupW  Получить указатель на группу по ее имени 
(Unicode)
Справка системы КОМПАС...
KOMPAS.chm::/DLG_STORE_GROUP.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetGroup.
Синтаксис:
reference LIB_FUNC GetGroupW (LPWSTR name);
Входной параметр:

name " имя группы.

Возвращаемое значение:

указатель на группу " в случае удачного завершения,
0 " в случае неудачи.

Примечание.
При использовании ANSI следует использовать функцию GetGroup.

ksClearGroup  Очистить группу
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/DLG_STORE_GROUP.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksClearGroup.
Синтаксис:
int ksClearGroup (reference g, 
unsigned char deleteTmp);
Входные параметры:

g " указатель на очищаемую группу
(0 " очищается группа выделения),

deleteTmp " признак удаления временных элементов: 
1 " временные элементы удаляются,
0 " временные элементы сохраняются.
4503



Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

ksGetGroupName  Получить имя группы по указателю на 
группу
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/DLG_STORE_GROUP.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetGroupName.
Синтаксис:
int ksGetGroupName (reference gr,
char *name,
int size);
Входные параметры:

gr " указатель на группу,
name " указатель строки для имени группы,
size " размер строки.

Выходной параметр:

"1 " у группы есть имя, но размер size меньше требуемой 
длины имени группы (имя не передается),

0 " ошибка указания группы,
1 " именная группа (имя есть),
2 " рабочая группа (имени нет).

Возвращаемое значение:

строка с именем группы.

Примечание.
При использовании Unicode следует использовать функцию ksGetGroupNameW.
4504



ksGetGroupNameW  Получить имя группы по указателю 
на группу (Unicode)
Справка системы КОМПАС...
KOMPAS.chm::/DLG_STORE_GROUP.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetGroupName.
Синтаксис:
int LIB_FUNC ksGetGroupNameW (reference gr,
LPWSTR name,
int size);
Входные параметры:

gr " указатель на группу,
name " указатель строки для имени группы,
size " размер строки.

Выходной параметр:

"1 " у группы есть имя, но размер size меньше требуемой 
длины имени группы (имя не передается),

0 " ошибка указания группы,
1 " именная группа (имя есть),
2 " рабочая группа (имени нет).

Возвращаемое значение:

строка с именем группы.

Примечание.
При использовании ANSI следует использовать функцию ksGetGroupName.

ksMakeEncloseContoursEx  Получить группу объектов, 
охватывающих заданную точку
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksMakeEncloseContoursEx.
Синтаксис:
reference ksMakeEncloseContoursEx( reference gr,
double x,
double y,
int forHatch );
Входные параметры:
4505



gr " указатель на временную группу или 0, если требуются контуры в 
текущем виде,

x, y " координаты точки внутри охватываемых контуров,
forHatch " признак создания контура для штриховки.

Возвращаемое значение:

указатель на временную группу контуров " в случае удачного завершения,
0 " если контуров не нашлось или в случае 

неудачи.

Примечание:
forHatch == 1 " При cоздании контуров для штриховки используются объекты со стилем
основная и утолщенная, объекты других стилей не учитываются.
forHatch == 0 " При cоздании контура с использованием любых стилей линий.

ksViewGetObjectArea  Получить группу графических 
объектов, определяющих область выделения, используя 
визуальный процесс
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/DLG_STORE_GROUP.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksViewGetObjectArea.
Синтаксис:
reference ksViewGetObjectArea();
Возвращаемое значение:

указатель на временную группу " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
Так как сиcтема может работать только с одним процессом, нужно завершить другие
процессные функции: Cursor, Placement, CommandWindow, ksEditViewObject.

NewGroup  Создать новую группу объектов
Пример...
4506



Справка системы КОМПАС...
KOMPAS.chm::/DLG_STORE_GROUP.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksNewGroup.
Синтаксис:
reference NewGroup (int type);
Входной параметр:

type " тип группы: 
0 " модельная, 
1 " временная.

Возвращаемое значение:

указатель на группу " в случае удачного завершения,
0 " в случае неудачи.

Примечание:

1.  В модельной группе лежат объекты, которые уже созданы в документе. Во временной
группе могут лежать временные и существующие объекты.

2.  Если для временной группы не будет вызван функция StoreTmpGroup, то временные
объекты группы будут уничтожены по окончании работы библиотеки.

3.  Создаваемые в дальнейшем до вызова функции EndGroup объекты чертежа записыва"
ются в модель или во временный список объектов (например, для фантомной прорисов"
ки при вводе).

4.  Для дальнейшей обработки группы используются те же функции редактирования, что и
для отдельных объектов, так как указатель на группу ничем не отличается от указателя
на отдельный объект (оба они имеют тип reference).

5.  Группа может объединять объекты вида, виды и слои.
6.  При создании новой группы необязательно закрывать предыдущую (т.е. поддерживает"

ся вложенность групп).

SaveGroup  Сохранить группу объектов в документе
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/DLG_STORE_GROUP.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksSaveGroup.
Синтаксис:
int SaveGroup (reference group, char *name);
Входные параметры:
4507



group " указатель на группу,
name " имя сохраняемой группы.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Данный метод действителен только для модельной группы. После его выполнения груп"
па автоматически сохраняется в чертеже при его записи. В противном случае группа дей"
ствительна только в текущем сеансе работы. Если указатель группы равен нулю, то со"
храняется группа селектирования (выделенные объекты документа).

2.  При использовании Unicode следует использовать функцию SaveGroupW.

SaveGroupW  Сохранить группу объектов в документе 
(Unicode)
Справка системы КОМПАС...
KOMPAS.chm::/DLG_STORE_GROUP.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksSaveGroup.
Синтаксис:
int LIB_FUNC SaveGroup (reference group, LPWSTR name);
Входные параметры:

group " указатель на группу,
name " имя сохраняемой группы.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Данный метод действителен только для модельной группы. После его выполнения груп"
па автоматически сохраняется в чертеже при его записи. В противном случае группа дей"
ствительна только в текущем сеансе работы. Если указатель группы равен нулю, то со"
храняется группа селектирования (выделенные объекты документа).

2.  При использовании ANSI следует использовать функцию SaveGroup.
4508



SelectGroup  Автоматически сформировать группу 
объектов
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/DLG_STORE_GROUP.htm

Kоманды выделения объектов рамкой...
KOMPAS.chm::/99_8_5_2_Vydelenie_obwektov_s_p.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksSelectGroup.
Синтаксис:
int SelectGroup (reference group, int selectMode, double x1, double y1, double x2, double y2);
Входные параметры:

group " указатель на группу,
selectMode " тип выделения:

1 " объекты внутри прямоугольника""ловушки",
2 " объекты снаружи прямоугольника""ловушки",
3 " объекты, целиком или частично попавшие в 
прямоугольник""ловушку".

x1, y1 " координаты левой нижней вершины прямоугольника"
"ловушки",

x2, y2 " координаты правой верхней вершины прямоугольника"
"ловушки".

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Если указатель на группу равен нулю, то добавление производится в группу выделения
(т.е. происходит выделение объектов документа).

StoreTmpGroup  Вставить временную группу в документ 
(группа "рассыпается")
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/DLG_STORE_GROUP.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksStoreTmpGroup.
Синтаксис:
4509



int StoreTmpGroup (reference g);
Входной параметр:

g " указатель на группу.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Временные объекты не записываются в документ и на экране не отображаются. Они со"
храняются только до конца работы создающей их библиотечной команды. Временная
группа чаще всего служит для отрисовки фантомного изображения и используется в ка"
честве параметров в функциях Placement и Cursor. Функция StoreTmpGroup записывает
все объекты временной группы в модель (т.е. фиксирует ее). Сама же группа получает
статус постоянной.

Навигация по графическому документу
Функции навигации
Функции данного раздела позволяют перемещаться по объектам графического доку"
мента.

CreateIterator  Создать блок параметров навигации по 
объектам
Пример...
Аналог данной функции при использовании Automation " метод ksIterator::ksCreateIterator
Синтаксис:
reference CreateIterator(int searchType, reference parent);
Входные параметры:

searchType " тип поиска объекта
parent " указатель на объект (для движения по группе, внутри 

макроэлемента, по слою).

Типы объектов и интерфейсы...
Возвращаемое значение:

указатель на найденный " в случае успешного завершения,
объект
0 " в случае неудачи.

Описание:
4510



1.  Передвижение по модели документа (навигация) производится в соответствии с усло"
виями, заданными в специальном блоке параметров. Он содержит тип движения, опре"
деляющий режим перемещения (например, по видам, слоям, всем объектам, объектам
заданного типа и т.д.) и указатель комплексного объекта (макроэлемента, слоя, группы)
при перемещении по составляющим его объектам. Итератор привязан к конкретному ре"
жиму графического редактора (например, документу, виду), поэтому Вы не сможете ис"
пользовать один и тот же итератор для навигации в разных видах, штампах и т.п. Итера"
тор сохраняет свое действия до окончания сеанса работы с библиотекой. При переходе
внутри библиотечной функции под управление КОМПАС"ГРАФИК, после возврата значе"
ние всех итераторов будет сброшено.

2.  Итератор работает с атрибутами активного документа.
В случае движения по всем объектам или при движении по объектам определенного ти"
па, можно определить порядок выдачи не только в порядке создания объектов как было
прежде, но и в порядке отрисовки.
Для этого searchType нужно задать с минусом.
Например:
MACRO_OBJ " движение по макроэлементам в порядке создания;
"MACRO_OBJ " движение по макроэлементам в порядке отрисовки.
Для движения по всем объектам в порядке отрисовки в   таблице Типы графических до"
кументов служит константа ALL_OBJ_SHOW_ORDER "1000 " все объекты, которые могут
входить в вид, в порядке отрисовки.
Например:
ALL_OBJ " движение по всем объектам в порядке создания.
ALL_OBJ_SHOW_ORDER " движение по всем объектам в порядке отрисовки.

DeleteIterator  Удалить блок параметров навигации по 
объектам
Пример...
Аналог данной функции при использовании Automation " метод
ksIterator::ksDeleteIterator.
Синтаксис:
int DeleteIterator (reference iterator);
Входной параметр:

iterator " указатель на итератор.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.
4511



FindObj  Найти ближайший к заданной точке объект 
вида
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksFindObj.
Синтаксис:
reference FindObj (double x, 
double y,
double dist);
Входные параметры:

x, y " координаты точки,
dist " размер стороны квадрата""ловушки" с центром в указанной точке.

Возвращаемое значение:

указатель на найденный объект вида " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Зона поиска " квадрат с указанной стороной и центром.
2.  Если значение dist равно MAXDOUBLE, выполняется поиск ближайшего к указанной точ"

ке объекта без ограничения зоны поиска.
3.  Функцию FindObj можно использовать для поиска объектов внутри макроэлемента.

Для этого макроэлемент должен быть открыт на редактирование функцией
ksOpenMacro.
Пример:
ksOpenMacro(obj);
   long obj_i=FindObj(x, y, AXIS_FIND_SENS);
   if( ExistObj(obj_i) )
       LightObj(obj_i, 1);
EndObj();
При этом, если для макроэлемента задана система координат (см. SetMacroPlacement),
то координаты в FindObj должны передаваться в системе координат макроэлемента.
Пересчитать координаты в систему координат макроэлемента можно через функцию
ksPointIntoMtr. Для этого нужно функцией ksMtr создать матрицу преобразования коор"
динат.
Пример:
ksMtr(xp, yp, ang, 1,1); // xp, yp, ang, scaleX, scaleY, " параметры Placement макроэлемен"
та.
  ksPointIntoMtr (x, y, &xn, &yn);
4512



EndMtr();

GetObjGabaritRect  Получить габаритный 
прямоугольник объекта
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetObjGabaritRect.
Синтаксис:
int GetObjGabaritRect (reference p, RectParam *par); 
Входные параметры:

p " указатель на объект,
par " указатель на структуру размеров габаритного 

прямоугольника RectParam.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Габаритный прямоугольник возвращается в координатах листа.

GetViewObjCount  Получить количество объектов вида
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetViewObjCount.
Синтаксис:
long GetViewObjCount (reference p);
Входной параметр:

p " указатель на вид.

Возвращаемое значение:

количество объектов в виде " в случае удачного завершения,
"1 " в случае неудачи.

Примечание:
В случае, если p=0, возвращается число объектов текущего вида или фрагмента.
4513



MoveIterator  Переместить итератор 
(позиционироваться на объекте)
Пример...
Аналог данной функции при использовании Automation " метод ksIterator::ksMoveIterator
Синтаксис:
reference MoveIterator (reference iterator,
unsigned char type);
Входной параметр:

iterator " указатель на итератор,
type " направление перемещения итератора:

F " первый объект,
N " следующий объект.

Возвращаемое значение:

указатель на объект " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Функция перемещает текущий указатель итератора (блока параметров навигации)
iterator на очередной объект модели. Режим позиционирования (тип объектов, участву"
ющих в поиске) определяются при создании итератора.
При позиционировании на именованную группу она автоматически становится текущей
(рабочей). К ней будут относиться операции добавления и исключения объектов (при
исключении всех объектов из именованной группы она автоматически удаляется).

KeepReference  Запретить удалять временный объект 
после завершения команды библиотеки
Синтаксис:
int     LIB_FUNC  KeepReference( reference r );
Входной параметр:

r " указатель на графический объект или группу.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

ReleaseReference  Освободить указатель на объект
Пример...
4514



Аналог данной функции при использовании Automation " метод
ksDocument2D::ksReleaseReference.
Синтаксис:
int ReleaseReference (reference p); 
Входной параметр:

p " указатель на объект.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Не временный объект не уничтожается. В результате таблица объектов сокращается, а
операции, связанные с перебором объектов, ускоряются.

ksShowHideTmpObj  Скрыть /Показать временный 
объект в документе
Синтаксис:
int     LIB_FUNC ksShowHideTmpObj( reference ref,
                                   int       show );
Входные параметры:

 ref " указатель на объект,
show "значение из перечисления ksShowHideTmpObjTypeEnum

ksTmpObjHide " скрыть объект,
ksTmpObjShow " показать временный объект как обычный объект,
ksTmpObjShowPhantom " показать временный объект как фантом.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

ksSetLightObjType  Установить тип подсветки объекта 
(light=1  красный) или (light=0  зеленый)
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksSetLightObjType.
Синтаксис:
4515



int     LIB_FUNC ksSetLightObjType( reference ref,    
                                    unsigned char light ); 
Входные параметры:

 ref " указатель на объект,
light " light " (light=1 " красный) или (light=0 " зеленый).

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

ksGetObjectsNameByType  Вернуть имя объекта по его 
типу. Множественное число
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetObjectsNameByType.
Синтаксис:
int LIB_FUNC ksGetObjectsNameByType( int type, char * name, unsigned int bufLen );
Входные параметры:

type " тип объекта из перечисления DrawingObjectTypeEnum,
bufLen " размер буфера name в символах.

Выходные параметры:

name " Строковое имя типа объекта во множественном числе " 
отрезки, дуги и т.д,

  name " Строковое имя типа объекта во множественном числе " отрезки, дуги и т.д.
Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

ksGetObjectsNameByTypeW  Вернуть имя объекта по его 
типу. Множественное число. Unicode
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetObjectsNameByType.
Синтаксис:
int LIB_FUNC ksGetObjectsNameByTypeW( int type, LPWSTR * name, unsigned int bufLen );
Входные параметры:
4516



type " тип объекта из перечисления DrawingObjectTypeEnum,
bufLen " размер буфера name в символах.

Выходные параметры:

name " Строковое имя типа объекта во множественном числе " 
отрезки, дуги и т.д,

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

ksGetObjectNameByType  Вернуть имя объекта по его 
типу
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetObjectsNameByType.
Синтаксис:
int LIB_FUNC ksGetObjectNameByType( int type, char * name, unsigned int bufLen );
Входные параметры:
 

type " тип объекта из перечисления DrawingObjectTypeEnum,
bufLen " размер буфера name в символах.

Выходные параметры:

name " Строковое имя типа объекта во множественном числе " 
отрезки, дуги и т.д,

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

ksGetObjectNameByTypeW  Вернуть имя объекта по его 
типу. Unicode
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetObjectsNameByType.
Синтаксис:
int LIB_FUNC ksGetObjectNameByType( int type, LPWSTR * name, unsigned int bufLen );

Входные параметры:
4517



type " тип объекта из перечисления DrawingObjectTypeEnum,
bufLen " размер буфера name в символах.

Выходные параметры:

name " Строковое имя типа объекта во множественном числе " 
отрезки, дуги и т.д,

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Функции работы с параметрическими 
переменными и связями
Функции параметризации и ограничений
Функции данного раздела позволяют управлять параметрическими связями и ограниче"
ниями.

ksDestroyObjConstraint  Удалить параметрическую 
связь или ограничение, наложенные на указанный 
объект
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksDestroyObjConstraint.
Синтаксис:
int ksDestroyObjConstraint (reference obj, 
ConstraintParam *par);
Входные параметры:

obj " указатель на объект,
par " указатель на структуру параметрической связи

или ограничения ConstraintParam...

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.
4518



ksGetDimensionVariableName  Получить имя 
параметрической переменной, связанной с размером
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetDimensionVariableName.
Синтаксис:
int ksGetDimensionVariableName (reference dimObj,
char * varName,
int size);
Входной параметр:

dimObj " указатель на размер.

Выходной параметр:

varName " имя переменной, если размеру поставлена в 
соответствие переменная,

size " размер буфера, выделенного под имя переменной,
пустая строка " если размеру не поставлена в соответствие 

переменная 
или в случае неудачи.

Возвращаемое значение:

1 " в случае успеха,
0 " в случае неудачи.

ksGetDocVariableArray  Получить массив 
параметрических переменных графического документа 
или вставки фрагмента
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetDocVariableArray.
Синтаксис:
reference ksGetDocVariableArray (reference p);
Входной параметр:

p " указатель на документ или вставку фрагмента.

Возвращаемое значение:
4519



указатель на динамический массив структур " в случае успеха,
VariableParam
0 " в случае неудачи.

ksGetObjConstraints  Получить параметрические связи и 
ограничения, наложенные на указанный объект
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/476_Glava55_Nalozhenie_svjazej_.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetObjConstraints.
Синтаксис:
reference ksGetObjConstraints (reference obj);
Входной параметр:

obj " указатель на объект,

Возвращаемое значение:

указатель на структуру параметров связей и " в случае успеха,
ограничений ConstraintParam типа 
CONSTRAINT_ARR.
0 " в случае неудачи.

ksParametrizeObjects  Параметризовать группу 
объектов
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksParametrizeObjects.
Синтаксис:
int ksParametrizeObjects (reference group, IParametrizeParam* param);
Входные параметры:

group " указатель на группу объектов,
param " параметры параметризации объектов.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
4520



1.  Если group = 0, параметризуется группа выделенных объектов.
2.  Допуск на совпадение точек должен лежать в диапазоне [0...10] мм.
3.  Угловой допуск должен лежать в диапазоне [0...10] градусов.
4.  Получить интерфейс параметров параметризации можно при помощи функции

ksGetParametrizationParam.

ksSetDocVariableArray  Заменить значения 
параметрических переменных
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/495_59_3_2_Izmenenie_znachenij_.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksSetDocVariableArray.
Синтаксис:
int ksSetDocVariableArray (reference obj,
reference arr,
unsigned char setNote);
Входные параметры:

obj " указатель на документ или вставку фрагмента,
arr " указатель на динамический массив VARIABLE_ARR,
setNote признак редактирования комментариев:

0 " комментарии не менять, 
1 " комментарии менять.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

ksSetObjConstraint  Установить параметрическую связь 
или ограничение
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/476_Glava55_Nalozhenie_svjazej_.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksSetObjConstraint.
Синтаксис:
int ksSetObjConstraint (reference obj, 
4521



ConstraintParam *par);
Входные параметры:

obj " объект, на который накладывается связь или 
ограничение,

par " указатель на структуру параметрической связи или 
ограничения ConstraintParam....

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.
4522



Редактирование графических объектов
Функции редактирования объектов чертежа
Функции данного радела обеспечивают операции редактирования изображения чертежа
(сдвиг, поворот, масштабирование, зеркальное отображение, удаление, копирование в
точку, по линии или по узлам сетки, деформацию, запись в отдельный фрагмент), а так"
же обработку структуры объектов и работу с графическим буфером.

CopyGroupToDocument  Скопировать группу в документ
Синтаксис:
reference LIB_FUNC CopyGroupToDocument (reference gr,
reference from,
reference to)
Входные параметры:

From " указатель на документ, откуда копируется группа,
to " указатель на документ, куда копируется группа,
gr " указатель на копию группы.

Возвращает указатель на группу в документе to.

CopyObj  Копировать объект
Пример...
Синтаксис:
int CopyObj (reference obj, 
double xb, 
double yb, 
double xn, 
double yn, 
double scale,
double ang);
Входные параметры:

obj " указатель на объект,
xb, yb " координаты базовой точки объекта,
xn, yn " координаты нового положения базовой точки,
scale " масштаб,
ang " угол поворота в градусах.

Возвращаемое значение:
4523



указатель на получившийся объект или " в случае удачного завершения,
группу объектов 
0 " в случае неудачи.

Примечание:

1.  Если указатель на объект равен нулю, то копируются выделенные объекты документа.
2. При копировании одиночного объекта новый объект создается на текущем слое текуще"

го вида.
3. При копировании группы объектов слой сохраняется.
4. При копировании одиночного многослойного макрообъекта он перестает быть много"

слойным. Макро и входящие в него объекты переносятся на текущий слой. Для копиро"
вания многослойного макро с сохранением многослойности требуется добавить его в
группу.

5.  Функция устарела, рекомендуется вместо нее использовать функцию ksCopyObj.

CursorEx  Запрос к системе на получение точки.
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksCursorEx.
Синтаксис:
int CursorEx (RequestInfo *info,
double *x,
double *y,
void *phantom,
LPUNKNOWN processParam);
Входные параметры:

info " указатель на структуру параметров запроса к системе RequestInfo,
x, y " координаты введенной точки,
phantom " указатель на структуру управления фантомом, определяющую тип 

движения курсора (аналог типа резиновой нити в версии 4),
processParam " указатель на интерфейс параметров процесса IProcessParam.

Выходные параметры:

x, y " возвращаемые координаты точки.

Возвращаемое значение:

"1 " если указана точка,
