Руководство пользователя

KOMPAS-Invisible (API КОМПАС-3D)



 

Информация, содержащаяся в данном документе, может быть изменена 
без предварительного уведомления.

Никакая часть данного документа не может быть воспроизведена или передана 
в любой форме и любыми способами в каких"либо целях 
без письменного разрешения ООО «АСКОН"Системы проектирования».

©2020 ООО «АСКОН"Системы проектирования». С сохранением всех прав.

АСКОН, КОМПАС, логотипы АСКОН и КОМПАС 
являются зарегистрированными торговыми марками ООО «АСКОН"Системы проектирования».

Остальные упомянутые в документе торговые марки 
являются собственностью их законных владельцев.

 



 

KOMPAS-Invisible (API КОМПАС-3D)
API КОМПАС"3D " это ориентированные на прикладного программиста инструменталь"
ные средства разработки приложений (библиотек конструктивов, прикладных САПР) на
базе системы КОМПАС.
API КОМПАС"3D включает в свой состав 2D API и 3D API.
2D API обеспечивает доступ к системе КОМПАС для формирования и обработки двумер"
ных графических документов. В его состав входят следующие варианты реализации:

1. Набор экспортных функций, оформленных в виде динамически подключаемых DLL"мо"
дулей.

2. Автоматизация.
3D API обеспечивает доступ к системе КОМПАС для создания и редактирования трехмер"
ных моделей. В его состав входят следующие варианты реализации:

1. Стандартные COM"объекты. Использование COM"интерфейсов позволяет получить мак"
симальную производительность системы.

2. Автоматизация.
3



 

4



 

Создание прикладных библиотек
Общие сведения о прикладных библиотеках 
системы КОМПАС
Прикладная библиотека представляет собой набор команд. Команды библиотеки можно
вызывать следующими способами:

▼  использование меню библиотеки,
▼  использование кнопок библиотечной или пользовательской панели инструментов,
▼  использование механизма хот"точек,
▼  обработка событий, например, сдвиг, перемещение библиотечного элемента и т.п.,
▼  команды контекстного меню Редактировать для библиотечного элемента 3D,
▼  двойной щелчок мышью по библиотечному элементу в окне документа.

Идентификатор меню команд определяется с помощью предопределенной функции
LIBRARYID. Если эта функция отсутствует, то считается, что библиотека имеет одну ко"
манду, имя которой совпадает с именем библиотеки.
Имя библиотеки определяется с помощью предопределенной функции LIBRARYNAME.
Если имя библиотеки не определено, то ей присваивается имя Неименованная библи
отека. Имя библиотеки, полученное при помощи функции LIBRARYNAME, передается в
создаваемые библиотекой макроэлементы. При редактировании таких макроэлементов
по двойному щелчку мыши или через интерфейс хот"точек, система находит библиотеку
для редактирования по имени файла, имени библиотеки, по номеру команды.
Функция DisplayLibraryName позволяет получить имя библиотеки, которое будет отобра"
жаться на экране во время работы системы КОМПАС (в меню, в менеджере библиотек,
на панелях). Функция DisplayLibraryName является необязательной. Если эта функция не
используется, то в качестве имени библиотеки будет отображаться возвращаемое зна"
чение функции LibraryName.
Отображаемых команд может быть не более 1000. Номера команд должны лежать в ди"
апазоне 1...1000. В ресурсном файле для каждой команды можно определить слайд или
битмап для отрисовки в окне менеджера библиотек, в окне или диалоге библиотеки. Что"
бы слайд отрисовывался, нужно определить размер окна слайда с помощью предопре"
деленной функции LIBRARYBMPSIZE, размер слайда произвольный. Этот же слайд или
битмап масштабируется и отрисовывается в виде иконки размером 22 на 22 пиксела ря"
дом с именем команды в менеджере библиотек, если задан режим отображения библи"
отеки Панель. Идентификаторы слайдов равны номерам соответствующих команд.
Для каждой команды можно определить значок на кнопке Панели инструментов. Для ис"
пользования значков нескольких размеров, в библиотеке следует определить функцию
LibraryBmpBeginID.
Если она не будет определена, система будет использовать старую систему использова"
ния значков (интервал идентификаторов значков начинается с 1000, значки автоматиче"
ски масштабируются к нужному размеру).
Если такой значок не определен, то кнопку вызова команды разместить на Панели ин"
струментов нельзя.
5



 

Для команд меню библиотеки или кнопок вызова команд на инструментальных панелях
может быть организован вызов разделов справочной системы библиотеки.

Типы библиотек системы КОМПАС
▼ Простые библиотеки. Такие библиотеки пользователь может отключать или подключать

к системе КОМПАС по собственному желанию. Библиотеки отображаются в менеджере
библиотек.

▼ Библиотеки"добавления типа Addins. Такие библиотеки подключаются к системе КОМ"
ПАС во время запуска системы автоматически. В менеджере библиотек не отображают"
ся, но видны в меню Библиотеки. Для того, чтобы библиотека стала добавляемой, нуж"
но зарегистрировать ее в реестре Windows определенным образом.

▼ Библиотеки"конверторы. Такие библиотеки регистрируются определенным образом в
реестре и должны реализовывать интерфейс IKompasConverter (см.
sdk\libs\ConvertLibInterfaces.tlb и пример MyConverter).
В системе КОМПАС под команды библиотек зарезервировано 10000 уникальных номе"
ров. Максимальное число одновременно подключенных библиотек равно 25. Макси"
мальное число инструментальных панелей библиотек равно 50.

Возможные состояния библиотеки системы КОМПАС
Прикладная библиотека может находиться в следующих состояниях.

▼ Библиотека не подключена к системе КОМПАС. При этом библиотека может отображать"
ся или не отображаться в менеджере библиотек.

▼ Библиотека подключена к системе КОМПАС. В менеджере библиотек рядом с именем та"
кой библиотеки включена «галочка». Имя библиотеки отображается в меню Библиоте
ки. Если библиотека подключена, она захватывает соответствующее количество уни"
кальных номеров для отображаемых команд и панелей. Если для запуска библиотеки
необходима оплаченная лицензия, библиотека захватывает экземпляр лицензии.

▼ Библиотека запущена на выполнение. Библиотека считается запущенной в следующих
случаях: 
▼ пользователь выполняет команду библиотеки,
▼ пользователь редактирует библиотечный элемент по двойному щелчку мыши или

при помощи хот"точек,
▼ библиотека подписалась на события системы КОМПАС. 

Описание значков на кнопках инструментальных 
панелей

1. Интервалов идентификаторов значков кнопок может быть несколько. Значения иденти"
фикаторов должны быть больше 1000, так как интервал от 0 до 1000 предназначен для
ID слайдов, отображающихся в менеджере библиотек.

2. Поддерживаются следующие размеры значков (в пикселах): 
▼  16*16,
▼  24*24,
6



 

▼  32*32,
▼  48*48.
3. Глубина цвета значков может составлять 24 бита (TrueColor).

Примечание: Цвет RGB: 192, 192, 192 считается прозрачным.
4. Для значка собственно панели команд, отображаемой на компактной панели, достаточно

создать файл значка с расширением ico, содержащий значки размеров 12*12, 18*18,
24*24, 36*36 пикселов. Значки должны располагаться в файле в порядке возрастания
размера. Глубина цвета значка должна составлять 24 бита (TrueColor). Файл может со"
держать один значок. В таком случае остальные типоразмеры значка будут получены
масштабированием.

Рекомендации по созданию прикладных библиотек
Управление окнами, создаваемыми прикладной 
библиотекой
Если в библиотеке при вызове диалога параметр parent передан как NULL, то возможна
ситуация, когда диалог не санкционированно закроется. Для предотвращения подобных
случаев параметру parent нужно задавать значение дескриптора главного окна КОМПАС.
Значение дескриптора можно получить, используя функции GetHWindow или
KompasObject::ksGetHWindow.
Для библиотек, написанных на Visual C++, которые имеют свой WinApp, нужно исполь"
зовать:
CWnd parent; 
parent.Attach((HWND)::GetHWindow()); 
.... работа с диалогом 
parent.Detach(); 
//""" 
Для библиотек без WinApp можно использовать: 
CWnd::FromHandlePermanent((HWND)::GetHWindow());

Редактирование зеркально отраженных 
библиотечных макроэлементов
В Placement (см. ksDocument2D::ksPlacement, lPlacement) макроэлементов хранится
флаг зеркальной симметрии объекта. Если при операциях, выполняемых базовым фун"
кционалом системы КОМПАС, происходит зеркальное отображение макроэлемента,
имеющего Placement, то для полученного в результате операции макроэлемента флаг
зеркальной симметрии автоматически инвертируется. Поэтому, если макроэлементы,
создаваемые при помощи прикладных библиотек, будут в дальнейшем редактировать
библиотеками, необходимо задавать этим макроэлементам Placement.
Макроэлементы, у которых не задан Placement и геометрия которых была зеркально от"
ражена (например, операцией Симметрия), не могут быть корректно отредактированы
7



 

библиотеками " после редактирования их геометрия вернется в нормальное (не зеркаль"
ное) состояние.
Чтобы определить, является ли геометрия макроэлемента зеркально отображенной,
можно воспользоваться функцией ksGetMacroPlacementEx
(ksDocument2D::ksGetMacroPlacementEx). Если в параметре mirrorSymmetry (флаг зер"
кальной симметрии объекта) вернется ненулевое значение, то геометрия макроэлемента
зеркально отображена.
Если редактирование при помощи библиотеки макроэлемента, имеющего Placement,
reference на который получен через EditMacroMode (ksDocument2D::ksEditMacroMode),
запускается двойным щелчком мыши или через хот"точки, проверять, является ли он
зеркально отображенным, и принимать какие"то другие меры для сохранения правиль"
ного отображения геометрии не нужно. Корректное отображение геометрии в данном
случае обеспечится функционалом КОМПАС. В данном случае функции
SetMacroPlacement и GetMacroPlacement можно использовать без ограничений.
Если при создании нового макроэлемента нужно, чтобы его геометрия была сразу зер"
кально отображена, то следует задать макроэлементу Placement функцией
ksSetMacroPlacementEx (ksDocument2D::ksSetMacroPlacementEx), значение параметра
mirrorSymmetry которой надо задать равным 1. Далее создание геометрии для такого
макроэлемента не отличается от создании геометрии "нормального" макроэлемента, т.к.
зеркальная трансформация геометрии производится функционалом системы КОМПАС"
3D.
Если редактирование макроэлемента, запускаемое двойным щелчком мыши или через
хот"точки, проводится путем удаления исходного макроэлемента и построения нового,
то при необходимости сохранения зеркального построения геометрии следует выпол"
нить следующие действия.

1.  Получить у исходного макроэлемента признак зеркальной симметрии объекта (пара"
метр mirrorSymmetry функции GetMacroPalcementEx).

2.  Задать Placement нового макроэлемента при помощи функции ksSetMacroPlacementEx
(ksDocument2D::ksSetMacroPlacementEx), передав в нее в параметре mirrorSymmetry по"
лученный ранее флаг зеркальной симметрии объекта. Далее создание геометрии для та"
кого макроэлемента не отличается от создании геометрии "нормального" макроэлемен"
та, т.к. зеркальная трансформация геометрии производится функционалом КОМПАС.
Примечание:
Если в макроэлементе есть вставки рисунков, то следует учитывать, что в них так же хра"
нится флаг зеркальной симметрии объекта, который обрабатывается независимо от ана"
логичного флага в макроэлементе.

Вызов контекстнозависимой справки по командам 
прикладных библиотек
Контекстно"зависимая справка для команд меню библиотеки и кнопок вызова команд,
расположенных на инструментальных панелях, может быть вызвана стандартным спосо"
бом Windows. Для этого следует активизировать кнопку или команду и нажать клавишу
F1.
8



 

Справочная система прикладной библиотеки может быть реализована в формате
WinHelp или HTML Help. Имя файла справочной системы должно совпадать с именем
файла библиотеки. Если имена файлов справочной системы и библиотеки не совпадают,
имя файла справки должно быть задано функцией LIBRARYHELPFILE или
LIBRARYHELPFILEW. Файл справки должен находиться в той же папке, в которой сохра"
нен файл библиотеки, или функция LIBRARYHELPFILE (LIBRARYHELPFILEW) должна вер"
нуть полное абсолютное имя файла справки.
При вызове справки выполняются следующие действия.

1. Система пытается открыть файл, возвращаемый функцией LIBRARYHELPFILE или
LIBRARYHELPFILEW.

2.  В случае неудачи система пытается открыть файл <имя файла библиотеки>.chm.
3.  В случае неудачи система пытается открыть файл <имя файла библиотеки>.hlp.
4.  Если ни один из файлов с указанными именами не найден, на экране появится сообще"

ние справочной системы КОМПАС о недоступности справочной системы библиотеки.
5.  Если файл найден, но в нем отсутствует необходимый раздел, который должен соответ"

ствовать идентификатору команды, на экране появится сообщение программы просмо"
тра справки об отсутствии этого раздела.
Примечание:
Если для отображения библиотеки выбран режим Диалог, идентификатор, передавае"
мый в WinHelp, в этом случае соответствует идентификатору главного меню библиотеки.

Особенности работы с документом 2D в режиме 
редактирования макроэлементов
При необходимости контролировать из приложения состояние видов в чертеже, следует
учитывать следующую особенность работы КОМПАС с видами, связанную с возможно"
стью визуального редактирования состава макроэлементов.

▼ При входе в ручной режим редактирования макроэлемента в КОМПАСе создается слу"
жебный вид, который от обычного вида ничем не отличается (только имеет тот же номер
что и вид редактируемого макрообъекта), и в который "перекладываются" объекты ре"
дактируемого макро.  "Отличить" обычный вид от служебного можно по флагу
IView1::EditMacroVisibleRegime или IKompasDocument2D1::EditMacroVisibleRegime.

▼ При выходе из режима служебный вид удаляется, при этом создается событие
ksObject2DNotify::Delete.

Инструкция по работе через ODBC с базами данных 
ACCESS в 64разрядных приложениях
В случае, если при запуске под КОМПАС"3D x64 библиотека не может открыть свою
ACCESS"базу, рекомендуется установить драйверы ODBC для x64
(Microsoft.ACE.OLEDB.12.0)http://www.microsoft.com/en"us/download/
details.aspx?displaylang=en&id=13255. По умолчанию в ОС x64 они не установлены.
9



 

Для установки 64"разрядных драйверов требуется удалить 32"разрядные. Одновремен"
но они работать не могут (см. http://msdn.microsoft.com/ru"ru/library/office/
ff965871.aspx#DataProgrammingWithAccess2010_using32vs64ace. Соответственно и 32"
разрядные приложения не могут работать с ODBC. Если установлена 32"разрядная вер"
сия приложения Microsoft Office, то требуется удалить и его.
В КОМПАС"3D для решения проблемы используется вспомогательный 32"разрядный
exe"файл Wow32Util.exe, находящийся в каталоге Bin 64"разрядного КОМПАСа. Его на"
значение " создавать 32"разрядные интерфейсы, используя 32"разрядные драйверы.
Работает следующим образом:
64"разрядный КОМПАС сначала пытается сам создать нужный интерфейс через
CoCreateInctance и выполнить соединение через Microsoft.ACE.OLEDB.12.0 и
Microsoft.Jet.OLEDB.4.0. Если это не получается, то через CoCreateInctance поднимается
Wow32Util.exe и в интерфейсе, реализованном в данной утилите, вызывается функция
создания нужного интерфейса, куда передается нужный classID или GUID, затем повто"
ряется попытка соединения через оба драйвера.
Этот механизм работает, хотя время импорта ниже чем при обычном подключении.

Оптимизация процесса перерисовки в чертежах и 
фрагментах
Если в результате работы приложения нужно перерисовывать изображение в чертеже,
то рекомендуется обновлять только его измененную часть, а не весь чертеж целиком, т.к.
в случае большого (насыщенного) чертежа, полная его перерисовки может потребовать
длительного времени.
Для перерисовки части изображения чертежа можно использовать функцию
ksReDrawDocPartEx. Следует при этом учитывать, что функция обновляет заданную об"
ласть во всех окнах перерисовываемого документа.
Для обновления только одного окна документа, можно воспользоваться функцией
WinAPI — InvalidateRect. (HWND окна документа можно получить через
IDocumentFrame::GetHWND).

Создание контекстной панели для библиотечных 
макроэлементов и работа с ней 
В 2D для библиотечных макроэлементов существует возможность создания "своей" кон"
текстной панели. Наличие для макроэлемента специфической для него контекстной па"
нели повышает удобство и скорость вызова команд для работы с этим макроэлементом.
Состав контекстной панели полностью определяется библиотекой, аналогично опреде"
лению состава библиотечной панели инструментов.
Состав контекстной панели формируется так же, как и для обычной панели команд " че"
рез возврат идентификатора панели в функции LibToolBarId;
nt WINAPI LibToolBarId( int barType, // Тип запрашиваемой панелей (0 " компактная па"
нель, 1 " простая инструментальная панель, 2 " контекстная)
int index ); // Индекс панели.
10



 

Чтобы библиотека могла определить, что команда вызвана из контекстной панели, для
команд контекстной панели необходимо задать свой диапазон идентификаторов.
На контекстной панели располагаются кнопки команд библиотеки.
В контекстной панели может быть два ряда кнопок: для верхнего index " 0, для нижнего
" 1.
Можно оставить только один (верхний) ряд кнопок или вообще запретить показ панели,
возвратив для обоих индексов 0.
Управление доступностью кнопок контекстной панели происходит через функцию
LibCommandState.
Если библиотека не определяет свою контекстную панель, то показывается контекстная
панель, определенная в КОМПАС. 
Примечание:
Отображение контекстной панели подчиняется так же системной настройке Система 
Общие  Контекстная панель.

Пример обработки динамического запроса при 
создании панели инструментов
В качестве примера используется процесс указания точки и угла Placement.
Процесс содержит системную панель, элементы управления которой позволяют задать
два параметра " точку и угол. Можно выделить 3 состояния процесса:

▼ указание точки,
▼ указание угла,
▼ все задано.

Если процесс переходит в состояния все задано, то возможны два варианта.
Автоматически запускается создание объекта.
Процесс ожидает ручного нажатия кнопки Создать объект. При этом никакие функции
CallBack не выполняются. В API за это отвечает свойство IProcessParam::AutoReduce,
Таким образом, создавая панель, содержащую кнопку Автосоздание объекта с воз"
можностью управлять ее состоянием (нажата/отжата) через ButtonUpdate, необходимо в
первый раз синхронизировать состояния кнопки и флага IProcessParam::AutoReduce.
Предположим, что процесс запускается с нажатой кнопкой автосоздания. Необходимо
задать значение IProcessParam::AutoReduce, равное TRUE. Поля задания точки и угла на
панели расфиксированы. Первый щелчок мыши в поле чертежа фиксирует точку, второй
фиксирует угол и по флагу IProcessParam::AutoReduce запускается создание объекта.
После этого поля задания точки и угла расфиксируются, то есть процесс переходит в на"
чальное состояние (благодаря флагу IProcessParam::AutoReduce=TRUE).
В случае нажатия кнопки автосоздания в процессе, событие придет в библиотеку, и ин"
вертирует флаг IProcessParam::AutoReduce в самом процессе автоматически.
Пользовательская панель может содержать только элементы управления, а не поля за"
дания параметров. На построения они не влияют, так как таблица состояний статическая
и описывается до запуска процесса. Таким образом, если процесс перешел в состояние
все задано, то есть значения всех параметров установлены и на пользовательской па"
11



 

нели можно только отрабатывать изменение состояния элементов управления, никакие
CallBack " функции не выполняются.
У процесса указания точки Cursor аналогичная схема работы, но задаваемый параметр
всего один и первый же щелчок мыши в поле чертежа переводит процесс в состояние
все задано.
Для имитации работы процесса Cursor с постоянным присутствием вызовов CallBack'ов
необходимо выполнить следующие действия:

1.  На старте процесса задать значение IProcessParam::AutoReduce, равное TRUE.
2.  В событии ButtonClick на нажатия кнопки автосоздания всегда возвращать FALSE, то

есть не давать процессу инвертировать значение IProcessParam::AutoReduce.
3.  Управлять состоянием кнопки в ButtonUpdate по собственному усмотрению.
4.  Всю логику работы реализовать в функции обратной связи CallBack, то есть, если зада"

ны не все значения параметров, то возвращать 1, а если все, то 0.

Использование Unicode 
Что такое Unicode?
Unicode " стандарт кодирования символов, позволяющий представить знаки практиче"
ски всех письменных языков, т.е. это уникальный код для любого символа, независимо
от платформы, независимо от программы, независимо от языка.
Стандарт состоит из двух основных разделов: универсальный набор символов (UCS,
Universal Character Set) и семейство кодировок (UTF, Unicode Transformation Format). 
Коды в стандарте Unicode разделены на несколько областей. Область с кодами от
U+0000 до U+007F содержит символы набора ASCII с соответствующими кодами. Далее
расположены области знаков различных письменностей, знаки пунктуации и техниче"
ские символы. Часть кодов зарезервирована для использования в будущем. Под симво"
лы кириллицы выделены коды от U+0400 до U+052F (см. http://ru.wikipedia.org/wiki/
Кириллица_в_Юникоде.
Имеется несколько форм представления: http://ru.wikipedia.org/wiki/UTF"8, http://
ru.wikipedia.org/wiki/UTF"16 (UTF"16BE, UTF"16LE) и UTF"32 (UTF"32BE, UTF"32LE)
В системах Windows 2000 и XP используется двухбайтовая форма UTF"16LE для внутрен"
него представления имен файлов и других системных строк. В UNIX"подобных операци"
онных системах GNU/Linux, BSD и Mac OS X принята форма UTF"8 для файлов и UTF"32
или UTF"8 для обработки символов в оперативной памяти.
Начиная с Windows 2000, служебная программа «Таблица символов» позволяет вывести
на экран таблицу всех символов от U+0000 до U+FFFF, поддерживаемых конкретным
шрифтом. Эта программа позволяет выделять отдельные символы и копировать их в бу"
фер обмена. Более универсальный способ ввода символа, код которого известен " за"
жать <Alt>, нажать клавишу «плюс» в дополнительном блоке клавиатуры, и затем на"
брать шестнадцатеричный код требуемого символа. Например, нажатие
<Alt>+<Plus>+<F1> вставит букву «с». Этот способ, однако, работает не во всех элементах
управления, позволяющих вводить текст.
12



 

Как любая изобретенная человеком система, Unicode не свободен от недостатков, напри"
мер, некоторые системы письма все еще не представлены должным образом, а еще
файлы с текстом в Unicode занимают больше места в памяти, так как один символ коди"
руется не одним байтом, как в различных национальных кодировках, а последователь"
ностью байтов (исключение составляет UTF"8 для языков, алфавит которых укладывает"
ся в ASCII). 
Ссылки:
http://www.unicode.org/standard/translations/russian.html
http://ru.wikipedia.org/wiki/Unicode

Конвертирование исходного кода (C/C++) из ANSI в 
Unicode

1. Код "двойного назначения"
Чтобы иметь возможность реализации приложения в двух вариантах " ANSI и Unicode,
следует обеспечить возможность компиляции "двойного назначения". Для этого в проект
необходимо добавить новую конфигурацию "Unicode", в свойствах компилятора которой
объявить два определения UNICODE и _UNICODE.

2. Типы данных
Тип данных символа Unicode – wchar_t, в отличие от простого char " это 16"битное число!
Для возможность компиляции "двойного назначения" (ANSI и Unicode) необходимо ис"
пользовать тип (макрос) TCHAR, который в зависимости от объявленных определений
разворачивается либо в char, либо в wchar_t.
При замене char или char* необходимо понимать назначение переменной с таким типом.
Если это строка или символ, то нужно использовать TCHAR, а если это бинарный массив
или простой байт данных то byte.

3. Прототипы функций
Код, содержащий явные вызовы str"функций, просто так компилировать с использова"
нием и ANSI и Unicode нельзя. Чтобы реализовать возможность компиляции "двойного
назначения", необходимо заменить все функции на _t"образные (макросы,) например
strlen на _tcslen или sprintf на _stprintf. Эти макросы заменяют явные вызовы str" или
wcs"функций в зависимости от определения _UNICODE.
Так же происходит и с функциями Win32 API, например SetWindowText подразумевает
либо SetWindowTextA, либо SetWindowTextW.

4. Символы и строки в С"коде
По умолчанию компилятор транслирует строки как состоящие из символов ANSI, а не
Unicode. Чтобы компилятор сгенерировал Unicode"строку перед ней надо добавить букву
L, например L"text". Тогда, размещая строку в области данных программы, компилятор
вставит между всеми символами нулевые байты. При этом возникает другая проблема "
программа компилируется, только если _UNICODE определен. Для этого существует ма"
крос _TEXT() или просто _T(), например _T("text").

5. В API системы КОМПАС все структуры параметров, содержащие строковые переменные
имеют аналог для UNICODE c суффиксом W.
13



 

При использовании функций GetObjParam / SetObjParam для автоматического выбора
структуры параметров используется определение с суффиксом T.
Например: 
Тип данных: 

#ifdef _UNICODE 
#define ALLPARAM_T  ALLPARAM_W 
#else 
#define ALLPARAM_T  ALLPARAM 
#endif // !UNICODE 

Структура параметров: 
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 
// Структура параметров вида (ANSI)
// """ 
struct ViewParam { 
unsigned short state;             // состояние вида 
double         x,y;               // точка привязки вида 
double         scale;             // масштаб вида 
double         ang;               // угол поворота вида 
unsigned long  color;             // цвет вида в активном состоянии 
char           name[TEXT_LENGTH]; // имя вида 
}; 

//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 
// Структура параметров вида ( Unicode ) 
// """ 
struct ViewParamW { 
unsigned short state;             // состояние вида 
double         x,y;               // точка привязки вида 
double         scale;             // масштаб вида 
double         ang;               // угол поворота вида 
unsigned long  color;             // цвет вида в активном состоянии 
wchar_t        name[TEXT_LENGTH]; // имя вида 
}; 

#ifdef _UNICODE 
#define ViewParamT  ViewParamW 
14



 

#else 
#define ViewParamT  ViewParam 
#endif // !_UNICODE 

Ссылки:
http://www.microsoft.com/globaldev/getwr/steps/wrg_unicode.mspx

Рекомендации по использованию метода 
IUnknown::QueryInterface
В данном разделе приведены примеры получения дополнительных интерфейсов с ис"
пользованием метода IUnknown::QueryInterface для различных языков программирова"
ния.

Visual Basic

Dim kompasDoc As KompasAPI7.KompasDocument
Dim doc2D         As KompasAPI7.DrawingDocument

Set kompasDoc = KomApp.ActiveDocument
Set doc2D          = kompasDoc // Здесь выполнится QueryInterface.

Delphi

var

  kompasDoc : IKompasDocument;
  doc2D          : IDrawingDocument;
begin

  kompasDoc := KomApp.ActiveDocument;
  doc2D             := kompasDoc As IDrawingDocument;            // Здесь выполнится QueryInterface
 или 
doc2D     := KomApp.ActiveDocument As IDrawingDocument; // Здесь выполнится
QueryInterface

C++
В C++ для работы с интерфейсами удобнее всего использовать "умные указатели".
15



 

Они умеют выполнять QueryInterface и правильно выполняют захват и освобождение ин"
терфейсов, используя методы AddRef и Release. 

 IKompasDocumentPtr kompasDoc( KomApp.ActiveDocument );
 IDrawingDocumentPtr doc2D( kompasDoc );      // Здесь выполнится QueryInterface

   или
IDrawingDocumentPtr doc2D( KomApp.ActiveDocument ); // Здесь выполнится
QueryInterface.

C#

IKompasDocument kompasDoc = KomApp.ActiveDocument;
IDrawingDocument doc2D          = (IDrawingDocument) kompasDoc;      // Здесь выполнится
QueryInterface

   или

IDrawingDocument doc2D          = (IDrawingDocument) KomApp.ActiveDocument // Здесь вы"
полнится QueryInterface

Python

kompasDoc                          = KomApp.ActiveDocument
doc2D     =
kompasDoc._oleobj_.QueryInterface(KAPI7.NamesToIIDMap['IDrawingDocument'],
pythoncom.IID_IDispatch)    
doc2D     = API7.IDrawingDocument(doc2D)
 

Мастер создания библиотек
Мастер создания библиотек; общие сведения
Мастер создания библиотек позволяет создать заготовку для библиотеки КОМПАС. Он
сохранен в файле LibraryWizard.awx.
16



 

Подключение мастера создания библиотек
Для подключения мастера создания библиотек:

1. Скопируйте файлы LibraryWizard.vsz, LibraryWizard.vsdir и LibraryWizard.ico в пап"
ку C:\Program Files\Microsoft Visual Studio 8\VC\vcprojects (или в подпапку vcprojects пап"
ки, куда установлен Microsoft Visual Studio 2005).

2. Создайте в папке C:\Program Files\Microsoft Visual Studio 8\VC\VCWizards (или аналогич"
ной) папку LibraryWizard2005.

3. Скопируйте в папку LibraryWizard2005 папки: 1033, HTML, Images, Scripts и
Templates.

Создание заготовки библиотеки с использованием 
Мастера
Чтобы создать заготовку библиотеки с использованием Мастера, следует после запуска
Microsoft Visual Studio 2005 выполнить следующие действия.

1. Вызовите команду File  New  Project. На экране появится окно нового проекта (см.
рис.).

Окно создания нового проекта 
2. В списке Project types: выделите пункт Visual C++, затем в списке Templates: выберите

LibraryWizard.
3. Введите в поле Name: имя проекта.
17



 

4. В поле Location: задайте путь к Include папкам. (По умолчанию эти пути настроены для
папки \SDK\C++\Visualc.)

5. Отключите опцию Create directory for solution. 
6. Чтобы завершить задание свойств нового проекта, нажмите кнопку ОК.

На экране появится окно Мастера создания библиотек (см. рис.).

Мастер создания библиотек " Главное окно 
Элементы управления окна позволяют задать параметры заготовки библиотеки.
В поле Имя библиотеки: следует ввести имя, которое будет отображаться в системе
КОМПАС при подключении этой библиотеки.
Выберите тип API для программирования – API экспортных функций или Автомати
зация.
При использовании Автоматизации добавляется функция для получения интерфейса
KompasObject  GetKompas. Добавляется переменная KompasObjectPtr kompas.
При включении опции Характерные точки в проект добавляются файлы, позволяю"
щие библиотеке работать в режиме редактирования характерных точек.
При включении опции События редактирования макрообъекта будет добавлен файл,
позволяющий библиотеке обрабатывать события редактирования макрообъекта.
При включении опции Использовать 3D в файле stdfx.h будут сделаны настройки, по"
зволяющие использовать в проекте константы 3D и константы событий 3D.
При включении опции Использовать API7 в файле stdfx.h будут сделаны настройки, по"
зволяющие использовать в проекте интерфейсы API7. Также добавляется функция для
получения интерфейса IApplication – GetNewKompasAPI и переменная IApplication
newKompasAPI.
18



 

При включении опции Панель свойств (она будет доступна только после включения оп"
ции Использовать API7) в проект будет добавлен класс для работы с панелью свойств
и событиями панели свойств.
При включении опции Панель команд появляется возможность использования библи"
отеки в режиме «компактная панель команд», также в проект будет добавлена иконка
для компактной панели и будут внесены необходимые изменения в файл resource.h.
При включении опции Addins библиотека будет содержать все необходимые функции
для работы в этом режиме. Добавляются функции:

▼  DllRegisterServer " Регистрация библиотеки в реестре,
▼  DllUnregisterServer " Разрегистрация библиотеки.

Эти функции обеспечивают регистрацию библиотеки в разделе реестра
"Software\\ASCON\\KOMPAS"3D\\AddIns\\имя_библиотеки".
Создаются ключи:

▼  AutoConnect = 1 " Загружать библиотеку при запуске Компас"3D,
▼  Path " Путь к файлу библиотеки; определяется в момент подключения библиотеки.

При включении опции Локализации библиотеки в проект добавляется файл словаря
и специальным образом модифицируется функция для загрузки строк из ресурсов, что
позволит в дальнейшем осуществить локализацию библиотеки.
Также имеется возможность отредактировать главное меню библиотеки – Список ко
манд; команды библиотеки можно добавлять, удалять, переименовать и устанавливать
очередность их появления в списке. 
При включении опции Обрабатывать события в мастере создания библиотек появится
возможность перехода к диалогу обрабатываемых событий (см. рис.). Перейти в этот ди"
алог можно по ссылке Выбор событий. В диалоге обрабатываемых событий отобража"
ются все возможные события в зависимости от настроек в Главном окне мастера.
В данном диалоге включите нужные опции. В проект будут добавлены все необходимые
изменения и файлы, позволяющие библиотеке обрабатывать выбранные события.
Чтобы завершить создание заготовки библиотеки, нажмите кнопку Finish. Чтобы за"
крыть окно Мастера, отказавшись от сделанных настроек, нажмите кнопку Cancel.

Создание прикладных библиотек в различных 
средах программирования
Delphi
Чтобы создать библиотеку, нужно выполнить следующие действия.

1. Вызвать команду File  New.... Выбрать тип DLL на вкладке NEW.
2. В настройках проекта установить выравнивание: выключить опцию 

Project Options  Compiler  Code Generation  Aligned Record fields.
3. В настройках проекта или в дальнейшем после компиляции изменить расширение файла

библиотеки с dll на rtw.
19



 

Мастер создания библиотек " выбор обрабатываемых событий 

4. Для создания КОМПАС"библиотеки необходимо вставить несколько экспортных фун"
кций.
Примеры реализации простейшей библиотеки расположены в папках:

▼ ..SDK\PASCAL\DELPHIAUTO\Step1 (библиотека написана с использованием Автоматиза"
ции);

▼ ..SDK\PASCAL\DELPHI\Step1 (библиотека написана с использованием экспортных фун"
кций).

Visual Basic 
1.  Вызвать из меню File команду New  Project, тип ActiveX DLL.
2.  Для создания КОМПАС"библиотеки необходимо вставить несколько функций.
3.  Библиотеки данного типа подключаются к КОМПАС на вкладке ActiveX, где их необхо"

димо зарегистрировать при первом подключении, нажав кнопку Добавить.
Пример реализации простейшей библиотеки расположен в папке ..SDK\Basic\Step1 (би"
блиотека написана с использованием Автоматизации).

Visual С++
1.  Вызвать из меню File команду New.
2.  На вкладке Projects выбрать из списка вариант MFC AppWizard (dll). Ввести в поле

Project Name: имя проекта и нажать кнопку OK.
20



 

3. В появившемся на экране диалоге MFC AppWizard  Step 1 of 1 выбрать в группе What
type of DLL would you like to create? вариант MFC Extension DLL (using shared MFC
DLL). Другие настройки этого диалога оставить без изменения и нажать кнопку Finish.

4.  Вызвать команду Project  Settings....
5.  В появившемся диалоге Project Settings раскрыть вкладку C/C++.
6.  Выбрать из раскрывающегося списка Category вариант General. В поле Preprocessor

definition подстроку _DEBUG заменить на NDEBUG.
7.  Выбрать из раскрывающегося списка Category вариант Code Generation. Выбрать из

раскрывающегося списка Use runtime library вариант Multithread DLL.
8.  Закрыть диалог, нажав кнопку OK.
9.  В настройках проекта установить выравнивание:

▼  выбрать из раскрывающегося списка Category вариант Code Generation;
▼  выбрать из раскрывающегося списка Struct member argument вариант 1Byte.

10.  Для создания КОМПАС" библиотеки необходимо вставить несколько функций.
11.  В настройках проекта или в дальнейшем после компиляции изменить расширение фай"

ла библиотеки с dll на rtw.
Пример реализации простейшей библиотеки расположен в папках:

▼ ..\SDK\С++\VisualcAUTO\Step1 (библиотека написана с использованием Автоматизации);
▼ ..SDK\С++\Visualc\Step1 (библиотека написана с использованием экспортных функций).

Сведения по настройке конфигурации проекта 
библиотеки в среде VС++ 2005 для платформы х64

1. Библиотеки SDK для платформы x64 по умолчанию размещаются в каталоге SDK\Lib64.
2. Дополнительные lib " файлы указываются только в свойствах проекта: Configuration

Properties  Linker  Input  Additional Dependencies. В дереве проекта не должно
быть подключенных lib " файлов.

3. Рекомендуется настроить разные пути для компиляции Win32 и платформы x64 во всех
настройках проекта.

4. Примеры настроек конфигураций проектов SDK находятся в папках ..SDK\C++\Visualc и
..SDK\C++\VisualAuto.
Примечание: 
Для создания библиотек на платформе х64 должны быть установлены компоненты
Visual Studio " X64 Compilers and Tools.

С#
1. В свойствах проекта (Configuration Properties  Build) включите опцию Register for

COM Interop (TRUE).
2. Создайте DLL"обертки для TLB Компас API (они расположены в папке ..\SDK\Lib) с помо"

щью утилиты TlbImp.exe
21



 

3. Подключите созданные DLL к проекту, вызвав команду контекстного меню Add
Reference.

4. Для регистрации библиотеки в системе КОМПАС класс библиотеки должен реализовы"
вать статический метод типа .htmSample (Type type) с атрибутом
ComRegisterFunctionAttribute, в котором для ключа реестра в HKCR, отвечающего за ре"
гистрацию класса, создается раздел с именем Kompas_Library.

5. Чтобы зарегистрировать библиотеку на компьютере пользователя, необходимо вос"
пользоваться утилитой RegAsm.exe. Нажмите кнопку Пуск, вызовите команду Выпол
нить…, введите командную строку вида RegAsm.exe /codebase <файл_библиотеки> и на"
жмите кнопку ОК.

С++ Builder 
1. Вызвать из меню File команду New.... Выбрать тип DLL Wizard на вкладке NEW. Другие

настройки на этой вкладке оставить без изменения.
2.  В настройках проекта установить выравнивание: 

Project Options  Advanced Compiler  Data Alignment = Byte.
3. В настройках проекта или в дальнейшем после компиляции изменить расширение файла

библиотеки с dll на rtw.
4. Для создания КОМПАС"библиотеки необходимо вставить несколько экспортных фун"

кций.
Пример реализации простейшей библиотеки расположен в папках:

▼ ..SDK\С++\CBUILDERAUTO\Step1 (библиотека написана с использованием Автоматиза"
ции);

▼ ..SDK\С++\CBUILDER\Step1 (библиотека написана с использованием экспортных фун"
кций).

КОМПАСМакро
Существует возможность создания макросов средствами библиотеки КОМПАС"Макро.
Использование Библиотеки КОМПАС"Макро рассматривается в ее справочной системе.

Оформление прикладных библиотек типа DLL
Функции оформления библиотек типа DLL
В отличие от библиотек системы КОМПАС 4.x, имеющих собственный уникальный фор"
мат представления, библиотеки систем КОМПАС 3D последующих версий создаются с
помощью стандартных систем программирования и оформляются в виде разделяемых
DLL"библиотек WINDOWS, Они динамически подключаются при запуске приложения из
среды КОМПАС"ГРАФИК. Файл библиотеки может иметь расширение RTW или DLL.
Чтобы создать библиотеку, следует использовать функции оформления библиотек. Они
обеспечивают стыковку системы КОМПАС и приложения.
Функция LIBRARYENTRY является обязательной. Ее наличие позволяет системе КОМПАС
идентифицировать произвольный DLL"файл как собственную библиотеку,
22



 

LIBRARYENTRY является головной функцией библиотеки (точкой входа) и ей передается
управление при обращении к приложению. Остальные функции являются необязатель"
ными и позволяют определить дополнительные параметры приложения.
Все функции оформления библиотек должны быть объявлены в def файле как экспор"
тные, например:

EXPORTS
LIBRARYID @1
LIBRARYENTRY @2

Если ни одна из этих функций не определена, то считается, что библиотека без имени и
может выполнять только одну команду.

Пассивные клавиши (Dead keys)
Предназначены для дополнения раскладок клавиатуры национальными символами (на"
пример денежные знаки или буквы с точками вверху, как в немецком языке).
Dead key " это клавиша (сочетание клавиш), влияющая на последующую нажатую клави"
шу (deadable key). 
Например, чтобы ввести символ , следует нажать последовательность клавиш:
<CTRL>+<SHIFT>+~, a, то есть, нажать одновременно <CTRL>+<SHIFT>+~, отпустить их и
нажать a (латинскую).
Комбинация <CTRL>+<SHIFT>+~ будет являться Dead key.

Пример простейшей программы в среде VC++, 
оформленной в виде библиотеки КОМПАС
#ifndef __LIBTOOL_H
#include «libtool.h»
#endif
char * WINAPI  LIBRARYNAME()
{
  return "Самая простая библиотека";
}
void WINAPI LIBRARYENTRY( unsigned int comm ) 
{
  Message("Строим отрезок!");
  LineSeg( 10, 10, 100, 100, 1 ); // x1, y1, x2, y2, тип линии " основная
}
Функция LIBRARYENTRY является точкой входа в библиотеку при вызове из КОМПАС.
Наличие этой функции обязательно, так как именно ей передает управление КОМПАС
23



 

при обращении к библиотеке. В данном случае она обеспечивает выдачу сообщения и
построение одного единственного объекта чертежа " отрезка.
Все функции оформления библиотек должны быть объявлены в def файле как экспор"
тные, например:

EXPORTS
LIBRARYID @1
LIBRARYENTRY @2

Функции
CreateMacroFromSample  блок обработки команды 
"Объект по образцу"
Синтаксис:
extern "C" int WINAPI _export CreateMacroFromSample(long sourceReference);
Входной параметр:

sourceReference " идентификатор (указатель reference) выбранного   
образца библиотечного макрообъекта.

Примечание:

1. При запуске команды Объект по образцу одновременно с другими элементами КОМ
ПАСГрафик будут подсвечиваться и библиотечные макрообъекты, если создавшая их
библиотека подключена и имеет блок обработки CreateMacroFromSample. Подсвеченные
макрообъекты могут быть выбраны в качестве образца, после чего управление переда"
ется в блок обработки библиотеки.

2. В блок обработки команды Объект по образцу передается идентификатор (указатель
reference) выбранного макрообъекта. По этому указателю на макрообъект можно полу"
чить параметры макрообъекта, обработать их и запустить соответствующую команду би"
блиотеки.

DisplayLibraryName  Получить имя 
библиотеки,отображаемое при работе КОМПАС
Синтаксис:
extern "C" char * WINAPI __export DisplayLibraryName();
Возвращаемое значение:

" Имя библиотеки, отображаемое на экране
 во время работы системы КОМПАС.

Примечание:
24



 

1. Необязательная функция. Позволяет получить имя библиотеки, которое будет отобра"
жаться на экране во время работы системы КОМПАС (в меню, в менеджере библиотек,
на панелях). Если эта функция не используется, то в качестве имени библиотеки будет
отображаться возвращаемое значение функции LibraryName. Имя библиотеки, получен"
ное при помощи функции LibraryName, передается в создаваемые библиотекой макроэ"
лементы. При редактировании таких макроэлементов по двойному щелчку мыши или че"
рез интерфейс хот"точек, система находит библиотеку для редактирования по имени
файла, имени библиотеки, по номеру команды. Если выходит новая версия библиотеки,
в ней можно переопределить имя, отображаемое функцией DisplayLibraryName, оставив
прежним имя, возвращаемое LibraryName. В этом случае новая библиотека может быть
использована, чтобы редактировать макроэлементы, созданные старыми версиями би"
блиотеки.

2. При использовании Unicode следует использовать функцию DisplayLibraryNameW.

DisplayLibraryNameW  Получить имя библиотеки, 
Unicode
Синтаксис:
extern "C" LPWSTR WINAPI __export DisplayLibraryNameW();
Возвращаемое значение:

" Имя библиотеки, отображаемое на дисплее
 во время работы КОМПАС.

Примечание:
Необязательная функция. Позволяет получить имя библиотеки, которое будет отобра"
жаться на дисплее во время работы системы КОМПАС (в меню, в менеджере библиотек,
на панелях). Если эта функция не используется, то в качестве имени библиотеки будет
отображаться возвращаемое значение функции LibraryName. Имя библиотеки, получен"
ное при помощи функции LibraryName, передается в создаваемые библиотекой макроэ"
лементы. При редактировании таких макроэлементов по двойному щелчку мыши или че"
рез интерфейс хот"точек, система находит библиотеку для редактирования по имени
файла, имени библиотеки, по номеру команды. Если выходит новая версия библиотеки,
в ней можно переопределить имя, отображаемое функцией DisplayLibraryName, оставив
прежним имя, возвращаемое LibraryName. В этом случае новая библиотека может быть
использована, чтобы редактировать макроэлементы, созданные старыми версиями би"
блиотеки.
При использовании ANSI следует использовать функцию DisplayLibraryName.

GetLibToolbarSettings  Получить параметры 
инструментальных и компактных панелей
Функция не поддерживается
Синтаксис:
extern "C" int WINAPI _export GetLibToolbarSettings(int barId, LibToolbarSettings * settings);
25



 

Входной параметр:

barId " идентификатор панели.

Выходной параметр:

settings " указатель на структуру параметров 
библиотечной панели свойств.

Возвращаемое значение:

" Не используется.

Примечание:
Функция позволяет задать для панели признак отображения панели при активизации
нужных типов документов. Если массив типов документов не задан, есть возможность
сделать панель видимой по умолчанию.

LibGetDisableReason  Причина недоступности 
команды 
Синтаксис
char * WINAPI LibGetDisableReason( unsigned int comm );
Входные параметры:

comm " номер команды.

Возвращаемое значение:

" Строка пояснение с причиной недоступности команды.
" Строка не удаляется.

LibGetDisableReasonW  Причина недоступности 
команды. Unicode
Синтаксис
 wchar_t * WINAPI LibGetDisableReasonW( unsigned int comm );
Входные параметры:

comm " номер команды.

Возвращаемое значение:
26



 

" Строка пояснение с причиной недоступности команды.
" Строка удаляется функцией SysFreeString

LIBRARYNAME  задать имя библиотеки
Синтаксис:
extern "C" char * far_export pascal LIBRARYNAME()
Примечание:

1.  Имя библиотеки, полученное при помощи функции LIBRARYNAME, передается в созда"
ваемые библиотекой макроэлементы. При редактировании таких макроэлементов по
двойному щелчку мыши или через интерфейс хот"точек, система находит библиотеку
для редактирования по имени файла, имени библиотеки, по номеру команды.

2.  После подключения библиотеки имя, полученное при помощи функции LIBRARYNAME,
будет отражено в соответствующем меню системы КОМПАС. Если в библиотеке задана
функция DisplayLibraryName, то во время работы системы КОМПАС в меню, в менеджере
библиотек, на панелях будет отображаться имя библиотеки, полученное при помощи
этой функции.

3. При использовании Unicode следует использовать функцию LIBRARYNAMEW.

LIBRARYNAMEW  Задать имя библиотеки (Unicode)
Синтаксис:
extern "C" LPWSTR WINAPI __export LIBRARYNAMEW()
Примечание:

1.  После подключения библиотеки ее имя будет отражено в соответствующем меню систе"
мы КОМПАС.

2. При использовании ANSI следует использовать функцию LIBRARYNAME.

LibIsOnApplication7  Задать тип версии API, 
используемого библиотекой
Синтаксис для C/C++:
extern "C" int WINAPI __export LibIsOnApplication7();
Синтаксис для PASCAL:
function LibIsOnApplication7() : Integer; stdcall;
Возвращаемое значение:

1 " библиотека использует API версии 7,
0 " библиотека использует API версии 5.

Примечание:
27



 

Необязательный метод оформления библиотеки. Позволяет задать тип интерфейса, ко"
торый будет передан библиотеке в параметре application метода LibInterfaceNotifyEntry.
Если метод в библиотеке не объявлен, то считается что библиотека использует API вер"
сии 5.

LIBRARYENTRY  Головная функция библиотеки 
Синтаксис:
extern "C" void far_export pascal LIBRARYENTRY(UINT Comm)
Входной параметр:

Сomm " идентификатор выбранной команды.

Примечание:

1. При вызове команды библиотеки из меню, панели инструментов или при редактирова"
нии библиотечного элемента по двойному нажатию кнопки мыши управление передает"
ся этой функции с номером выбранной команды.

2. Библиотека должна обязательно содержать предопределенную функцию
LIBRARYENTRY, которая определяет точку входа в приложение или
LibInterfaceNotifyEntry. При обращении к библиотеке именно ей передается управление.
Кроме того, ее наличие позволяет системе КОМПАС идентифицировать произвольный
DLL"файл как собственное приложение.

LibInterfaceNotifyEntry  Головная функция 
библиотеки. Подписка на обработку событий от 
системы
Синтаксис:
int LibInterfaceNotifyEntry (IDispatch *application);
Входной параметр:

application " указатель интерфейса приложения KompasObject 
(для COM не используется).

Возвращаемое значение:

1 " в случае успешного завершения (подписка прошла успешно),
0 " в случае неудачи.

Примечание:
Библиотека должна обязательно содержать предопределенную функцию LibraryEntry,
которая определяет точку входа в приложение, или LibInterfaceNotifyEntry. При обраще"
нии к библиотеке именно ей передается управление. Кроме того, ее наличие позволяет
системе КОМПАС идентифицировать произвольный DLL"файл как собственное прило"
жение.
28



 

LIBRARYENTRYDEMO  Головная функция 
библиотеки (демонстрационный режим)
Синтаксис:
extern "C" void far _export pascal LIBRARYENTRYDEMO (UINT Comm)
Входной параметр:

сomm " идентификатор выбранной команды.

Описание:
Если задан демонстрационный режим работы (демоверсия КОМПАС), эта функция (если
она найдена в библиотеке), будет вызываться вместо функции LIBRARYENTRY.

LIBRARYENTRYDEMOEX Головная функция 
библиотеки (демонстрационный режим)
Синтаксис:
extern "C" void far _export pascal LIBRARYENTRYDEMOEX (UINT comm)
Входной параметр:

сomm " идентификатор выбранной команды.
Описание:
Если задан демонстрационный режим работы (не найден ключ защиты библиотеки), эта
функция (если она найдена в библиотеке), будет вызываться вместо функции
LIBRARYENTRY.

LIBRARYID Задать идентификатор ресурсов
Пример...
Синтаксис:
extern "C" unsigned int far __export pascal LIBRARYID();
Примечание:
Функция возвращает идентификатор, по которому система может считать четыре раз"
ных типа ресурсов:

▼ меню с описанными операциями, которые может выполнить библиотека;
▼ размеры растрового слайда;
▼ имя библиотеки;
▼ имя иконки для минимизированного окна библиотеки.

LIBRARYBMPSIZE  Задать размер окна вывода 
растрового слайда 
Синтаксис:
29



 

long far __export pascal LIBRARYBMPSIZE(void) //для VISUAL C++
function LIBRARYHELPFILE: LongInt; Pascal; //для PASCAL

Примечание:
Задает размер окна, в котором отображается слайд библиотечной функции. Данное на"
значение имеет более высокий приоритет по сравнению с назначением, сделанным в
файле ресурсов.

LIBRARYHELPFILE  Определить имя файла 
справочной системы, подключаемого к библиотеке
Синтаксис:
extern "C" char far * pascal LIBRARYHELPFILE()
Описание:
Разделы Справочной системы могут иметь как библиотечные функции, так и команды
меню, создаваемые внутри них и передаваемые в функции Placement и Cursor.
Примечание:
При использовании Unicode следует использовать функцию LIBRARYHELPFILEW.

LIBRARYHELPFILEW  Определить имя файла 
справочной системы, подключаемого к библиотеке 
(Unicode)
Синтаксис:
extern "C" LPWSTR WINAPI __export  LIBRARYHELPFILEW()
Описание:
Разделы Справочной системы могут иметь как библиотечные функции, так и команды
меню, создаваемые внутри них и передаваемые в функции Placement и Cursor.
Примечание:
При использовании ANSI следует использовать функцию LIBRARYHELPFILE.

LibToolBarId  Получить идентификаторы 
инструментальных и компактных панелей
Функция не поддерживается
Синтаксис:
extern "C" int WINAPI _export LibToolBarId (int barType, int index);
Входные параметры:

barType " тип запрашиваемой панели
(0 " компактная панель,
1 " простая инструментальная панель,
2 " контекстная всплывающая панель),
30



 

index " индекс панели.
Возвращаемое значение: (для компактной и простой инструментальной пане
ли)

Идентификатор панели
"1 " если для заданного barType нет панели

 с заданным индексом.
Возвращаемое значение: (для всплывающих панелей)

Идентификатор панели
0 " запрет добавления панели,
 "1 " отображать стандартную панель 

   для макроэлемента,
 >0 " идентификатор ресурсов

   для загрузки пользовательской панели.
Примечание:

1.  Панель описывается тремя ресурсами:
▼  RCDATA состава панели;
▼  имя панели; 
▼  значок инструментальной панели для возможности включения ее в компактную панель.
2. При описании панелей в ресурсах блок RCDATA необходимо заканчивать значением

0xffff.
3. Сначала запрашиваются обычные инструментальные панели, потом компактные панели.

Система будет запрашивать функцию пока возвращаемое значение не будет равно "1.
Если описанная в ресурсе инструментальная панель входит в компактную, то упомина"
ние инструментальной панели в LibToolBarId не обязательно.

4. Отображение созданных панелей можно включить, вызвав команду Вид  Панели ин
струментов после подключения библиотеки.

5.  Кнопки типа Fly"Out.
6.  Пример описания ресурсов панелей и кнопки типа Fly"Out.
7. Индексы панелей начинаются с 0.
8.  Размер, цвет, тип файла значков на кнопках…
9. Если в библиотеке нет компактной панели, то при barType = 0 нужно вернуть "1. Если в

библиотеке нет инструментальной панели, то при barType = 1 нужно вернуть "1.
10. При селектировании библиотечного макроэлемента можно заменить или запретить ото"

бражение всплывающих панелей. Всплывающая панель может содержать две панели.
Для получения списка контекстных панелей функция LibToolBarId вызывается первый
раз при подключении библиотеки и требуется вернуть идентификаторы всех всплываю"
щих панелей для всех библиотечных элементов. После подключения библиотеки фун"
кция вызывается при селектировании макроэлементов.
31



 

В зависимости от типа макроэлемента библиотека может вернуть свои или запретить
всплывающие панели. Подробнее о создании контекстных панелей...

LibObjInterfaceEntry  Получить управление 
характерными точками библиотечного 2D элемента 
или реакцию на его редактирование
Синтаксис:
extern "C" void WINAPI LibObjInterfaceEntry( int idType, unsigned int comm, void** object );
Входные параметры:

idType Тип интерфейса:
1 " интерфейс характерных точек ILibHPObject,
2 " интерфейс внешних воздействий IILibExternalObject,
3 " интерфейс внешних свойств объекта ILibPropertyObject

Выходные параметры:

object " адрес указателя на запрошенный интерфейс.

Примечание:
Экспортная функция. Должна быть реализована на стороне библиотеки разработчиком
приложения, если необходимо обеспечить управление характерными точками библио"
течного элемента 2D или отреагировать на редактирование библиотечного элемента 2D.
Вызывается КОМПАС при селектировании библиотечного элемента для получения ин"
терфейса характерных точек ILibHPObject или при редактировании библиотечного эле"
мента для получения интерфейса внешних воздействий ILibExternalObject.

LibraryBmpBeginID  Получить для указанного 
размера иконок начало диапазона 
идентификаторов иконок команд библиотеки
Синтаксис:
extern "C" unsigned int WINAPI __export LibraryBmpBeginID (unsigned int bmpSizeType);
Входные параметры:

bmpSizeType " тип размера иконок (типы определены в ksBmpSizeEnum).

Описание:
Функция предназначена для обеспечения отображения иконок команд библиотеки с раз"
мером, соответствующим настройкам интерфейса КОМПАС"3D.
Пример описания ресурсов:
...
MENUITEM "Команда 1", 1
32



 

MENUITEM "Команда 2", 2
MENUITEM "Команда 3", 3
...
// начало диапазона иконок размером 16х16 " 1000
1001 BITMAP "1.bmp"
1002 BITMAP "2.bmp"
1003 BITMAP "3.bmp"
// начало диапазона иконок размером 24х24 " 2000
2001 BITMAP "1_24.bmp"
2002 BITMAP "2_24.bmp"
2003 BITMAP "3_24.bmp"
...
// начало диапазона иконок размером 48х48 " 4000
4001 BITMAP "1_48.bmp"
4002 BITMAP "2_48.bmp"
4003 BITMAP "3_48.bmp"
Примечание:

1.  Функция возвращает начало диапазона для иконок команд в зависимости от требуемого
размера. Значения параметра bmpSizeType определены в ksBmpSizeEnum.

2.  Если иконок нужного размера нет, функция должна вернуть 0, тогда иконки будут про"
масштабированы до запрашиваемого размера от ближайшего размера.

3. Наличие функции не обязательно. В случае ее отсутствия иконки будут автоматически
масштабироваться от имеющегося размера до запрашиваемого.

4. Идентификатор иконки каждого размера должен быть задан как сумма значений начала
диапазона (для каждого диапазона свое) и идентификатора пункта меню команды.

LibCommandState  Получить состояние команды 
библиотеки
Синтаксис:
extern "C" int WINAPI __export LibCommandState(unsigned int comm, int * enable, int *
checked );
Входные параметры:

comm " номер команды.

Выходные параметры:

enable " доступность команды,
checked " состояние команды (нажата/отжата).
33



 

Возвращаемое значение:
Не используется.
Примечание.

1. Функция возвращает состояние команды библиотеки.
2. Функция управляет состоянием команды в меню библиотеки и на библиотечных панелях

команд.

LibraryHintTipsBeginID  Задать идентификатор 
начала диапазона ресурсов для подсказок к 
командам
Синтаксис:
extern "C" unsigned int WINAPI __export LibraryHintTipsBeginID();
Примечание:

1. Функция возвращает начало диапазона идентификаторов строк подсказок к командам
библиотеки. Идентификатор строки подсказки команды должен быть задан как сумма
значений начала диапазона и идентификатора пункта меню команды.

2. Подсказка задается в виде одной строки, состоящей из двух частей, разделенных симво"
лами «\n»: в первой части записывается текст, отображаемый в строке статуса, во второй
— текст, отображаемый во всплывающей подсказке.

3. К тексту, отображаемому в строке статуса, автоматически добавляется (через «\») назва"
ние библиотеки.

4. Наличие данной функции не обязательно.
5. Если функция не определена, или строка подсказки пустая, или идентификатор подсказ"

ки не существует, то подсказка будет формироваться по названию пункта меню коман"
ды.

Оформление прикладных библиотек типа ActiveX
Функции оформления библиотек типа ActiveX 
Пример...
Чтобы создать библиотеку, следует использовать функции оформления библиотек. Они
обеспечивают стыковку системы КОМПАС и приложения.

Пример простейшей программы в среде VB, 
оформленной в виде ActiveX библиотеки КОМПАС
Dim iKompasObject As Object 'KompasObject
Dim iDocument2D As Object 'ksDocument2D
Public Function GetLibraryName() As String
  GetLibraryName = “Самая простая библиотека”
End Function
34



 

Public Sub ExternalRunCommand(ByVal command As Integer, ByVal mode As Integer, ByVal
Kompas As Object)
  Set iKompasObject = Kompas
  If iKompasObject Is Nothing Then
    Exit Sub
  End If
  Set iDocument2D = iKompasObject.ActiveDocument2D
  If iDocument2D Is Nothing Then
    Exit Sub
  End If
  iKompasObject.ksMessage “Строим отрезок!”
  iDocument2D.ksLineSeg 10, 10, 100, 100, 1 ' x1, y1, x2, y2, тип линии " основная
End Sub
Функция ExternalRunCommand " аналог функции LibraryEntry. Ее наличие обязательно,
так как именно ему передает управление КОМПАС при обращении к библиотеке. В дан"
ном случае она обеспечивает выдачу сообщения и построение одного единственного
объекта чертежа " отрезка.

Функции
GetLibraryName  Получить имя библиотеки и 
определить, является ли она библиотекой КОМПАС
TAutoString GetLibraryName();
Синтаксис Visual Basic:
Public Function GetLibraryName() As String

GetHelpFile  Получить имя файла справочной 
системы, подключаемого к библиотеке
TAutoString GetHelpFile();
Синтаксис Visual Basic:
Public Function GetHelpFile() As String

GetImageHeight  Задать высоту окна вывода слайда
long GetImageHeight();
Синтаксис Visual Basic:
Public Function GetImageHeight() As Long

GetImageWidth  Задать ширину окна вывода слайда
long GetImageWidth();
35



 

Синтаксис Visual Basic:
Public Function GetImageWidth() As Long

ExternalRunCommand  Головная функция 
библиотеки
void ExternalRunCommand (short command, 
short mode, 
IDispatch* kompas);
Синтаксис Visual Basic:
Public Sub ExternalRunCommand (ByVal command As Integer, 
ByVal mode As Integer, 
ByVal kompas_ As Object)
Входные параметры:

command " номер выполняемой команды;
mode " режим работы:

0 " normal " обычный режим,
1 " demo " вызов из дистрибутивной задачи в деморежиме,
2 " demoEx " вызов из демоверсии;

kompas " интерфейс KompasObject или IApplication.
Примечание:

1. При вызове команды библиотеки из меню, панели инструментов или при редактирова"
нии библиотечного элемента по двойному нажатию кнопки мыши управление передает"
ся этому методу с номером выбранной команды.

2. Библиотека должна обязательно содержать один из предопределенных методов
ExternalRunCommand, который определяет точку входа в приложение или
LibInterfaceNotifyEntry. Наличие хотя бы одного из этих методов позволяет системе КОМ"
ПАС идентифицировать произвольный ActiveX DLL как собственное приложение.

3. Параметр kompas может быть указателем на интерфейс IApplication, если в библиотеке
есть метод IsOnApplication7, и этот метод вернул значение TRUE, т.е. библиотека работа"
ет на API версии 7. Во всех остальных случаях параметр kompas будет указателем на ин"
терфейс KompasObject.

LibInterfaceNotifyEntry  Головная функция 
библиотеки. Подписка на обработку событий от 
системы
Синтаксис:
BOOL LibInterfaceNotifyEntry (IDispatch *application);
Входные параметры:

application " указатель интерфейса приложения KompasObject,
36



 

Примечание:
Библиотека должна обязательно содержать один из предопределенных методов
ExternalRunCommand, который определяет точку входа в приложение, или
LibInterfaceNotifyEntry. Наличие хотя бы одного из этих методов позволяет системе КОМ"
ПАС идентифицировать произвольный ActiveX DLL как собственное приложение.

ExternalGetMenu  Получить меню библиотеки
OLE_HANDLE ExternalGetMenu (BOOL *enableDelete);
Синтаксис Visual Basic:
Public Function ExternalGetMenu (ByVal enableDelete As Boolean) As OLE_HANDLE
Параметр:
enableDelete " признак удаления меню библиотеки (TRUE " удалять)

ExternalGetImage  Получить слайд для команды 
библиотеки с указанным номером
OLE_HANDLE ExternalGetImage (short command, 
short * enableDelete);
Синтаксис Visual Basic:
Public Function ExternalGetImage (ByVal command As Integer,
enableDelete As Integer) As OLE_HANDLE
Параметры:
command"номер команды
enableDelete " признак удаления слайда (TRUE " удалять)

ExternalMenuItem  Получить строку меню для 
создания меню в виде строк
TAutoString ExternalMenuItem (short number, 
short * itemType, 
short * command);
Синтаксис Visual Basic:
Public Function ExternalMenuItem (ByVal number As Integer,
itemType As Integer, 
command As Integer) As String
Параметры:
number " счетчик строк
itemType " тип строки 
(0 " SEPARATOR (разделитель);
1 " MENUITEM (строка с названием пункта меню);
2 " POPUP (начало выпадающего подменю);
37



 

3 (или любое другое число) " ENDMENU (конец меню\подменю).
command " номер команды, если itemType = 1, 
или "1 во всех остальных случаях

ExternalGetToolBarId  Задать идентификаторы 
панелей управления библиотеки
long ExternalGetToolBarId(short barType, short index);
Входные параметры:

barType " тип запрашиваемой панелей
(0 " компактная панель,
1 " простая инструментальная панель),

index " индекс панели.

Примечание:

1.  Панель описывается тремя ресурсами:
▼  RCDATA состава панели;
▼  имя панели; 
▼  значок инструментальной панели для возможности включения ее в компактную панель.
2.  При описании панелей в ресурсах блок RCDATA необходимо заканчивать значением

0xffff.
3. Сначала запрашиваются обычные инструментальные панели, потом компактные панели.
4. Система будет запрашивать функцию пока возвращаемое значение не будет равно "1.

Если описанная в ресурсе инструментальная панель входит в компактную, то упомина"
ние инструментальной панели в LibToolBarId не обязательно.

5. Отображение созданных панелей можно включить, вызвав команду Вид — Панели ин
струментов после подключения библиотеки.

6.  Кнопки типа Fly"Out.
7. Пример описания ресурсов панелей и кнопки типа Fly"Out.

DisplayLibraryName  Получить имя библиотеки, 
отображаемое при работе КОМПАС
Синтаксис:
BSTR DisplayLibraryName();
Возвращаемое значение:

" Имя библиотеки, отображаемое на дисплее во время работы КОМПАС.

Примечание:
Необязательная функция. Позволяет получить имя библиотеки, которое будет отобра"
жаться на дисплее во время работы системы КОМПАС (в меню, в менеджере библиотек,
38



 

на панелях). Если эта функция не используется, то в качестве имени библиотеки будет
отображаться возвращаемое значение функции GetLibraryName. Имя библиотеки, полу"
ченное при помощи функции GetLibraryName, передается в создаваемые библиотекой
макроэлементы. При редактировании таких макроэлементов по двойному щелчку мыши
или через интерфейс хот"точек система находит библиотеку для редактирования по име"
ни файла, имени библиотеки, по номеру команды. Если выходит новая версия библио"
теки, в ней можно переопределить имя, отображаемое функцией DisplayLibraryName,
оставив прежним имя, возвращаемое GetLibraryName. В этом случае новая библиотека
может быть использована, чтобы редактировать макроэлементы, созданные старыми
версиями библиотеки.

IsOnApplication7  Получить тип версии API 
используемого библиотекой
VARIANT_BOOL IsOnApplication7();
Возвращаемое значение:

TRUE " библиотека использует API версии 7,
FALSE " библиотека использует API версии 5.

Примечание:
Необязательный метод оформления библиотеки. Позволяет задать тип интерфейса, ко"
торый будет передан библиотеке в параметре kompas метода ExternalRunCommand и в
параметре application  метода LibInterfaceNotifyEntry. Если метод в библиотеке не объяв"
лен, то считается что библиотека использует API версии 5.

ExternalGetResourceModule  Задать модуль 
с ресурсами библиотеки
VARIANT ExternalGetResourceModule();
Возвращаемое значение:

HINSTANCE (тип VT_I4), либо имя файла (тип VT_BSTR) dll, в котором 
находятся ресурсы библиотеки.TRUE

Примечание:
Добавлена возможность указания произвольного dll"файла с ресурсами.

Оформление прикладных библиотек типа Addin
Общие сведения о библиотеках типа AddIn
Это обычная библиотека, но она регистрируется в реестре и загружается при запуске си"
стемы КОМПАС. 
Без регистрации в реестре библиотеки такого типа работают как стандартные приклад"
ные библиотеки КОМПАС.
39



 

Регистрация осуществляется в разделе
HKEY_CURRENT_USER\\Software\\ASCON\\KOMPAS"3D\\AddIns или
HKEY_LOCAL_MACHINE\\Software\\ASCON\\KOMPAS"3D\\AddIns. Для регистрации созда"
ется подраздел с уникальным именем (например, именем самой библиотеки). В этом
разделе должны быть два значения:

▼ Тип значения REG_SZ:
"ProgID" " для ActiveX библиотек или "Path" " полный путь к файлу для простых библиотек.
Если есть оба значения "ProgID" и "Path", то "Path" игнорируется. ActiveX библиотека
должна быть зарегистрирована.

▼ Тип значения REG_DWORD:
"AutoConnect" " 1 " подключать библиотеку при запуске КОМПАС, 0 " не подключать.
Если в реестре этого значения нет, то оно по умолчанию принимается равным 1.
Существует два способа регистрации библиотеки в реестре:

▼  при помощью функций DllRegisterServer.
▼  вызов команды regsvr32.exe libname.

Чтобы отменить регистрацию, необходимо использовать функцию DllUnregisterServer
или вызвать команду regsvr32.exe \u libname.
AddIn библиотеки работают в режиме "Меню". Сменить режим нельзя, так же как и от"
ключить библиотеку.

Пример создания библиотеки типа AddIn
1.  #define ADDINS_PATH "HKEY_CURRENT_USER\Software\ASCON\KOMPAS"3D\AddIns\Моя

библиотека"

     STDAPI DllRegisterServer() 
     {
       HRESULT hr = NOERROR;
       TCHAR   szModulePath[MAX_PATH];

       GetModuleFileName( theApp.m_hInstance, szModulePath,
                          sizeof(szModulePath)/sizeof(TCHAR) );

       CString strPath( ADDINS_PATH );
       HKEY hKey;
       DWORD dwDisposition;
       if ( RegCreateKeyEx(HKEY_CURRENT_USER, 
            strPath, 0L, NULL, REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, NULL, 
            &hKey, &dwDisposition) != ERROR_SUCCESS ) 
       {
         hr = E_UNEXPECTED;
40



 

       }
       else 
       {
       hr = RegSetValueEx( hKey, "Path", 0L, REG_SZ,
                         (CONST BYTE*)szModulePath, strlen(szModulePath) );
         DWORD dwVal = 1;
       hr = RegSetValueEx( hKey, "AutoConnect", 0L, REG_DWORD,
                         (CONST BYTE*)&dwVal, sizeof(DWORD) );
       }
       return hr;
     }

     STDAPI DllUnregisterServer() 
     {
       HRESULT hr = NOERROR;
       if ( RegDeleteKey(HKEY_CURRENT_USER, ADDINS_PATH) != ERROR_SUCCESS ) {
         hr = E_UNEXPECTED;
       }
       return hr;
     }            
     

2.  Файлом типа reg
     Пример:
       Файл реестра "MyLibrary.reg" 
       REGEDIT4
       [HKEY_CURRENT_USER\Software\ASCON\KOMPAS"3D\AddIns\Моя библиотека]
       "ProgID"="MyLibrary.class1"
       "Path"="c:\\MyLibrary.rtw"
       "AutoConnect"=dword:00000001 

       Содержимое реестра после регистрации файла "MyLibrary.reg" 
       HKEY_CURRENT_USER
         Software
           ASCON
             KOMPAS"3D
               AddIns 
                 Моя библиотека
                   ProgID       MyLibrary.class1
41



 

                   Path         c:\\MyLibrary.rtw
                   AutoConnect  1

Оформление библиотек типа Converter
Общие сведения о библиотеках типа Converter
Библиотеки типа Converter позволяют выполнять импорт и экспорт документов различ"
ных форматов.
В библиотеке должен быть реализован интерфейс конвертора IKompasConverter.
В библиотеке должны быть реализованы следующие функции.

▼ LIBRARYID " идентификатор для ресурсов библиотеки, который позволяет получить имя
библиотеки и меню команд.

▼ LPKOMPASCONVERTER WINAPI GetIKompasConverter() " предопределенная функция,
возвращающая интерфейс конвертора.

▼ void WINAPI LIBRARYENTRY (unsigned int comm) " точка входа для вызова команд.
Чтобы создать библиотеку, следует использовать функции оформления библиотек. Они
обеспечивают стыковку системы КОМПАС и приложения.
После регистрации конвертора в реестре указанные расширения файлов появляются в
диалогах сохранения (после вызова команды Файл  Сохранить как...) и открытия
файлов. В диалоге сохранения файлов расширения файлов появятся в том случае, если
для текущего типа файла задан номер команды для сохранения SaveCommandID. В диа"
логе открытия файлов фильтр будет содержать все расширения, для которых задан но"
мер команды для открытия OpenCommandID.
Примечание. Номера команд для разных типов файлов могут совпадать.
IKompasConverter::Convert " для сохранения или открытия файла из диалога, как фун"
кция интерфейса.
При сохранении документа в качестве имени исходного файла передается пустая строка,
а в качестве имени выходного файла передается имя, заданное пользователем в диало"
ге. Значение номера команды выбирается из реестра.
При открытии файла в качестве имени исходного файла передается имя, заданное поль"
зователем в диалоге, а в качестве выходного файла передается пустая строка.
При вызове конвертора из прикладной библиотеки может приходить и входное, и выход"
ное имя файла. Это означает, что нужно открыть нужный файл (можно в невидимом ре"
жиме), если он еще не открыт, и конвертировать его. После конвертации, если файл был
открыт конвертором, он должен быть закрыт.

Интерфейс IKompasConverter 
Стандартный интерфейс импорта/экспорта.
Позволяет связать систему КОМПАС и библиотеки импорт/экспорта документов.
Реализуется в библиотеках типа Конвертор
42



 

IKompasConverter  свойства
CanUnloadLibrary  Разрешение на выгрузку 
библиотеки из памяти
Интерфейс...
Тип данных:BOOL.
Значения свойства:

TRUE " библиотеку можно выгружать из памяти,
FALSE " библиотеку нельзя выгружать из памяти.

Синтаксис Automation:

CanUnloadLibrary = iObject.CanUnloadLibrary Получить свойство (* )
CanUnloadLibrary = iObject.GetCanUnloadLibrary( ) Получить свойство (**)

Синтаксис COM:

iObject">get_CanUnloadLibrary ( &CanUnloadLibrary ) Получить свойство.

Примечание:
Если внутренний интерфейс параметров захвачен другими пользователями, то библио"
теку нельзя выгружать из памяти до тех пор, пока он не освободится. Так как в системе
КОМПАС предусмотрена автоматическая выгрузка библиотек, то перед выгрузкой будет
вызвана эта функция и библиотека будет выгружена, только если она вернет TRUE.

CIonverterParameters  Получить параметры 
конвертора
Интерфейс...
Синтаксис Automation:
LPDISPATCH ConverterParameters( long command);
Синтаксис COM:
HRESULT ConverterParameters ( [in] long command, [out, retval] IUnknown** iParam );
Входные параметры:

command " номер команды.

Возвращаемое значение:

указатель на интерфейс IUnknown " в случае успешного завершения,
0 " в случае неудачи.
43



 

Примечание:
Данный метод позволяет получить интерфейс параметров конвертирования.

GetFilter Получить фильтр и номер команды по типу 
документа 
Интерфейс...
Синтаксис Automation:
BSTR * GetFilter ( long docType, BOOL saveAs, long * command );
Синтаксис COM:
HRESULT GetFilter ( [in] long docType,
[in] VARIANT_BOOL saveAs,
[out] long * command,
[out, retval] BSTR* Result );
Входные параметры:

docType при импорте в КОМПАС"документ " тип документа из перечисления 
DocumentTypeEnum,
при экспорте КОМПАС"документа " тип документа, в который 
производится экспорт; перечисление типов документов должно 
быть задано в конверторе. Например, для конвертора в DXF и DWG 
используются типы:
#define FORMAT_DXF  1     // ID команды для работы с DXF
#define FORMAT_DWG  2   // ID команды для работы с DWG

saveAs " TRUE " экспорт документа КОМПАС,
" FALSE " импорт в документ КОМПАС.

Выходные параметры:

command " номер команды.

Возвращаемое значение:

фильтр " строка с справочным значением (например, "КОМПАС"фрагменты (*.myfrw 
|*.myfrw|" ), которое используется в диалогах открытия и сохранения файлов.

Convert  Запустить процесс конвертации
Интерфейс...
Синтаксис Automation:
long * Convert ( BSTR inputFile, BSTR outfile, long command, BOOL showParam );
Синтаксис COM:
HRESULT Convert ( [in] BSTR inputFile,
[in] BSTR outfile,
[in] long command,
44



 

[in] VARIANT_BOOL showParam,
[out, retval] long* Result );
Входные параметры:

inputFile " имя исходного файла документа,
outfile " новое имя файла документа,
command " номер команды,
showParam " TRUE " выдавать диалог параметров конвертации,

" FALSE " не выдавать диалог параметров конвертации.

Возвращаемое значение:

1  " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Если имя исходного файла документа не задано, то берётся текущий документ, если но"
вое имя файла документа не задано, то конвертация будет происходить в новый доку"
мент системы КОМПАС.

VIisualEditConvertParam  Запустить визуальное 
редактирование параметров конвертации
Интерфейс...
Синтаксис Automation:
BOOL * VisualEditConvertParam ( OLE_HANDLE parentHwnd, long command );
Синтаксис COM:
HRESULT VisualEditConvertParam ( [in] OLE_HANDLE parentHwnd,
[in] long command,
[out, retval] VARIANT_BOOL * val );
Входные параметры:

parentHwnd " дескриптор окна родителя,
command " номер команды.

Возвращаемое значение:

TRUE " выход из диалога по кнопке OK,
FALSE " выход из диалога по кнопке Отмена.
45



 

46



 

API интерфейсов. Версия 7
Приложение
Интерфейс IKompasAPIObject
Базовый объект КОМПАС API (скрытый).
Примечание:
Данный интерфейс является базовым для всех интерфейсов КОМПАС API, кроме интер"
фейсов событий и некоторых вспомогательных интерфейсов.

IKompasAPIObject  свойства
Application  Ссылка на приложение
Интерфейс...
Тип данных: указатель на интерфейс IApplication.
Синтаксис Automation:

Application = iObject.Application Получить свойство(* ) 
Application = iObject.GetApplication() Получить свойство(**)

Синтаксис COM:

iObject">get_Application (&Application) Получить свойство.

Примечание:
Свойство доступно только для чтения. Возвращает указатель на интерфейс приложения
КОМПАС.

Parent  Ссылка на владельца
Интерфейс...
Тип данных: указатель на интерфейс IKompasAPIObject.
Синтаксис Automation:

Parent = iObject.Parent Получить свойство(* ) 
Parent = iObject.GetParent() Получить свойство(**)

Синтаксис COM:

iObject">get_Parent (&Parent) Получить свойство

Примечание:
47



 

Свойство доступно только для чтения. Возвращает указатель на интерфейс, у которого
был взят данный объект.

Reference  Уникальный идентификатор объекта
Интерфейс...
Тип данных: long.
Синтаксис Automation:

Reference = iObject.Reference Получить свойство(* ) 
Reference = iObject.GetReference() Получить свойство(**)

Синтаксис COM:

iObject">get_Reference (&Reference) Получить свойство.

Примечание:
Свойство доступно только для чтения. Является скрытым; недоступно в таких языках как
VB и т.п.

Type  Тип объекта
Интерфейс...
Тип данных: тип объекта из перечисления KompasAPIObjectTypeEnum.
Синтаксис Automation:

Type = iObject.Type Получить свойство(* ) 
Type = iObject.GetType() Получить свойство(**)

Синтаксис COM:

iObject">get_Type (&Type) Получить свойство

Примечание:
Свойство доступно только для чтения. Позволяет определить тип объекта и его интер"
фейс.

Интерфейс IKompasCollection
Базовая коллекция КОМПАС API (скрытый).
Иерархия:
IKompasAPIObject

IKompasCollection
Примечание:
Данный интерфейс является базовым для всех интерфейсов коллекций КОМПАС API.
48



 

Индекс первого элемента коллекции 0.

IKompasCollection  свойства
_NewEnum  Возвращает коллекцию (в VB циклы: For 
Each)
Интерфейс...
Тип данных: указатель на интерфейс IUnknown объекта"перечислителя.
Примечание:
Данное свойство позволяет реализовывать циклический проход по коллекции с помо"
щью специальных операторов цикла, таких как оператор For Each в Visual Basic.

Count  Количество элементов в коллекции
Интерфейс...
Тип данных: long.
Синтаксис Automation:

Count = iObject.Count Получить свойство(* ) 
Count = iObject.GetCount() Получить свойство(**)

Синтаксис COM:

iObject">get_Count (&Count) Получить свойство

Примечание:
Свойство доступно только для чтения.

Интерфейс IApplication 
Интерфейс приложения КОМПАС3D.
Иерархия:
IKompasAPIObject

IApplication
IAttrTypeMng
IPropertyMng

Примечание:
1. Приложение КОМПАС"3D регистрируется с ProgID «KOMPAS.Application.7».
2. После запуска приложения из"под внешнего контроллера оно работает в слепом режи"

ме. Чтобы оно стало видимым, нужно установить свойству IApplication::Visible значение
TRUE.

3. Данный интерфейс приложения можно получить у любого объекта с помощью свойства
IKompasAPIObject::Application.
49



 

4. Интерфейс приложения может быть создан следующими способами:
▼ в С с помощью функций HINSTANCE LoadLibrary(LibFileName), GetProcAddress,

CreateKompasApplication(), пример создания интерфейса реализован в функции
GetNewKompasAPI() " SDK\VisualC: Gayka1, Step12, Cube;

▼ в Delphi с помощью функции CreateKompasApplication, пример создания интерфейса ре"
ализован в функции GetNewKompasAPI() " SDK\Pascal\Delphi: Gayka1, Step12, Cube;

▼ в VBasic с помощью функции ksGetApplication7, пример создания интерфейса реализо"
ван в SDK\Basic: Gayka1, events.

5. Посредством вызова метода IUnknown::QueryInterface (const GUID far& iid, void** pif) у
данного интерфейса можно получить дополнительные интерфейсы IAttrTypeMng,
IPropertyMng и IApplicationLicenseManager.

 IApplication  свойства
ActiveDocument  Получить текущий активный документ
Интерфейс...
Тип данных: указатель на интерфейс IKompasDocument.
Синтаксис Automation:

ActiveDocument = iObject.ActiveDocument Получить свойство (* )
iObject.ActiveDocument = ActiveDocument Установить свойство (* )
ActiveDocument = iObject.GetActiveDocument() Получить свойство(**)
iObject.SetActiveDocument (ActiveDocument) Установить свойство (**)

Синтаксис COM:

iObject">get_ActiveDocument (&ActiveDocument) Получить свойство
iObject">put_ActiveDocument (ActiveDocument) Установить свойство

Примечание:
Свойство позволяет получить или установить текущий документ, если ни один документ
не открыт.

ApplicationName  Имя приложения
Интерфейс...
Тип данных: BOOL.
Синтаксис Automation:

ApplicationName = Object.ApplicationName( FullName ) Получить свойство(* )
ApplicationName = Object.GetApplicationName( FullName ) Получить свойство(**)

Синтаксис COM:
50



 

 Object.get_ApplicationName( FullName, &ApplicationName ) Получить свойство,

Входные параметры:

BOOL " FullName" полное имя,
TRUE " полное отображаемое имя приложения в заголовке окна Компас,
FALSE " нелокализованное английское имя.

CheckSum  Интерфейс контрольной суммы
Интерфейс...
Тип данных: Указатель на интерфейс ICheckSum.
Синтаксис Automation:

ICheckSum * CheckSum = Application.CheckSum Получить свойство(* ) 
ICheckSum * CheckSum = Application.GetCheckSum() Получить свойство(**)

Синтаксис COM:

HRESULT get_CheckSum (ICheckSum ** pRes) Получить свойство,

Примечание:
Свойство доступно только для чтения.

Converter  Конвертация документов КОМПАС
Интерфейс...
Тип данных: указатель на интерфейс IConverter конвертера файлов КОМПАС.
Синтаксис Automation:

Converter = iObject.Converter (Library) Получить свойство(* )
Converter = iObject.GetConverter (Library) Получить свойство(**)

Синтаксис COM:

iObject">get_Converter (Library, &Converter) Получить свойство,

Входные параметры:

Library " полный путь к библиотеке, тип VARIANT.

Примечание:
Свойство доступно только для чтения.
51



 

CurrentDirectory  Текущий каталог
Интерфейс...
Тип данных: BSTR
Синтаксис Automation:

CurrentDirectory = Object.CurrentDirectory Получить свойство (* )
Object.CurrentDirectory = CurrentDirectory Установить свойство (* )
CurrentDirectory = Object.GetCurrentDirectory() Получить свойство(**)
Object.SetCurrentDirectory( CurrentDirectory ) Установить свойство (**)

Синтаксис COM:

Object.get_CurrentDirectory( &CurrentDirectory ) Получить свойство,
Object.put_CurrentDirectory(  CurrentDirectory ) Установить свойство.

Примечание
При работе функций КОМПАС может изменяться текущий рабочий каталог приложения.
Свойство позволяет получить/установить текущий рабочий каталог.

Documents  Коллекция открытых документов 
в приложении
Интерфейс...
Тип данных: указатель на интерфейс коллекции документов IDocuments.
Синтаксис Automation:

Documents = iObject.Documents Получить свойство(* )
Documents = iObject.GetDocuments() Получить свойство(**)

Синтаксис COM:

iObject">get_Documents (&Documents) Получить свойство,

Примечание:
Свойство доступно только для чтения.

HideMessage  Скрывать/показывать сообщения
Интерфейс...
Тип данных: константа из перечисления ksHideMessageEnum.
Синтаксис Automation:

ksHideMessageEnum HideMessage = Application.HideMessage Получить свойство (* )
Application.HideMessage = HideMessage Установить свойство (* )
52



 

ksHideMessageEnum HideMessage = Получить свойство(**)
Application.GetHideMessage()
Application.SetHideMessage (HideMessage) Установить свойство (**)

Синтаксис COM:

HRESULT get_HideMessage (ksHideMessageEnum * pRes) Получить свойство,
Application">put_HideMessage (HideMessage) Установить свойство.

Примечание:

1. После использования флагов ksHideMessageYes или ksHideMessageNo в прикладной би"
блиотеке необходимо предусматривать взведение флага ksShowMessage по завершении
работы библиотеки или команды библиотеки. В противном случае сообщения останутся
подавленными в визуальном режиме работы с системой КОМПАС.

2. Константа ksHideMessageYes позволяет выполнять перестроения документа, скрывая
все запросы на перестроение.

3. Константа ksHideMessageNo позволяет не выполнять перестроения документа, скрывая
все запросы на перестроение.

4. Для всех сообщений с одной кнопкой ОК константы ksHideMessageYes и
ksHideMessageNo одинаковым образом скрывают сообщения с обработкой нажатия ОК.

5.  Для всех запросов с выбором ДА и НЕТ константа ksHideMessageYes позволяет скрыть
запрос с обработкой выбора варианта ДА, константа ksHideMessageNo позволяет
скрыть запрос с обработкой выбора варианта НЕТ.

6. При открытии спецификации, когда отсутствует файл graphic.lyt, константы
ksHideMessageYes и ksHideMessageNo позволяют скрыть запрос на выбор нового стиля
с отказом от выбора нового стиля.

7. При открытии спецификации, когда имеется рассогласование с объектами, константа
ksHideMessageYes позволяет скрыть запрос Обнаружено рассогласование между
спецификацией и сборкой с выбором варианта Взять объект из сборки и скрыть за"
прос В сборке отсутствует объект с выбором варианта Восстановить в сборке. Кон"
станта ksHideMessageNo позволяет скрыть запрос Обнаружено рассогласование
между спецификацией и сборкой с выбором варианта Взять объект из специфи
кации, и скрыть запрос В сборке отсутствует объект с выбором варианта Удалить из
спецификации.

8. При открытии спецификации, когда отсутствует файл чертежа, связанного со специфи"
кацией, константа ksHideMessageYes позволяет скрыть сообщение с удалением чертежа
из спецификации, константа ksHideMessageNo позволяет скрыть сообщение без удале"
ния чертежа из спецификации.

9. При открытии чертежа со вставкой внешних фрагментов, когда фрагменты отсутствуют,
константа ksHideMessageYes позволяет скрыть запрос с обработкой выбора варианта
удаления из чертежа отсутствующих фрагментов, константа ksHideMessageNo позволяет
скрыть запрос с обработкой выбора варианта игнорировать отсутствующие фрагменты.

10.  При открытии ассоциативного чертежа, когда файл модели, связанной с чертежом, от"
сутствует, константа ksHideMessageYes позволяет скрыть запрос с обработкой выбора
варианта удаления из чертежа видов, связанных с отсутствующими моделями, константа
53



 

ksHideMessageNo позволяет скрыть запрос с обработкой выбора варианта игнорировать
отсутствующие модели.

KompasError  Информация об ошибке системы КОМПАС
Интерфейс...
Тип данных: указатель на интерфейс IKompasError информации о ошибке системы КОМ"
ПАС.
Синтаксис Automation:

KompasError = iObject.KompasError Получить свойство(* ) 
KompasError = iObject.GetKompasError() Получить свойство(**)

Синтаксис COM:

iObject">get_KompasError (&KompasError) Получить свойство,

Примечание:
Свойство доступно только для чтения.

LibraryManager  Менеджер библиотек
Интерфейс...
Тип данных: указатель на интерфейс ILibraryManager менеджера библиотек.
Синтаксис Automation:

LibraryManager = iObject.LibraryManager Получить свойство(* ) 
LibraryManager = iObject.GetLibraryManager() Получить свойство(**)

Синтаксис COM:

iObject">get_LibraryManager (&LibraryManager) Получить свойство,

Примечание:
Свойство доступно только для чтения.

LibraryStyles  Стили из библиотеки
Интерфейс...
Тип данных: Указатель на интерфейс IStyles 
Синтаксис Automation:

LibraryStyles = Object.LibraryStyles( Path, StylesType ) Получить свойство(* ) 
LibraryStyles = Object.GetLibraryStyles( Path, StylesType ) Получить свойство(**)

Синтаксис COM:
54



 

Object.get_LibraryStyles( Path, StylesType, &LibraryStyles ) Получить свойство,

Примечание:
Свойство доступно только для чтения.

Math2D  Интерфейс 2D математики
Интерфейс...
Тип данных:указатель на интерфейс IMath2D.
Синтаксис Automation:

Math2D = Object.Math2D Получить свойство(* ) 
Math2D = Object.GetMath2D() Получить свойство(**)

Синтаксис COM:

Object.get_Math2D( &Math2D ) Получить свойство,

Примечание:
Свойство доступно только для чтения.

PrintJob  Интерфейс задания на печать
Интерфейс...
Тип данных:указатель на интерфейс IPrintJob
Синтаксис Automation:

PrintJob = Object.PrintJob Получить свойство(* )
PrintJob = Object.GetPrintJob() Получить свойство(**)

Синтаксис COM:

Object.get_PrintJob( &PrintJob ) Получить свойство,

Свойство позволяет получать интерфейс задания на печать.
Примечание:
Свойство доступно только для чтения.

ProgressBarIndicator  Интерфейс индикатора прогресса
Интерфейс...
Тип данных: указатель на интерфейс IProgressBarIndicator.
Синтаксис Automation:
55



 

IProgressBarIndicator * ProgressBarIndicator = Получить свойство(* ) 
Application.ProgressBarIndicator
IProgressBarIndicator * ProgressBarIndicator = Получить свойство(**)
Application.GetProgressBarIndicator()

Синтаксис COM:

HRESULT get_ProgressBarIndicator (IProgressBarIndicator ** pRes) Получить свойство

SystemSettings  Интерфейс параметров системы 
Интерфейс...
Тип данных: указатель на интерфейс ISystemSettings.
Синтаксис Automation:

ISystemSettings * SystemSettings = Application.SystemSettings Получить свойство(* )
ISystemSettings * SystemSettings = Application.GetSystemSettings() Получить свойство(**)

Синтаксис COM:

HRESULT get_SystemSettings (ISystemSettings ** pRes) Получить свойство

Примечание:
Свойство доступно только для чтения.

Visible  Видимость приложения
Интерфейс...
Тип данных: BOOL
Синтаксис Automation:

Visible = iObject.Visible Получить свойство (* )
iObject.Visible = Visible Установить свойство (* )
Visible = iObject.GetVisible() Получить свойство(**)
iObject.SetVisible (Visible) Установить свойство (**)

Синтаксис COM:

iObject">get_Visible (&Visible) Получить свойство,
iObject">put_Visible (Visible) Установить свойство.

Примечание:
Позволяет получить и установить свойство видимости приложения КОМПАС"3D.
56



 

IApplication  методы
CreateProcessParam  Получить интерфейс параметров 
процесса
Интерфейс...
Синтаксис Automation:
LPDISPATCH CreateProcessParam();
Синтаксис COM:
HRESULT CreateProcessParam([out, retval] IProcessParam** processParam);
Возвращаемое значение:

 указатель на интерфейс IProcessParam " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Данный метод создает новые параметры процесса и возвращает их. Параметры будут
удалены после их освобождения библиотекой, поэтому библиотека должна держать
