ksPartCollection или IPartCollection.

Интерфейс булевой операции  над твердыми 
телами(Интерфейсы ksAggregateDefinition, 
IAggregateDefinition)
Справка системы КОМПАС...
kompas.chm::/730_87_5_Buleva_operacija.htm
Интерфейс булевой операции над твердыми телами.

ksAggregateDefinition " интерфейс Automation
IAggregateDefinition " интерфейс COM

IAggregateDefinition свойства
BooleanType  Тип операции над телами
Интерфейс...
Тип данных: long
Синтаксис Automation:

BooleanType = iAggregateDefinition.BooleanType Получить
свойство(* )

iAggregateDefinition.BooleanType = BooleanType Установить
свойство (* )

BooleanType = iAggregateDefinition.GetBooleanType() Получить
свойство (**)

iAggregateDefinition.SetBooleanType( BooleanType ) Установить
свойство (**)

Типы булевых операций над твердыми телами...
3621



Примечание:
Коллекцию тел можно получить с помощью методов
ksAggregateDefinition::BodyCollection и IAggregateDefinition::BodyCollection.

IAggregateDefinition  методы
BodyCollection  Получить указатель на интерфейс 
массива тел
Интерфейс...
Синтаксис Automation:
LPDISPATCH BodyCollection();
Синтаксис COM:
LPBODYCOLLECTION BodyCollection();
Возвращаемое значение:

" указатель на интерфейс массива тел ksBodyCollection или IBodyCollection.
3622



Графический документ (Интерфейсы  
ksDocument2D и IDocument2D)
Интерфейс графического документа системы КОМПАС
Интерфейс событий графического документа; работа с файлами...
Примечание:
Данный интерфейс в автоматизации может быть получен от интерфейса API Kompas
KompasObject с помощью методов KompasObject::Document2D,
KompasObject::ActiveDocument2D.

ksDocument2D  свойства
OrthoMode  Режим ортогонального черчения
Интерфейс...

Справка системы КОМПАС...
Тип данных: VARIANT_BOOL
Синтаксис Automation:

orthoMode = iDocument2D.orthoMode Получить
свойство (* )

iDocument2D.lookStyle = orthoMode Установить
свойство (* )

orthoMode = Получить
iDocument2D.GetOrthoMode() свойство (**)
iDocument2D.SetOrthoMode(orthoMode Установить
) свойство (**)

Примечание:
Используется только для визуальных документов.

Reference  Указатель на графический документ 
системы КОМПАС
Интерфейс...
Тип данных: long
Синтаксис Automation:

ref = iDocument2D.reference Получить
свойство (* )

iDocument2D.reference = ref Установить
свойство (* )

ref = iDocument2D.GetReference() Получить
свойство (**)

iDocument2D.SetReference(ref) Установить
свойство (**)
3623



ksDocument2D  методы
GetDocument2DNotify  Получить источник событий для 
графического документа
Интерфейс...
Синтаксис Automation:
Document2DNotify* GetDocument2DNotify();
Возвращаемое значение:
 

" указатель на интерфейс источника событий Document2DNotify.

ksSetLightObjType  Установить тип подсветки объекта 
(light=1  красный) или (light=0  зеленый)
Интерфейс...
Аналог данного метода при использовании API экспортных функций " ksSetLightObjType.
Синтаксис Automation:
long  ksSetLightObjType( reference ref, long light ); 
Входные параметры:

ref " указатель на объект,
light " light=1 " красный или light=0 " зеленый.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

ksGetObjectNameByType  Вернуть имя объекта по его 
типу
Интерфейс...
Аналог данного метода при использовании API экспортных функций "
ksGetObjectNameByType.
Синтаксис Automation:
BSTR  ksGetObjectNameByType( long type ); 
Входные параметры:

type " тип объекта из перечисления DrawingObjectTypeEnum.

Возвращаемое значение:
3624



" Строковое имя типа объекта " отрезок, дуга и т.д..

ksGetObjectNameByTypeW  Вернуть имя объекта по его 
типу. Множественное число
Интерфейс...
Аналог данного метода при использовании API экспортных функций "
ksGetObjectsNameByType.
Синтаксис Automation:
BSTR  ksGetObjectsNameByType( long type ); 
Входные параметры:

type " тип объекта из перечисления DrawingObjectTypeEnum.

Возвращаемое значение:

" Строковое имя типа объекта " отрезок, дуга и т.д..

GetFragment  Получить указатель на интерфейс 
фрагмента
Интерфейс...
Синтаксис Automation:
LPDISPATCH GetFragment();
Возвращаемое значение:

" указатель на интерфейс фрагмента ksFragment.

GetObject2DNotify  Получить интерфейс источника 
событий для 2D документов
Интерфейс...
Синтаксис Automation:
ksObject2DNotify * GetObject2DNotify (long objType);
Входные параметры:

objType " объекты, для которых предназначен данный интерфейс 
событий.

Возвращаемое значение:
3625



" указатель на интерфейс источника событий Object2DNotify.

Примечание:
Значением objType является либо тип объекта (ALL_OBJ...AXISLINE_OBJ, VIEW_OBJ), ли"
бо указатель на объект.

▼ Если задан тип объекта, события генерируются для всех объектов этого типа.
▼ Если задан указатель на объект, события генерируются только для этого объекта.
▼ Если задан тип объектов ALL_OBJ, события генерируются для всех объектов.

GetObject2DNotifyResult  Получить интерфейс 
результатов редактирования объекта графического 
документа
Интерфейс...
Аналог данного метода при использовании API экспортных функций "
ksGetObject2DNotifyResult.
Синтаксис Automation:
ksObject2DNotifyResult * GetObject2DNotifyResult();
Возвращаемое значение:

" указатель на интерфейс результатов редактирования объекта 
ksObject2DNotifyResult.

GetSelectionMngNotify  Получить интерфейс источника 
событий для графических документов  менеджер 
выделенных объектов
Интерфейс...
Синтаксис Automation:
ksSelectionMngNotify * GetSelectionMngNotify();
Возвращаемое значение:

" указатель на интерфейс источника событий SelectionMngNotify.

GetSpecification  Получить указатель на интерфейс для 
работы с объектами спецификации
Интерфейс...
Синтаксис Automation:
LPDISPATCH GetSpecification();
Возвращаемое значение:
3626



" указатель на интерфейс для работы с объектами спецификации ksSpecification.

GetStamp  Получить интерфейс ksStamp основной 
надписи документа
Интерфейс...
Синтаксис Automation:
LPDISPATCH GetStamp();
Возвращаемое значение:

" указатель на интерфейс основной надписи ksStamp.

GetStampEx  Получить указатель на интерфейс 
основной надписи чертежа
Интерфейс...
Синтаксис Automation:
LPDISPATCH GetStampEx (long sheetNumb);
Входные параметры:

sheetNumb " номер листа, начиная с 1.

Возвращаемое значение:

" указатель на интерфейс основной надписи ksStamp.

ksAssociationViewMatrix3D  Создать матрицу 
ассоциативного вида
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций "
ksAssociationViewMatrix3D.
Синтаксис Automation:
VARIANT ksAssociationViewMatrix3D (long view);
Входные параметры:

view " указатель на ассоциативный вид.

Возвращаемое значение:
3627



SAFEARRAY double (VT_ARRAY | VT_R8)
В массиве будут лежать 16 элементов, которые представляют со"
бой матрицу размера 4х4.

Примечание:
Если указатель на вид не задан (view = 0), то метод будет выполняться для текущего ви"
да.

ksCalcRasterScale  Рассчитать масштаб для вставки 
растра в прямоугольник заданных габаритов
Интерфейс...
Аналог данного метода при использовании API экспортных функций " ksCalcRasterScale.
Синтаксис Automation:
double ksCalcRasterScale (BSTR fileName, double w, double h);
Входные параметры:

fileName " полный путь к файлу растра,
w " ширина габаритного прямоугольника,
h " высота габаритного прямоугольника.

Возвращаемое значение:

масштаб для вставки растра в прямоугольник " в случае успеха,
0 " в случае неудачи.

ksChangeLeader  Создать линию выноску для 
обозначения изменения
Интерфейс...Справка системы КОМПАС...

Синтаксис Automation:
long ksChangeLeader( LPDISPATCH leaderParam );
Входные параметры:

leaderParamr " указатель на интерфейс параметров обозначения 
изменения ksChangeLeaderParam.

Возвращаемое значение:

указатель reference обозначения изменения " в случае успешного завершения.
3628



ksChangeObjectInLibRequest  Изменить фантом или 
компоненты команд
Интерфейс...
Аналог данного метода при использовании API экспортных функций "
ksChangeObjectInLibRequest.
Синтаксис Automation:
long ksChangeObjectInLibRequest (LPDISPATCH info, 
LPDISPATCH phantom);
Входные параметры:

info " указатель на интерфейс ksRequestInfo,
phantom " указатель на интерфейс ksPhantom.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Во время работы методов ksDocument2D::ksCursor и ksDocument2D::ksPlacement может
возникнуть необходимость изменить фантом или компоненты команд. Функция
ksChangeObjectInLibRequest позволяет передать изменения в цикл ksCursor и
ksPlacement. Это может понадобиться для отработки команд пользовательских инстру"
ментальных панелей.
Предварительно нужно убедиться, что вызов ksCursor и требование к ksCursor переда"
ются в одном документе. Если какой"либо указатель равен 0, соответствующий параметр
не используется.

ksChangeObjectsOrder  Изменить порядок отрисовки 
объектов чертежа
Интерфейс...

Справка системы КОМПАС...
Аналог данного метода при использовании API экспортных функций "
ksChangeObjectsOrder.
Синтаксис Automation:
long ksChangeObjectsOrder (long group, long obj, int orderType);
Входные параметры:
3629



group " указатель на группу объектов, для которой требуется 
изменить последовательность отрисовки,

obj " указатель на объект, относительно которого изменяется 
отрисовка группы,

orderType " Тип изменения порядка объектов.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

ksColouringEx  Создать фоновую заливку цветом
Интерфейс...
Аналог данного метода при использовании API экспортных функций " ksColouringEx.
Синтаксис Automation:
long ksColouringEx (long color, reference group);
Входные параметры:

color " цвет заливки,
group " группа, образующая границу заливки.

Возвращаемое значение:

указатель на заливку " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Если color = "1 или 0xFFFFFFFF,то создается заливка цветом фона документа.

ksCommandWindow  Запрос к системе на создание окна 
с деревом команд
Интерфейс...
Аналог данного метода при использовании API экспортных функций " CommandWindow.
Синтаксис Automation:
long ksCommandWindow (LPDISPATCH info);
Входной параметр:

info " указатель на интерфейс ksRequestInfo,

Возвращаемое значение:
3630



" идентификатор выбранной команды, определенный " в случае успешного завершения,
в файле ресурсов,
" порядковый номер в строке команд.
"1 " если команда не выбрана.

Примечание:
Функция создает окно с деревом команд, определяемых строкой команд в интерфейсе
ksRequestInfo, или идентификатором меню из файла ресурсов. Команды в строке разде"
лены пробелом или восклицательным знаком. Функции обратной связи передается
управление после выбора команды или отказа. 
В случае, если callBack равен NULL, управление из ksCommandWindow возвращается не"
медленно после выбора команды. В противном случае управление вернется, если поль"
зователь закроет окно, или функция обратной связи вернет FALSE.

ksCopyObjEx  Копировать объект
Интерфейс...
Аналог данного метода при использовании API экспортных функций " ksCopyObjEx.
Синтаксис Automation:
long ksCopyObjEx (LPDISPATCH param);
Входные параметры:
 

param " указатель на интерфейс параметров копирова"
ния объекта ksCopyObjectParam.

Возвращаемое значение:

указатель на объект или группу " в случае успешного завершения,
объектов
0 " в случае неудачи.

Примечание:

1. Функция позволяет копировать объект (объект вида, вид, группу, слой) в новую точку с
возможностью задания масштабирования копии и поворота ее вокруг базовой точки.

2. При копировании одиночного объекта новый объект создается на текущем слое текуще"
го вида.

3. При копировании группы объектов слой сохраняется.
4. При копировании одиночного многослойного макрообъекта он перестает быть много"

слойным. Макро и входящие в него объекты переносятся на текущий слой. Для копиро"
вания многослойного макро с сохранением многослойности требуется добавить его в
группу.
3631



ksCreateViewObject  Создать объект заданного типа, 
используя визуальный процесс создания объекта
Интерфейс...Аналог данного метода при использовании API экспортных функций "
ksCreateViewObject.
Синтаксис Automation:
long ksCreateViewObject (long type);
Входной параметр:

type " тип объекта.

Типы объектов и интерфейсы...
Возвращаемое значение:

указатель на созданный объект " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
Метод распространяется на все объекты вида, кроме слоя, контура, нетипизированного
макроэлемента, вставленного фрагмента и дуги эллипса.
Так как сиcтема может работать только с одним процессом, то нужно завершить другие
"процессные" методы: ksDocument2D::ksCursor, ksDocument2D::ksPlacement,
ksDocument2D::ksCommandWindow.

ksCursor  Запрос к системе на получение точки
Интерфейс...
Аналог данного метода при использовании API экспортных функций " Cursor.
Синтаксис Automation:
long ksCursor (LPDISPATCH info, 
double* x, 
double* y, 
LPDISPATCH phantom);
Входные параметры:

info " указатель на интерфейс ksRequestInfo,
phantom " указатель на интерфейс ksPhantom.

Выходные параметры:

x, y " возвращаемые координаты точки.

Возвращаемое значение:
3632



"1 " если точка указана.
идентификатор выбранной команды,
определенный в файле ресурсов,
порядковый номер в строке команд.

Примечание:
Интерактивный ввод точки или определение варианта действия. Возможные варианты
(команды) задаются в строке commands интерфейса ksRequestInfo и разделяются вос"
клицательными знаками или пробелами. 
Если вместо строки в качестве параметра передать идентификатор меню из файла ре"
сурсов, то соответствующее меню будет выдано в окне приглашений. 
Если в качестве адреса _callBack передается NULL, то действие метода прекращается по"
сле первого шага.

ksCursorEx  Запрос к системе на получение координат 
точки или определение варианта действия
Интерфейс...
Аналог данного метода при использовании API экспортных функций " CursorEx.
Синтаксис Automation:
long ksCursorEx (LPDISPATCH info,
double* x,
double* y,
LPDISPATCH phantom,
LPDISPATCH processParam);
Входные параметры:

info " указатель на интерфейс параметров запроса к системе ksRequestInfo,
phantom " указатель на интерфейс фантома ksPhantom,
processParam " указатель на интерфейс параметров процесса IProcessParam.

Выходные параметры:

x, y " возвращаемые координаты точки.

Возвращаемое значение:

"1 " если указана точка,
0 " отказ (Esc), идентификатор выбранной коман"

ды из командной строки или меню, определен"
ный в файле ресурсов.

Примечание:
Возможные варианты (команды) задаются в строке commands интерфейса
ksRequestInfo и разделяются восклицательными знаками или пробелами. Если вместо
3633



строки в качестве параметра передать идентификатор меню из файла ресурсов, то соот"
ветствующее меню будет выдано в окне приглашений. Если функция обратной связи
ksRequestInfo не определена, то действие метода прекращается после первого шага.

ksDestroyObjects  Разрушить присланные составные 
объекты
Интерфейс...

Справка системы КОМПАС...
Аналог данного метода при использовании API экспортных функций " ksDestroyObjects.
Синтаксис Automation:
long ksDocument2D::ksDestroyObjects (long p)
Входной параметр:

p " указатель на объект, вид, слой или группу.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1. Метод разрушает не только составные объекты (макроэлементы, вставки фрагментов,
эквидистанты, прямоугольники, контуры), но и виды (если у них есть связь с моделью).

2. Метод работает только для документов, открытых в «видимом» режиме.

ksDrawKompasDocument  Отрисовать документ 
системы КОМПАС как слайд в присланном окне
Интерфейс...
Аналог данного метода при использовании API экспортных функций "
ksDrawKompasDocument.
Синтаксис Automation:
long ksDrawKompasDocument (long HWindow, 
BSTR docFileName);
Входные параметры:

Hwindow " "несущее" окно,
docFileName  " полное имя файла документа.

Возвращаемое значение:
3634



1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Действие метода распространяется также на фрагменты и модели из библиотек. При
этом имя файла должно иметь вид "c:\gr\lib1.l3d|детали|литье|фланец", где:
c:\gr\lib1.l3d " имя файла библиотеки,
|детали|литье| " разделы, подразделы внутри библиотеки,
фланец " имя фрагмента или модели.

ksDrawKompasGroup  Отрисовать группу как слайд в 
присланном окне
Интерфейс...
Аналог данного метода при использовании API экспортных функций "
ksDrawKompasGroup.
Синтаксис Automation:
long ksDrawKompasGroup (long HWindow, long gr);
Входные параметры:

Hwindow " "несущее" окно,
gr " указатель на группу.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

ksFindObj  Найти ближайший к заданной точке объект 
вида
Интерфейс...
Аналог данного метода при использовании API экспортных функций " FindObj.
Синтаксис Automation:
long ksFindObj (double x, double y, double limit);
Входные параметры:

x, y " координаты точки,
limit " размер стороны квадрата""ловушки" с центром

в указанной точке.

Возвращаемое значение:
3635



1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1. Зона поиска " квадрат с указанной стороной и центром. 
2. Если значение limit равно MAXDOUBLE, выполняется поиск ближайшего к указанной точ"

ке объекта без ограничения зоны поиска.
3. Метод ksFindObj можно использовать для поиска объектов внутри макроэлемента.
4. Для этого макроэлемент должен быть открыт на редактирование функцией

ksDocument2D::ksOpenMacro.
Пример:
doc2D.ksOpenMacro(obj); 
long obj_i=doc2D.ksFindObj(xn, xn, AXIS_FIND_SENS); 
if( doc2D.ksExistObj(obj_i) ) 
doc2D.ksLightObj(obj_i, 1); 
doc2D.ksEndObj();
При этом, если для макроэлемента задана система координат (см.
ksDocument2D::ksPlacement), то координаты в ksFindObj должны передаваться в этой си"
стеме координат.
Пересчитать координаты в систему координат макроэлемента можно через функцию
ksDocument2D::ksPointIntoMtr. Для этого нужно функцией ksDocument2D::ksMtr создать
матрицу преобразования координат.
Пример:
doc2D.ksMtr(xp, yp, ang,? 1, 1); 
doc2D.ksPointIntoMtr(x, y, &xn, &yn); 
doc2D.ksEndMtr();

ksGetCursorPosition  Получить координаты курсора
Интерфейс...
Аналог данного метода при использовании API экспортных функций "
ksGetCursorPosition.
Синтаксис Automation:
long ksGetCursorPosition (double* x, double* y, long type);
Входной параметр:

type " признак, какие координаты возвращать: 
0 " без учета привязок, 
1 " с учетом привязок.
3636



Выходные параметры:

x, y " координаты курсора (в миллиметрах).

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

ksGetCursorLimit  Получить радиус окружности, 
вписанной в "ловушку" курсора
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций " ksGetCursorLimit.
Синтаксис Automation:
double ksGetCursorLimit();
Возвращаемое значение:

" радиус окружности (мм), вписанной в "ловушку" курсора.

ksGetDocumentPagesCount  Получить количество листов 
документа
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций "
ksGetDocumentPagesCount.
Синтаксис Automation:
long ksGetDocumentPagesCount();
Возвращаемое значение:

" количество листов документа.
3637



ksGetLeaderShelfLength  Получить длину полки линии
выноски и координаты ее конечной точки
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций "
ksGetLeaderShelfLength.
Синтаксис Automation:
double ksGetLeaderShelfLength (long leader, double *x, double *y);
Входные параметры:

leader " указатель на линию"выноску.

Выходные параметры:

x " координата конечной точки полки линии выноски по оси X,
y " координата конечной точки полки линии выноски по оси Y.

ksGetObjectStyle  Получить стиль для объекта 2D 
документа
Интерфейс...
Аналог данного метода при использовании API экспортных функций " ksGetObjectStyle.
Синтаксис Automation:
long  ksGetObjectStyle( long obj );
Входные параметры:

obj " указатель reference объекта 2D.

Примечание:
Метод позволяет получить стиль для кривых и эквидистанты.

ksGetShelfPoint  Получить координаты начала и конца 
выносной полки и ножки
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций " ksGetShelfPoint.
Синтаксис Automation:
BOOL ksGetShelfPoint( long p, long index, double *x, double *y, long paramType );
Входные параметры:
3638



p " указатель на объект (размер или линию"выноску),
index " индекс точки.

Значения индекса:
Для линии с ножкой:
       1 __ 2
       /
    0 /  
Для линии без ножки (с выносной полкой на продолжении выносной линии):
     0 __ 1 
Точка 0 примыкает к выносной линии.

paramType " тип параметров, задает систему координат:
ALLPARAM " в системе координат владельца;
SHEET_ALLPARAM " в системе координат листа;
VIEW_ALLPARAM " в системе координат вида.

Выходные параметры:

x, y " координаты точки.

Возвращаемое значение:

TRUE " в случае успешного завершения,
FALSE " в случае неудачи.

ksHatchByParam  Создать штриховку с заданными 
параметрами
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций " ksHatch.
Синтаксис Automation:
long ksHatchByParam (LPDISPATCH param);
Входной параметр:

param " указатель на интерфейс ksHatchParam.

Возвращаемое значение:

указатель на штриховку " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
3639



Объекты границы штриховки лежат во временной группе ksHatchParam::boundaries. По"
сле выполнения метода ksDocument2D::ksHatchByParam временная группа прекращает
свое существование.

ksInitFilePreviewFunc  Инициализировать адрес 
пользовательской функции просмотра 
пользовательского файла
Интерфейс...
Аналог данного метода при использовании API экспортных функций "
ksInitFilePreviewFunc.
Синтаксис Automation:
long ksInitFilePreviewFunc (BSTR funcName, long hInst);
Входные параметры:

funcName " имя функции,
hInst " идентификатор приложения.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

ksInitFilePreviewFuncW  Инициализировать адрес 
пользовательской функции просмотра 
пользовательского файла (Unicode)
Интерфейс...
Аналог данного метода при использовании API экспортных функций "
ksInitFilePreviewFuncW.
Синтаксис Automation:
long ksDocument2D::ksInitFilePreviewFuncW(BSTR funcName, long hInst, LPDISPATCH
dispatchOCX);
Входные параметры:

funcName " имя функции,
hInst " идентификатор приложения.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.
3640



ksIsActiveProcessRunnig  Проверить, запущен ли в 
текущем графическом документе процесс построения
Интерфейс...
Аналог данного метода при использовании API экспортных функций "
ksIsActiveProcessRunnig.
Синтаксис Automation:
long ksIsActiveProcessRunnig();
Возвращаемое значение:

1 " процесс запущен,
0 " процесс не запущен.

ksIsCursorOrPlacementDocument  Проверить, запущен 
ли в текущем графическом документе процесс 
ksDocument2D_ksCursor или 
ksDocument2D_ksPlacement
Интерфейс...
Аналог данного метода при использовании API экспортных функций "
ksIsCursorOrPlacementDocument.
Синтаксис Automation:
long ksIsCursorOrPlacementDocument();
Возвращаемое значение:

1 " процесс запущен,
0 " процесс не запущен.

ksIsCurveClosed  Проверить, замкнута ли указанная 
кривая
Интерфейс...
Аналог данного метода при использовании API экспортных функций " ksIsCurveClosed.
Синтаксис Automation:
long ksIsCurveClosed(long p);
Входной параметр:

p " указатель на кривую.

Возвращаемое значение:

 1 " кривая замкнута,
 0 " кривая разомкнута,
3641



"1 " в случае неудачи.

ksIsPointInsideContour  Проверить положение точки 
относительно кривой
Интерфейс...
Аналог данного метода при использовании API экспортных функций "
ksIsPointInsideContour.
Синтаксис Automation:
long ksIsPointInsideContour (long Reference, 
double x, 
double y, 
double precision);
Входные параметры:

Reference " указатель на контур,
x, y " координаты точки,
precision " точность проверки (от 1 до 1E"6).

Возвращаемое значение:

0 " в случае неудачи,
1 " точка вне контура,
2 " точка на контуре,
3 " точка внутри контура.

ksIsSlaveSpcOpened  Проверить, открыто ли окно 
спецификации в Slave режиме
Интерфейс...

Справка системы КОМПАС...
Аналог данного метода при использовании API экспортных функций "
ksIsSlaveSpcOpened.
Синтаксис Automation:
long ksIsSlaveSpcOpened();
Синтаксис COM:
int ksIsSlaveSpcOpened();
Возвращаемое значение:

0 " окно спецификации в Slave режиме не открыто,
1 " окно спецификации в Slave режиме открыто,
3642



2 " окно спецификации в Slave режиме открыто и активно.

ksLengthFromMtr  Пересчитать длину из локальной 
системы координат в СК вида
Интерфейс...
Аналог данного метода при использовании API экспортных функций " ksLengthFromMtr.
Синтаксис Automation:
long ksLengthFromMtr (double* len);
Входной и Выходной параметр:

len " длина.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Параметр len является одновременно и входным, и выходным. На входе он представляет
собой длину в локальной СК, а в результате работы функции преобразуется в длину в СК
вида.

ksLengthIntoMtr  Пересчитать длину из системы 
координат вида в локальную СК
Интерфейс...
Аналог данного метода при использовании API экспортных функций " ksLengthIntoMtr.
Синтаксис Automation:
long ksLengthIntoMtr (double* len);
Входной и Выходной параметр:

len " длина.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Параметр len является одновременно и входным, и выходным. На входе он представляет
собой длину в СК вида, а в результате работы функции преобразуется в длину в локаль"
ной СК.
3643



ksMakeEncloseContours  Получить указатель на группу 
объектов, охватывающих заданную точку
Интерфейс...
Аналог данного метода при использовании API экспортных функций "
ksMakeEncloseContours.
Синтаксис Automation:
long ksMakeEncloseContours (long gr, 
double x, 
double y);
Входные параметры:

gr " временная группа 
или 0, если требуются контуры в текущем виде,

x, y " координаты точки внутри охватывающих контуров.

Возвращаемое значение:

указатель на временную " в случае удачного заверше"
группу контуров ния,
0 " если контуров не нашлось 

или в случае неудачи.

Примечание:
Возвращаемая группа принадлежит указанной временной группе или текущему виду в
целом.

ksMakeEncloseContoursEx  Получить указатель на 
группу объектов, охватывающих заданную точку
Интерфейс...
Аналог данного метода при использовании API экспортных функций "
ksMakeEncloseContoursEx.
Синтаксис Automation:
long ksMakeEncloseContoursEx( long gr,
double x,
double y,
BOOL forHatch );
Входные параметры:

gr " временная группа 
или 0, если требуются контуры в текущем виде,

x, y " координаты точки внутри охватывающих контуров,
forHatch " признак создания контура для штриховки.
3644



Возвращаемое значение:

указатель на времен" " в случае удачного завершения,
ную группу контуров
0 " если контуров не нашлось 

или в случае неудачи.

Примечание:
forHatch == 1 " при cоздании контуров для штриховки используются объекты со стилем
основная и утолщенная, объекты других стилей не учитываются.
forHatch == 0 " при cоздании контура с использованием любых стилей линий.

ksMovePoint  Сдвинуть точку в указанном направлении 
на указанное расстояние
Интерфейс...
Аналог данного метода при использовании API экспортных функций " MovePoint.
Синтаксис Automation:
BOOL ksMovePoint (double* x, 
double* y, 
double ang, 
double len);
Входные параметры:

x, y " координаты точки,
ang " угол вектора сдвига в градусах,
len " длина вектора сдвига.

Возвращаемое значение:

TRUE " в случае успешного завершения,
FALSE " в случае неудачи.

Примечание:
Параметры x и y являются одновременно и входными, и выходными. На входе они пред"
ставляют собой начальные координаты точки, а в результате работы метода они прео"
бразуются в координаты точки после сдвига.

ksParametrizeObjects  Параметризовать группу 
объектов
Интерфейс...
Аналог данного метода при использовании API экспортных функций "
ksParametrizeObjects.
3645



Синтаксис Automation:
long ksParametrizeObjects (long group, LPDISPATCH par);
Входные параметры:

group " указатель на группу объектов,
par " параметры параметризации группы объектов

ksParametrizationParam.

Возвращаемое значение:

1 " в случае успеха,
0 " в случае неудачи.

ksPhantomShowHide  Сделать фантом видимым или 
невидимым
Интерфейс...
Аналог данного метода при использовании API экспортных функций "
ksPhantomShowHide.
Синтаксис Automation:
long ksPhantomShowHide (BSTR show);
Входной параметр:

show " признак отрисовки фантома: 
1 " включить, 
0 " выключить.

Возвращаемое значение:

"1 " в случае удачного завершения,
0 " в случае неудачи.

ksPlacement  Запрос к системе на получение точки и 
угла
Интерфейс...
Аналог данного метода при использовании API экспортных функций " Placement.
Синтаксис Automation:
long ksPlacement (LPDISPATCH info, 
double* x, 
double* y, 
double* Angle, 
3646



LPDISPATCH phantom);
Входные параметры:

info " указатель на интерфейс ksRequestInfo,
phantom " указатель на интерфейс ksPhantom.

Выходные параметры:

x, y " возвращаемые координаты точки,
angle " возвращаемое значение угла.

Возвращаемое значение:

"1 " если точка указана.
идентификатор выбранной команды, определенный в файле 
ресурсов,
порядковый номер в строке команд.

Примечание:
Интерактивный ввод точки и угла или определение варианта действия. Возможные вари"
анты (команды) задаются в строке commands структуры info и разделяются восклица"
тельными знаками или пробелами.
Если вместо строки в качестве параметра передать идентификатор меню из файла ре"
сурсов, то соответствующее меню будет выдано в окне приглашений. 
Если в качестве адреса _callBack передается NULL, то действие метода прекращается по"
сле первого шага.

ksPlacementEx  Запрос к системе на получение 
координат точки и угла
Интерфейс...
Аналог данного метода при использовании API экспортных функций " PlacementEx.
Синтаксис Automation:
long ksPlacementEx (LPDISPATCH info,
double* x,
double* y,
double* angle,
LPDISPATCH phantom,
LPDISPATCH processParam);
Входные параметры:

info " указатель на интерфейс параметров запро"
са к системе ksRequestInfo,

phantom " указатель на интерфейс фантома
ksPhantom,
3647



processParam " указатель на интерфейс параметров про"
цесса IProcessParam.

Выходные параметры:

x, y " возвращаемые координаты точки.
angle " возвращаемое значение угла.

Возвращаемое значение:

"1 " если указана точка,
0 " отказ (Esc), идентификатор выбранной команды из командной строки или 

меню, определенный в файле ресурсов.

Примечание:
Возможные варианты (команды) задаются в строке commands интерфейса
ksRequestInfo и разделяются восклицательными знаками или пробелами. Если вместо
строки в качестве параметра передать идентификатор меню из файла ресурсов, то соот"
ветствующее меню будет выдано в окне приглашений. Если функция обратной связи
ksRequestInfo не определена, то действие метода прекращается после первого шага.

ksPointFromMtr  Пересчитать координаты точки из 
локальной системы координат в СК вида
Интерфейс...
Аналог данного метода при использовании API экспортных функций " ksPointFromMtr.
Синтаксис Automation:
long ksPointFromMtr (double x, double y, double* xn, double* yn);
Входные параметры:

x, y " координаты точки в локальной системе координат.

Выходные параметры:

xn, yn " координаты точки в СК вида.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

ksPointIntoMtr  Пересчитать координаты точки из 
системы координат вида в локальную СК
Интерфейс...
3648



Аналог данного метода при использовании API экспортных функций " ksPointIntoMtr.
Синтаксис Automation:
long ksPointIntoMtr (double x, 
double y, 
double* xn, 
double* yn);
Входные параметры:

x, y " координаты точки в системе координат вида.

Выходные параметры:

xn, yn " координаты точки в локальной СК.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

ksPoint3DToAssociationView  Преобразовать 
координаты 3D точки в координаты ассоциативного 
вида
Интерфейс...
Аналог данного метода при использовании API экспортных функций "
ksPoint3DToAssociationView.
Синтаксис Automation:
BOOL ksPoint3DToAssociationView (long view,
double x3D, double y3D, double z3D,
double * x2D, double * y2D );
Входные параметры:

view " указатель на ассоциативный вид,
x3D, y3D, z3D " координаты 3D точки.

Выходные параметры:

x2D, y2D " координаты 3D точки в ассоциативном виде.

Возвращаемое значение:

TRUE " в случае успешного завершения,
FALSE " в случае неудачи.
3649



Примечание:
Если указатель на вид не задан (view = 0), то функция будет выполняться для текущего
вида.

ksPolylineByParam  Создать ломаную линию
Интерфейс...
Аналог данного метода при использовании API экспортных функций " ksPolyline.
Синтаксис Automation:
long ksPolylineByParam (LPDISPATCH param);
Входной параметр:

param " указатель на интерфейс ломаной линии ksPolylineParam.

Возвращаемое значение:

указатель на ломаную линию " в случае удачного завершения,
0 " в случае неудачи.

ksReDrawDocPart  Перерисовать часть графического 
документа
Интерфейс...
Синтаксис Automation:
int ksReDrawDocPart (IDispatch* rect, 
long view);
Входные параметры:

rect " указатель на интерфейс ksRectParam параметров прямоу"
гольника, ограничивающего перерисовываемую часть,

view " указатель на вид.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

ksRemoteElement  Создать объект "Выносной элемент"
Интерфейс...
Аналог данного метода при использовании API экспортных функций " ksRemoteElement.
Синтаксис Automation:
3650



long ksRemoteElement (LPDISPATCH par);
Входные параметры:

par " указатель на интерфейс ksRemoteElementParam параметров выносного 
элемента.

Возвращаемое значение:

указатель на объект "Выносной элемент" " в случае успешного завершения.

ksSaveToDXF  Сохранить документ в формате DXF
Интерфейс...
Синтаксис Automation:
BOOL ksSaveToDXF (LPCTSTR dxfFileName);
Входные параметры:

dxfFileName " имя файла для записи в формате DXF.

Возвращаемое значение:

TRUE " в случае успешного завершения,
FALSE " в случае неудачи.

ksSetMaterialParam  Установить параметры материала 
в чертеже
Интерфейс...Аналог данного метода при использовании API экспортных функций "
ksSetMaterialParam.
Синтаксис Automation:
long ksSetMaterialParam (LPDISPATCH material, double density);
Входные параметры:

material " наименование материала, указатель на интерфейс динамического 
массива ksDynamicArray строк текста (TEXT_LINE_ARR),

density " плотность (г/куб.мм).

Возвращаемое значение:

1 " в случае успеха,
0 " в случае неудачи.
3651



ksSetMixDlgMaterialParam  Установить параметры 
материала для диалога МЦХ
Интерфейс...Аналог данного метода при использовании API экспортных функций "
ksSetMixDlgMaterialParam.
Синтаксис:
BOOL ksSetMixDlgMaterialParam( BSTR material, double density );
Входные параметры

material " обозначение материала,
density " плотность.

Возвращаемое значение:

TRUE " в случае успеха.

ksSetObjectStyle  Установить стиль для объекта 2D 
документа
Интерфейс...
Аналог данного метода при использовании API экспортных функций " ksSetObjectStyle.
Синтаксис Automation:
BOOL  ksSetObjectStyle( long obj, long style );
Входные параметры:

obj " указатель reference объекта 2D,
style " номер стиля.

Примечание:
Метод позволяет установить стиль для кривых и эквидистанты.

ksSheetToView  Пересчитать точку из системы 
координат листа в CK текущего вида
Интерфейс...
Аналог данного метода при использовании API экспортных функций " SheetToView.
Синтаксис Automation:
long ksSheetToView (double x, 
double y, 
double* outX, 
double* outY);
Входные параметры:
3652



x, y " координаты точки в системе координат листа.

Выходные параметры:

outX, outY " координаты точки в системе координат вида.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

ksSpecificationOnSheet  Установить признак 
размещения спецификации на листе
Интерфейс...

Справка системы КОМПАС...
Аналог данного метода при использовании API экспортных функций "
ksSpecificationOnSheet.
Синтаксис Automation:
long ksSpecificationOnSheet (short onSheet);
Входной параметр:

onSheet " признак размещения спецификации на листе
1 " включено, 
0 " выключено.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

ksTextEx  Создать многострочный текст
Интерфейс...
Аналог данного метода при использовании API экспортных функций " ksTextEx.
Синтаксис Automation:
long ksTextEx (LPDISPATCH txtParam, long align);
Входные параметры:

txtParam " указатель на интерфейс ksTextParam параметров текста,
3653



align " выравнивание текста:
0 " слева,
1 " по центру,
2 " справа,
3 " по ширине,
"1 установить выравнивание как у стиля текста.

Возвращаемое значение:

указатель на созданный текст " в случае успеха,
0 " в случае неудачи.

ksViewToSheet  Пересчитать точку из CK текущего вида 
в CK листа
Интерфейс...
Аналог данного метода при использовании API экспортных функций " ViewToSheet.
Синтаксис Automation:
long ksViewToSheet (double x, 
double y, 
double* outX, 
double* outY);
Входные параметры:

x, y " координаты точки в системе координат вида.

Выходные параметры:

outX, outY " координаты точки в системе координат листа.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

RasterFormatParam  Получить указатель на интерфейс, 
определяющий параметры записи в растровый формат
Интерфейс...Справка системы КОМПАС...

Синтаксис Automation:
LPDISPATCH RasterFormatParam();
3654



Возвращаемое значение:

указатель на интерфейс " в случае успешного завершения,
ksRasterFormatParam
NULL " в случае неудачи.

SaveAsToRasterFormat  Сохранить документ в 
растровом формате
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций "
ksSaveAsToRasterFormat.
Синтаксис Automation:
BOOL SaveAsToRasterFormat (BSTR fileName,
LPDISPATCH rasterPar);
Входные параметры:

fileName " полное имя файла документа,
rasterPar " указатель на интерфейс ksRasterFormatParam, определяющий параметры 

записи в растровый формат.

Возвращаемое значение:

TRUE " в случае удачного завершения,
FALSE " в случае неудачи.

Примечания:
Метод позволяет сохранить присланный документ в растровом формате (BMP, GIF, JPG,
PNG, TIF, TGA, PCX, EMF и WMF) с заданными свойствами. 
Сохранение в WMF формат не поддерживается. При сохранении в WMF формате файл
записывается в формате EMF.

SaveAsToUncompressedRasterFormat  Сохранить 
документ в растровом формате без сжатия
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций "
ksSaveAsToUncompressedRasterFormat.
Синтаксис Automation:
3655



BOOL SaveAsToUncompressedRasterFormat (BSTR fileName, IDispatch* rasterPar);
Входные параметры:

fileName " имя файла документа, должно быть задано
полное имя файла,

rasterPar " указатель на интерфейс ksRasterFormatParam,
определяющий параметры конвертации в рас"
тровый формат.

Возвращаемое значение:

TRUE " в случае успешного завершения,
FALSE " в случае неудачи.

Примечание:

1. Метод позволяет сохранить документ в растровом формате без сжатия, с заданными
свойствами: цветом, форматом (BMP, GIF, JPG, PNG, TIF, TGA, PCX, EMF и WMF) и т.п.
Сохранение в WMF формат не поддерживается. При сохранении в WMF формате файл
записывается в формате EMF.
Подробнее см. описание ksRasterFormatParam.

Аннотационные объекты

ksAnnArcByPoint  Создать аннотационную дугу по 
точкам
Интерфейс...
Аналог данного метода при использовании API экспортных функций " AnnArcByPoint.
Синтаксис Automation:
long ksAnnArcByPoint (double xc, 
double yc, 
double rad, 
double x1, 
double y1, 
double x2, 
double y2, 
short direction, 
short term1, 
short term2, 
long style);
Входные параметры:
3656



ия,
xc, yc " координаты центра дуги,
rad " радиус дуги,
x1, y1 " координаты начальной точки дуги,
x2, y2 " координаты конечной точки дуги,
direction " направление отрисовки дуги: 

 1 " против часовой стрелки, 
"1 " по часовой стрелке,

term1, типы значков на концах дуги,
term2 
style стиль линии.

Системные типы значков...
Системные стили линий...
Возвращаемое значение:

указатель на аннотационную дугу " в случае удачного завершен
0 " в случае неудачи.

ksAnnCircle  Создать объект "Аннотационная 
окружность"
Интерфейс...
Аналог данного метода при использовании API экспортных функций " ksAnnCircle.
Синтаксис Automation:
long ksAnnCircle( double xc,
double yc,
double rad,
long style );
Входные параметры:

xc, yc " координаты центра окружности,
rad " радиус окружности,
style " стиль линии.

Возвращаемое значение:

указатель на аннотационную " в случае удачного завершения,
окружность
0 " в случае неудачи.

Примечание:

1. Аннотационные объекты можно создавать только в составе макро. Допускается созда"
ние аннотационных объектов во временной группе для последующего добавления в ма"
кро.

2. При разрушении макро"аннотационные объекты превращаются в геометрические.
3657



ksAnnEllipse  Создать объект "Аннотационный эллипс"
Интерфейс...
Аналог данного метода при использовании API экспортных функций " ksAnnEllipse.
Синтаксис Automation:
long ksAnnEllipse( LPDISPATCH par );
Входные параметры:

par " указатель на интерфейс параметров эллипса ksEllipseParam,

Возвращаемое значение:

указатель на аннотационный эллипс " в случае удачного завершения,
0 " в случае неудачи.

Примечание:

1. Аннотационные объекты можно создавать только в составе макро. Допускается созда"
ние аннотационных объектов во временной группе для последующего добавления в ма"
кро.

2. При разрушении макро"аннотационные объекты превращаются в геометрические.

ksAnnEllipseArc  Создать объект "Аннотационная дуга 
эллипса"
Интерфейс...
Аналог данного метода при использовании API экспортных функций " ksAnnEllipseArc.
Синтаксис Automation:
long ksAnnEllipseArc( LPDISPATCH par,
short term1,
short term2 );
Входные параметры:

par " указатель на интерфейс параметров параметров дуги эллипса ksEllipseArcParam,
term1, " типы значков на концах ломаной.
term2

Возвращаемое значение:

указатель на аннотационную дугу эллипса " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
3658



1. Аннотационные объекты можно создавать только в составе макро. Допускается созда"
ние аннотационных объектов во временной группе для последующего добавления в ма"
кро.

2. При разрушении макро"аннотационные объекты превращаются в геометрические.

ksAnnLineSeg  Создать аннотационный отрезок
Интерфейс...
Аналог данного метода при использовании API экспортных функций " AnnLineSeg.
Синтаксис Automation:
long ksAnnLineSeg (double x1, 
double y1, 
double x2, 
double y2, 
short term1, 
short term2, 
long style);
Входные параметры:

x1, y1 " координаты первой точки отрезка,
x2, y2 " координаты второй точки отрезка,
term1, term2 " типы значков на концах линии,
style " стиль линии.

Системные типы значков...
Системные стили линий...
Возвращаемое значение:

указатель на аннотационный отрезок " в случае удачного завершения,
0 " в случае неудачи.

ksAnnParEllipseArc  Создать объект "Аннотационная 
дуга эллипса"
Интерфейс...
Аналог данного метода при использовании API экспортных функций "
ksAnnParEllipseArc.
Синтаксис Automation:
long LIB_FUNC ksAnnParEllipseArc( LPDISPATCH par,
short term1,
short term2 );
Входные параметры:
3659



ука
0

par " указатель на интерфейс параметров параметров дуги эллипса 
ksEllipseArcParam1,

term1, term2 " типы значков на концах ломаной.

Возвращаемое значение:

затель на аннотационную дугу эллипса " в случае удачного завершения,
" в случае неудачи.

Примечание:

1. Аннотационные объекты можно создавать только в составе макро. Допускается созда"
ние аннотационных объектов во временной группе для последующего добавления в ма"
кро.

2. При разрушении макро"аннотационные объекты превращаются в геометрические.

ksAnnPoint  Создать объект "точка" c аннотационной 
точкой привязки
Интерфейс...
Аналог данного метода при использовании API экспортных функций " ksAnnPoint.
Синтаксис Automation:
long ksAnnPoint(double x,
double y,
long style);
Входные параметры:

x, y " координаты точки,
style " стиль отрисовки

точки:
0 " вспом. точка,
1 " плюс тонкий,
2 " крест,
3 " квадрат,
4 " треугольник,
5 " круг,
6 " звезда,
7 " конверт,
8 " плюс основной.
3660



Возвращаемое значение:

указатель на точку " в случае удачного завершения,
0 " в случае неудачи.

Примечание:

1. Аннотационные объекты можно создавать только в составе макро. Допускается созда"
ние аннотационных объектов во временной группе для последующего добавления в ма"
кро.

2. При разрушении макро"аннотационные объекты превращаются в геометрические.
3. Координаты точки привязки аннотационные, не зависят от масштаба вида.

ksAnnPolyline  Создать аннотационную ломаную линию
Интерфейс...
Аналог данного метода при использовании API экспортных функций " ksAnnPolyline.
Синтаксис Automation:
long ksAnnPolyline ( long style,
short term1,
short term2 );
Входные параметры:

style " стиль линии,
term1, term2 " типы значков на концах ломаной.

Возвращаемое значение:

указатель на аннотационную лома" " в случае удачного завершения,
ную линию
0 " в случае неудачи.

Примечание:

1. Аннотационные объекты можно создавать только в составе макро.
ksDocument2D::ksAnnPolyline " составной объект. Объекты ksDocument2D::ksPoint, вво"
димые между операторами ksDocument2D::ksAnnPolyline и ksDocument2D::ksEndObj,
принадлежат аннотационной ломаной. Метод ksDocument2D::ksEndObj возвращает ука"
затель на аннотационную ломаную линию. Допускается создание аннотационных объек"
тов во временной группе для последующего добавления в макро.

2. При разрушении макро аннотационные объекты превращаются в геометрические.

ksAnnPolylineEx  Создать объект "Аннотационная 
ломаная линия" по интерфейсу параметров
Интерфейс...
3661



Аналог данного метода при использовании API экспортных функций " ksAnnPolylineEx
Синтаксис Automation:
long ksAnnPolylineEx( LPDISPATCH par,
short term1,
short term2 )
Входные параметры:

par " указатель на интерфейс параметров лома"
ной ksPolylineParam,

term1, term2 " типы на концах ломаной.

Возвращаемое значение:

указатель на аннотационную ломаную " в случае удачного завершения,
0 " в случае неудачи.

Примечание:

1. Аннотационные объекты можно создавать только в составе макро. Допускается созда"
ние аннотационных объектов во временной группе для последующего добавления в ма"
кро.

2. При разрушении макро"аннотационные объекты превращаются в геометрические.

ksAnnTextEx  Создать объект "Текст с аннотационной 
точкой привязки"
Интерфейс...
Аналог данного метода при использовании API экспортных функций " ksAnnTextEx.
Синтаксис Automation:
long ksAnnTextEx( LPDISPATCH txtParam,
long align );
Входные параметры:

txtParam " указатель на интерфейс параметров текста,
align " выравнивание текста:

"1 " установить выравнивание как у стиля текста,
0 " слева,
1 " по центру,
2 " справа,
3 " на всю ширину.

Возвращаемое значение:

указатель на текст " в случае удачного завершения,
0 " в случае неудачи.
3662



Примечание:

1. Аннотационные объекты можно создавать только в составе макро. Допускается созда"
ние аннотационных объектов во временной группе для последующего добавления в ма"
кро.

2. При разрушении макро"аннотационные объекты превращаются в геометрические.
3. Координаты точки привязки аннотационные не зависят от масштаба вида.

Составные объекты

ksAddObjectToMacro  Добавить объект, слой, вид или 
группу объектов в макроэлемент
Интерфейс...Аналог данного метода при использовании API экспортных функций "
ksAddObjectToMacro.
Синтаксис Automation:
long ksAddObjectToMacro (long macro, long obj);
Входные параметры:

macro " указатель на макроэлемент,
obj " указатель на добавляемый объект.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

ksContour  Создать контур
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций " Contour.
Синтаксис Automation:
long ksContour (long style);
Входной параметр:

style " стиль линии.

Системные стили линий...
Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.
3663



Примечание:

1. Контур " составной объект. Объекты, вводимые между методами
ksDocument2D::ksContour и ksDocument2D::ksEndObj, принадлежат контуру.

2. В контуре могут лежать отрезки, дуги, окружности (они превращаются в дуги), сплайны.
3. Конечная точка предыдущего звена должна совпадать с начальной точкой последующе"

го звена.
4. ksDocument2D::ksEndObj возвращает указатель на контур.

ksDuplicateBoundaries  Получить временную группу 
контуров, задающих границы штриховки или заливки
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций "
ksDuplicateBoundaries.
Синтаксис Automation:
long ksDuplicateBoundaries (long reference);
Входной параметр:

reference " указатель на штриховку или заливку.

Возвращаемое значение:

указатель на временную группу контуров, задающих " в случае удачного завершения,
границы штриховки или заливки
0 " в случае неудачи.

ksEditMacroMode  Получить режим работы метода 
библиотеки (создание нового или редактирование 
существующего макроэлемента)
Интерфейс..

Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций " EditMacroMode.
Синтаксис Automation:
long ksEditMacroMode();
Возвращаемое значение:

указатель на редактируемый " при редактировании макроэлемента,
макроэлемент 
0 " при создании макроэлемента.
3664



ksEndObj  Завершить создание комплексного объекта
Интерфейс...Аналог данного метода при использовании API экспортных функций "
EndObj.
Синтаксис Automation:
long ksEndObj();
Возвращаемое значение:

указатель на завершенный объект (контур, " в случае удачного завершения,
макроэлемент и т.д.)
0 " в случае неудачи.

ksGetMacroParamSize  Получить размер памяти 
параметров указанного макроэлемента
Интерфейс...

Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций "
GetMacroParamSize.
Синтаксис Automation:
long ksGetMacroParamSize (long ref);
Входной параметр:

ref " указатель на макроэлемент.

Возвращаемое значение:

размер памяти " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
При ref = 0 выдается размер памяти параметров макроэлемента, редактирование кото"
рого производится в данный момент (если таковой имеется).

 ksGetMacroWaitDblClickEdit  Получить режим ожидания 
DblClick при редактировании макроэлемента
Интерфейс...
Аналог данного метода при использовании API экспортных функций "
ksGetMacroWaitDblClickEdit.
3665



Синтаксис Automation:
long ksGetMacroWaitDblClickEdit (reference ref);
Входные параметры:

ref " указатель на макроэлемент.

Возвращаемое значение:

1 " режим ожидания DblClick включен,
0 " режим ожидания DblClick выключен.

Примечание:
Макроэлемент, созданный библиотекой, может редактироваться двумя способами:

▼ по первому клику мыши " через характерные точки и\или интерфейс внешних воздейст"
вий;

▼ по двойному клику " через команду библиотеки.
Если время инициализации характерных точек сравнимо с двойным кликом, то редакти"
рование через команду библиотеки становится невозможно. Во время редактирования
макроэлемента, при включенном режиме ожидания DblClick, после первого щелчка по
макроэлементу КОМПАС будет ожидать повторного нажатия в течении времени, уста"
новленного в настройках "Скорость выполнения двойного щелчка".
При выключенном режиме ожидания DblClick пауза отсутствует, и нажатие всегда интер"
претируется как одинарное нажатие.

ksMacro  Создать новый макроэлемент
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций " Macro.
Синтаксис Automation:
long ksMacro (short type);
Входной параметр:

type " тип макроэлемента: 
0 " объединяет объекты текущего слоя, 
1" включаемые объекты могут принадлежать разным
слоям.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.
3666



Примечание:
Макроэлемент " составной объект. 
Объекты вида, вводимые между методами ksDocument2D::ksMacro и
ksDocument2D::ksEndObj, принадлежат макроэлементу. ksDocument2D::ksEndObj возвра"
щает указатель на макроэлемент.

ksOpenMacro  Открыть макроэлемент для 
редактирования
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций " ksOpenMacro.
Синтаксис Automation:
long ksOpenMacro (long macro);
Входной параметр:

macro " указатель на макроэлемент.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Когда макроэлемент открыт для редактирования; можно добавлять в его состав новые
объекты вида, использовать метод ksDocument2D::ksFindObj.
Режим редактирования закрывается методом ksDocument2D::ksEndObj;
В режиме редактирования открыт доступ к внутренним объектам макроэлементов. Те"
перь при создании макроэлемента или при добавлении к макроэлементу новых объектов
вида выдается указатель на внутренние объекты, как и на самостоятельные объекты ви"
да.
Допускается вводить пустой макроэлемент. Пустой макроэлемент является вырожден"
ным объектом. Он существует только в период редактирования документа. После записи
документа, в котором находился пустой макроэлемент, этот макроэлемент будет удален.
Макроэлемент считается нормальным, если в нем находится хотя бы один внутренний
объект.
Все методы работы с указателями на объекты допускают работу с внутренними объекта"
ми макроэлемента. Это методы:
ksDocument2D::ksDeleteObj
ksDocument2D::ksMoveObj
ksDocument2D::ksLightObj
ksDocument2D::ksTransformObj
3667



ksDocument2D::ksGetObjParam
ksDocument2D::ksSetObjParam
ksDocument2D::ksRotateObj
ksDocument2D::ksCopyObj
ksDocument2D::ksSymmetryObj
ksDocument2D::ksEditViewObject
ksDocument2D::ksGetObjGabaritRect
ksDocument2D::ksDecomposeObj

ksGetMacroParam  Получить параметры макроэлемента
Интерфейс...

Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций " GetMacroParam.
Синтаксис Automation:
long ksGetMacroParam (long ref, LPDISPATCH userPars);
Входные параметры:

ref " указатель на макроэлемент,
userPars " указатель на интерфейс ksUserParam.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1. Дополнительные параметры редактирования предварительно задаются функцией
ksDocument2D::ksSetMacroParam.

2.  При ref = 0 выдаются параметры макроэлемента, редактирование которого производит"
ся в данный момент (если таковой имеется).

3. Способ получения пользовательских данных (userPars) должен совпадать со способом
их сохранения (void*, SAFEARRAY, или DynamicArray) через
ksDocument2D::ksSetMacroParam

▼ Если пользовательские данные были сохранены через SAFEARRAY (userPars), то перед
их получением нужно создать SAFEARRAY соответствующего размера (размер данных
можно определить при помощи ksDocument2D::ksGetMacroParamSize).

▼ Если пользовательские данные были сохранены через ksUserParam::SetUserArray, то пе"
ред их получением нужно создать UserArray, аналогичный по структуре используемому
при сохранении, и передать его в ksUserParam::SetUserArray.
3668



ksGetMacroPlacement  Получить точку привязки и угол 
поворота  систему координат макроэлемента
Интерфейс...
Аналог данного метода при использовании API экспортных функций "
GetMacroPlacement.
Синтаксис Automation:
long ksGetMacroPlacement (long macro, 
double* x, 
double* y, 
double* angl);
Входной параметр:

macro " указатель на макроэлемент
(0 " редактируемый макроэлемент).

Выходные параметры:

x, y " координаты точки привязки,
angl " угол поворота от оси OX против часовой стрелки (в градусах).

Возвращаемое значение:

 1 " в случае удачного завершения,
 0 " в случае неудачи,
"1 " у макроэлемента нет СК (не вызывалась функция 

ksDocument2D::ksSetMacroPlacement).

Смотрите также:
Функция ksDocument2D::ksSetMacroPlacement

ksGetMacroPlacementEx Получить точку привязки и угол 
поворота  систему координат макроэлемента
Интерфейс...Аналог данного метода при использовании API экспортных функций "
ksGetMacroPlacementEx.
Синтаксис Automation:
long ksGetMacroPlacementEx(long macro,
double* x,
double* y,
double* angl,
long sheetParam,
long * mirrorSymmetry );
Входные параметры:
3669



macro " указатель на макроэлемент
(0 " редактируемый макроэлемент),

sheetParam " управление, в какой системе координат получить СК 
макроэлемента: 1 " в системе координат листа, 0 " в системе 
координат вида.

Выходные параметры:

x, y " координаты точки начала координат макроэлемента,
angl " угол поворота от оси OX против часовой стрелки (в градусах),
mirrorSymmetry " флаг зеркальной симметрии объекта;

0 " нормальный исходный объект,
1 " макроэлемент получен операцией симметрии из исходного.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи (у макроэлемента нет СК).

Смотрите также:

1. Функция ksDocument2D::ksSetMacroPlacement
2. Рекомендации по обеспечению корректного редактирования библиотекой макроэлемен"

тов, геометрия которых зеркально отражена относительно исходного ее построения...
Примечание:
Метод позволяет получить СК макроэлемента в СК вида или листа, угол поворота, флаг
зеркальной симметрии объекта. Если СК макро не имеет, функция вернет 0.
Если macro = 0, функция позволяет получить СК редактируемого макроэлемента.

ksSetMacroParam  Записать параметры макроэлемента
Интерфейс...
Аналог данного метода при использовании API экспортных функций " ksSetMacroParam
Синтаксис Automation:
long ksSetMacroParam (long ref, 
LPDISPATCH userPars, 
bool dblClickOff, 
bool hotpoints, 
bool externEdit );
Входные параметры:

ref " указатель на макроэлемент,
userPars " указатель на интерфейс ksUserParam,
3670



dblClickOff " признак редактирования по двойному щелчку:
TRUE " выключено,
FALSE " включено,

hotpoints " признак наличия интерфейса характерных точек:
TRUE " интерфейс характерных точек включен,
FALSE " выключен,

externEdit признак наличия интерфейса внешнего управления:
TRUE " интерфейс внешнего управления включен,
FALSE " выключен.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1. Метод записывает в указанный макроэлемент параметры редактирования: имя файла
библиотеки, имя библиотеки и номер функции, предназначенной для редактирования
данного макроэлемента. Получить значения параметров макроэлемента можно, исполь"
зуя метод ksDocument2D::ksGetMacroParam.

2. При необходимости в параметрах макроэлемента можно дополнительно сохранить
пользовательские данные (допустимы все типы данных, кроме указателей), задав
ksUserParam::userParams или ksUserParam::SetUserArray.

3. При значениях параметров ksUserParam::fileName = 0, ksUserParam::libName = 0,
ksUserParam::number="1 в макроэлементе сохраняется в качестве редактирующей та
функция, которая вызвала метод ksSetMacroParam.

4. При обработке событий это правило не действует и в макро прописываются имя той би"
блиотеки и ее файла, которая была использована непосредственно перед этим событи"
ем. Поэтому при создании макроэлемент по событию необходимо явно задавать имя би"
блиотеки, имя файла и номер функции.

ksSetMacroPlacement  Установить точку привязки и угол 
поворота  систему координат макроэлемента
Интерфейс...
Аналог данного метода при использовании API экспортных функций "
SetMacroPlacement.
Синтаксис Automation:
long ksSetMacroPlacement (long macro, 
double x, 
double y, 
double angl, 
long relativ);
Входные параметры:
3671



macro " указатель на макроэлемент
(0 " редактируемый макроэлемент),

x, y " координаты точки привязки,
angl " угол поворота от оси OX против часовой стрелки (в градусах),
relativ признак системы координат:

1 " x, y, angl показывают смещение относительно СК редактируемого 
макроэлемента,
0 " абсолютные значения x, y, angl в СК вида.

Возвращаемое значение:

 1 " в случае удачного завершения,
 0 " в случае неудачи.

Смотрите также:
5. Методы

ksDocument2D::ksGetMacroPlacement,ksDocument2D::ksSetMacroPlacementExРекомен"
дации по обеспечению корректного редактирования библиотекой макроэлементов, гео"
метрия которых зеркально отражена относительно исходного ее построения...

ksSetMacroPlacementEx  Установить точку привязки и 
угол поворота  систему координат макроэлемента
Интерфейс...Аналог данного метода при использовании API экспортных функций "
ksSetMacroPlacementEx.
Синтаксис Automation:
long ksSetMacroPlacementEx(long macro,
double x,
double y,
double angl,
long relativ,
long mirrorSymmetry);
Входные параметры:

macro " указатель на макроэлемент
(0 " редактируемый макроэлемент),

x, y " координаты точки начала координат макроэлемента,
angl " угол поворота от оси OX против часовой стрелки (в градусах),
relativ признак системы координат:

1 " x, y, angl показывают смещение относительно СК 
редактируемого макроэлемента,
0 " абсолютные значения x, y, angl в СК вида,

mirrorSymmetry " флаг зеркальной симметрии объекта.

Возвращаемое значение:
3672



 1 " в случае удачного завершения,
 0 " в случае неудачи.

Примечание:
Метод позволяет установить СК макроэлемента либо в СК вида, либо смещением отно"
сительно СК макро.
Смотрите также:

1. Функция ksDocument2D::ksSetMacroPlacement
2. Рекомендации по обеспечению корректного редактирования библиотекой макроэлемен"

тов, геометрия которых зеркально отражена относительно исходного ее построения...

ksSetMacroWaitDblClickEdit  Изменить режим ожидания 
DblClick при редактировании макроэлемента
Интерфейс...
Аналог данного метода при использовании API экспортных функций "
ksSetMacroWaitDblClickEdit.
Синтаксис Automation:
long ksSetMacroWaitDblClickEdit (reference ref, long waitDblClick);
Входные параметры:

ref " указатель на макроэлемент,
waitDblClick " режим ожидания DblClick (1 " включить, 0 " выключить).

Возвращаемое значение:

1 " в случае успеха,
0 " в случае неудачи.

Примечание:
Макроэлемент, созданный библиотекой, может редактироваться двумя способами:

▼ по первому клику мыши " через характерные точки и\или интерфейс внешних воздейст"
вий;

▼ по двойному клику " через команду библиотеки.
Если время инициализации характерных точек сравнимо с двойным кликом, то редакти"
рование через команду библиотеки становится невозможно. Во время редактирования
макроэлемента, при включенном режиме ожидания DblClick, после первого щелчка по
макроэлементу КОМПАС будет ожидать повторного нажатия в течении времени, уста"
новленного в настройках "Скорость выполнения двойного щелчка".
При выключенном режиме ожидания DblClick пауза отсутствует, и нажатие всегда интер"
претируется как одинарное нажатие.
3673



ksUpdateMacro  Очистить макроэлемент и положить в 
него группу
Интерфейс...Аналог данного метода при использовании API экспортных функций "
ksUpdateMacro.
Синтаксис Automation:
long ksUpdateMacro (long macro, long gr);
Входные параметры:

macro " указатель на макроэлемент,
gr " указатель на группу.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Метод удаляет всю геометрию макроэлемента.

Стили

DeleteStyleFromDocument  Удалить стиль из текущего 
документа
Интерфейс...Справка системы КОМПАС...
Аналог данного метода при использовании API экспортных функций "
ksDeleteStyleFromDocument.
Синтаксис Automation:
long ksDeleteStyleFromDocument (short type, 
LPDISPATCH param, 
short copy);
Входные параметры:

type тип стиля,
param указатель на интерфейс соответствующего типа,
copy " признак используемой структуры стиля:

0 " создать вручную, 
1" взять стиль из библиотеки.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.
3674



Примечание:
В случае, когда стиль берется из библиотеки, param " указатель на интерфейс ksLibStyle.

ksAddStyle  Добавить в документ новый стиль
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций " AddStyle.
Синтаксис Automation:
long ksAddStyle (short type, LPDISPATCH param, short copy);
Входные параметры:

type тип стиля,
param указатель на интерфейс соответствующего типа,
copy " признак создания стиля:

0 " создать вручную, 
1" взять стиль из библиотеки.

Типы стилей и интерфейсы...
Возвращаемое значение:

идентификатор стиля " в случае удачного завершения,
0 " в случае неудачи.

Примечания:

1. В настоящее время метод реализован для стилей кривых, текстов и штриховок.
2. При копировании стиля из библиотеки param " указатель на интерфейс ksLibStyle.

ksGetStyleParam  Получить параметры стиля из 
документа
Интерфейс...Справка системы КОМПАС: стиль текста...
Справка системы КОМПАС:стили геометрических объектов...

Аналог данного метода при использовании API экспортных функций " GetStyleParam.
Синтаксис Automation:
long ksGetStyleParam (short type, short styleId, LPDISPATCH param);
Входные параметры:

type " тип стиля,
styleId " номер стиля,
param " указатель на интерфейс соответствующего типа.
3675



Типы стилей и интерфейсы...
Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
В случае неудачи структура param заполняется параметрами стиля по умолчанию.

ksIsStyleInDocument  Проверить, существует ли стиль в 
текущем документе
Интерфейс...Справка системы КОМПАС...
Аналог данного метода при использовании API экспортных функций "
ksIsStyleInDocument.
Синтаксис Automation:
long ksIsStyleInDocument (short type, 
LPDISPATCH param, 
short copy);
Входные параметры:

type " тип стиля,
param " указатель на интерфейс соответствующего типа,
copy " признак используемой структуры стиля:

0 " создать вручную, 
1" взять стиль из библиотеки.

Типы стилей и интерфейсы...Возвращаемое значение:

1 " стиль в документе есть,
0 " стиля в документе нет.

Примечание:
В случае, когда стиль берется из библиотеки, param " указатель на интерфейс ksLibStyle.

Кривые Безье, NURBS, ломаные

ksAddPowerForm  Ввести параметр для построения 
NURBS кусочностепенным способом
