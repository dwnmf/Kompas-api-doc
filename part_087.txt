4739



value " указатель на пользовательскую структуру параметров элемента массива.

Возвращаемое значение:

1 " в случае успеха,
0 " в случае неудачи.

SetArrayItem  Установить параметры элемента 
динамического массива
Пример...
Аналог данной функции при использовании Automation " метод
ksDynamicArray::ksSetArrayItem.
Синтаксис:
int SetArrayItem (reference p, int numb, void * value, int size);
Входные параметры:

p " указатель на массив,
numb " номер элемента массива, нумерация начинается с 0,
size " длина структуры"источника.

Выходной параметр:

value " указатель на структуру параметров элемента массива.

Возвращаемое значение:

1 " в случае успеха,
0 " в случае неудачи.

Функции работы с атрибутами
Функции данного раздела позволяют работать с атрибутами объектов.

ChoiceAttr  Вывести диалог просмотра атрибутов 
объекта
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/502_Glava61_Obshchie_svedenija_.htm
Аналог данной функции при использовании Automation " метод
ksAttributeObject::ksChoiceAttr.
Синтаксис:
reference ChoiceAttr (reference pObj);
4740



Входной параметр:

pObj " указатель на объект, к которому подключены атрибуты.

Возвращаемое значение:

указатель на атрибут " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
Указатель на объект reference pObj может быть получен следующими способами:

▼ с помощью Итератора " методами CreateIterator, MoveIterator.
▼ с помощью методов создания объектов, возвращающих указатель reference на создан"

ный объект, например, reference LineSeg.

ChoiceAttrTypes  Выдать диалог для просмотра в 
библиотеке атрибутов списка типов атрибутов и 
выбора нужного типа
Пример...
Аналог данной функции при использовании Automation " метод
ksAttributeObject::ksChoiceAttrTypes.
Синтаксис:
double ChoiceAttrTypes (char * libname);
Входной параметр:

libName " имя библиотеки типов атрибутов, 
если libname = NULL, то тип атрибута берется из текущего документа.

Возвращаемое значение:

уникальный номер типа атрибута " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
Диалог "привязан" к главному окну.

CreateAttr  Создать атрибут объекта
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/502_Glava61_Obshchie_svedenija_.htm
Замечание:
4741



Функция устарела, рекомендуется использовать ksCreateAttr
Синтаксис:
reference CreateAttr (reference pObj, 
Attribute * attr, 
double attrID, 
char *libname);
Входные параметры:

pObj " указатель на объект (группа, вид, отдельный объект), атрибут которого 
создается. 
Если pObj = 0, то создается атрибут документа,

attr " указатель на структуру параметров табличного атрибута Attribute,
attrID " уникальный номер типа атрибута,
libName " имя библиотеки типов атрибутов, 

если libname = NULL, то тип атрибута берется из текущего документа.

Возвращаемое значение:

указатель на атрибут " в случае удачного завершения,
0 " в случае неудачи.

CreateAttrIterator  Создать итератор для перебора 
атрибутов объекта
Пример...
Аналог данной функции при использовании Automation " метод
ksIterator::ksCreateAttrIterator.
Синтаксис:
reference CreateAttrIterator(reference obj,
                    unsigned int key1,
                    unsigned int key2,
                    unsigned int key3,
                    unsigned int key4,
                    double numb);
Входные параметры:

obj " указатель на объект,
key1, key2, key3, key4 " ключи для поиска по ключам,
numb " номер типа атрибута для поиска по номеру.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.
4742



Примечание:

1.  Если obj = 0, то производится перемещение по объектам с заданным атрибутом внутри
графического документа.

2.  Если obj не равен 0, то объектом может быть объект вида, вид, группа, слой, тогда дви"
жение будет происходить по атрибутам этого объекта.

3.  Если obj не равен 0, то объектом может быть документ, тогда движение будет происхо"
дить по атрибутам документа.

4.  Итератор работает с атрибутами активного документа.

CreateAttrType  Создать описание типа атрибута
Пример...
Синтаксис:
double CreateAttrType (AttributeType * attrType, char * libname);
Входные параметры:

attrType " указатель на структура параметров типа атрибута ksAttributeType.
libName " имя библиотеки типов атрибутов, 

если libname = NULL, то тип атрибута создается в текущем документе.

Возвращаемое значение:

уникальный номер типа атрибута " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
Функция устарела, рекомендуется использовать ksCreateAttrType.

DeleteAttr  Удалить атрибут объекта
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/502_Glava61_Obshchie_svedenija_.htm
Аналог данной функции при использовании Automation " метод
ksAttributeObject::ksDeleteAttr.
Синтаксис:
int DeleteAttr (reference pObj, reference PAttr, char * password);
Входные параметры:

pObj " указатель на объект, к которому подключен атрибут. 
Если pObj = 0 " атрибут текущего документа,

pAttr " указатель на удаляемый атрибут,
4743



password " пароль атрибута.
Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание:

1. Указатель на объект reference pObj может быть получен следующими способами:
▼ с помощью функций Итератора CreateIterator, MoveIterator.
▼ с помощью методов создания объектов, возвращающих указатель reference на создан"

ный объект, например, reference LineSeg. 
2.  Указатель на атрибут reference pAttr может быть получен:

▼ с помощью функций итератора CreateAttrIterator, MoveAttrIterator,
▼ с помощью функций создания атрибутов ksCreateAttr, или выбора атрибутов ChoiceAttr.

DeleteAttrType  Удалить описание атрибута
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/502_Glava61_Obshchie_svedenija_.htm
Аналог данной функции при использовании Automation " метод
ksAttributeObject::ksDeleteAttrType.
Синтаксис:
int DeleteAttrType (double attrID, char *libname, char * password);
Входные параметры:

attrID " уникальный номер типа,
libName " имя библиотеки типов атрибутов, 

если libname = NULL, то тип атрибута удаляется из текущего документа,
password " пароль типа атрибута.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
Уникальный номер типа атрибута attrID может быть получен с помощью поля typeid
структуры параметров типа атрибута LibraryAttrTypeParam, которая может быть получена
с помощью функции ksGetLibraryAttrTypesArray, или с помощью функции
GetAttrKeysInfo. Тип атрибута должен быть предварительно создан, например, с помо"
щью функции ksCreateAttrType.
4744



GetAttrColumnInfo  Получить информацию по 
столбцу
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/502_Glava61_Obshchie_svedenija_.htm
Аналог данной функции при использовании Automation " метод
ksAttributeObject::ksGetAttrColumnInfo.
Синтаксис:
int GetAttrColumnInfo (reference pAttr, unsigned int columnNumb, ColumnInfo *columnInfo);
Входные параметры:

pAttr " указатель на атрибут,
columnNumb " номер колонки.

Выходной параметр:

columnInfo " адрес структуры для записи результата.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
 Указатель на атрибут reference pAttr может быть получен следующими способами:

▼ с помощью функций итератора CreateAttrIterator, MoveAttrIterator,
▼ с помощью функций создания атрибутов ksCreateAttr или выбора атрибутов ChoiceAttr.

GetAttrKeysInfo  Получить информацию для поиска
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/502_Glava61_Obshchie_svedenija_.htm
Аналог данной функции при использовании Automation " метод
ksAttributeObject::ksGetAttrKeysInfo.
Синтаксис:
int GetAttrKeysInfo (reference pAttr,
unsigned int *key1,
unsigned int *key2,
unsigned int *key3,
unsigned int *key4,
4745



double attrID);
Входной параметр:

pAttr " указатель на атрибут,

Выходные параметры:

key1, key2, key3, key4 " ключи атрибута для поиска по значению,
attrID " уникальный номер типа атрибута.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
 Указатель на атрибут reference pAttr может быть получен следующими способами:

▼ с помощью функций итератора CreateAttrIterator, MoveAttrIterator,
▼ с помощью функций создания атрибутов ksCreateAttr или выбора атрибутов ChoiceAttr.

GetAttrRow  Получить строку атрибута
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/502_Glava61_Obshchie_svedenija_.htm
Синтаксис:
int GetAttrRow (reference pAttr,
unsigned int rowNumb,
unsigned char *flagVisible,
void *value,
unsigned int size);
Входные параметры:

pAttr " указатель на атрибут,
rowNumb " номер строки,
size " размер выделенной под value памяти.

Выходной параметр:

value " указатель на область памяти, куда копируются значения,
flagVisible " указатель на массив флагов видимости ячеек строки.

Возвращаемое значение:
4746



1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание:

1.  Функция устарела, рекомендуется вместо нее использовать функцию ksGetAttrRow.
2.  Указатель на атрибут reference pAttr может быть получен следующими способами:

▼ с помощью функций итератора CreateAttrIterator, MoveAttrIterator,
▼ с помощью функций создания атрибутов ksCreateAttr или выбора атрибутов ChoiceAttr.
3.  Перед использованием указателя flagVisible должен быть выделен буфер памяти, на"

пример, char buffer[MAX_TEXT_LENGTH], и его адрес присвоен переменной flagVisible.
4.  Перед использованием указателя value должен быть выделен буфер памяти, например,

char buffer[MAX_TEXT_LENGTH], и его адрес присвоен переменной value.
5.  Для получения размера данных строки атрибута может быть использована функция

ksGetSizeAttrRow.
6.  Тип данных, которые находятся в области памяти с указателем value, описывается

структурой параметров ColumnInfo для каждой колонки атрибута.

GetAttrTabInfo  Получить информацию по 
табличному атрибуту
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/502_Glava61_Obshchie_svedenija_.htm
Аналог данной функции при использовании Automation " метод
ksAttributeObject::ksGetAttrTabInfo.
Синтаксис:
int GetAttrTabInfo (reference pAttr, unsigned int * rowsCount, unsigned int * columnsCount);
Входной параметр:

pAttr " указатель на атрибут.

Выходные параметры:

rowsCount " количество строк атрибута,
columnsCount " количество столбцов атрибута.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

 Указатель на атрибут reference pAttr может быть получен следующими способами:
4747



▼ с помощью функций итератора CreateAttrIterator, MoveAttrIterator,
▼ с помощью функций создания атрибутов ksCreateAttr или выбора атрибутов ChoiceAttr.

GetAttrType  Получить описание типа атрибута
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/502_Glava61_Obshchie_svedenija_.htm
Функция устарела, рекомендуется использовать ksGetAttrType.
Синтаксис:
int GetAttrType (double attrID, char *libname, AttributeType * attrType);
Входной параметр:

attrID " уникальный номер типа атрибута,
libName " имя библиотеки типов атрибутов, 

если libname = NULL, то тип атрибута из текущего документа.

Выходной параметр:

attrType " указатель на структуру типа атрибута....

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

GetAttrValue  Получить значение атрибута
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/502_Glava61_Obshchie_svedenija_.htm
Замечание. Функция устарела, вместо нее использовать ksGetAttrValue.
Аналог данной функции при использовании Automation " метод
ksAttributeObject::ksGetAttrValue.
Синтаксис:
int GetAttrValue (reference pAttr,
unsigned int rowNumb,
unsigned int columnNumb,
 unsigned char *flagVisible,
void *value, unsigned int size);
4748



Входные параметры:

pAttr " указатель на атрибут,
rowNumb " номер строки,
columnNumb " номер колонки,
flagVisible " указатель на массив флагов видимости ячеек строки,
size " размер выделенной под value памяти.

Выходной параметр:

value " указатель на область памяти, куда копируются значения.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
Тип данных, которые находятся в области памяти с указателем value, описывается струк"
турой параметров ColumnInfo для каждой колонки атрибута.

GetSizeAttrRow  Получить длину строки табличного 
атрибута
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/502_Glava61_Obshchie_svedenija_.htm
Аналог данной функции при использовании Automation " метод
ksAttributeObject::ksGetSizeAttrRow.
Синтаксис:
int GetSizeAttrRow (reference pAttr);
Входной параметр:

pAttr " указатель на атрибут.

Возвращаемое значение:

длина строки атрибута " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
Функция устарела, рекомендуется вместо нее использовать функцию ksGetSizeAttrRow.
4749



GetSizeAttrValue  Получить длину поля атрибута
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/502_Glava61_Obshchie_svedenija_.htm
Аналог данной функции при использовании Automation " метод
ksAttributeObject::ksGetSizeAttrValue.
Синтаксис:
int GetSizeAttrValue (reference pAttr, unsigned int columnNumb);
Входные параметры:

pAttr " указатель на атрибут,
columnNumb " номер колонки.

Возвращаемое значение:

длина поля атрибута " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
Функция устарела, рекомендуется вместо нее использовать функцию ksGetSizeAttrValue.

ksAddAttrRow  Добавить строку к табличному 
атрибуту
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/502_Glava61_Obshchie_svedenija_.htm
Аналог данной функции при использовании Automation " метод
ksAttributeObject::ksAddAttrRow.
Синтаксис:
int ksAddAttrRow (reference pAttr,
int rowNumb,
unsigned char *flagVisible,
void *value,
unsigned int size,
char * password);
Входные параметры:

pAttr " указатель на атрибут,
rowNumb " номер строки,
flagVisible " указатель на массив флагов видимости ячеек строки,
value " указатель на область памяти, откуда копируются данные,
4750



Size " размер выделенной под value памяти,
password " пароль атрибута.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечания:

1.  Указатель на атрибут reference pAttr может быть получен следующими способами:
▼ с помощью функций итератора CreateAttrIterator, MoveAttrIterator,
▼ с помощью функций создания атрибутов ksCreateAttr или выбора атрибутов ChoiceAttr.
2.  Перед использованием указателя flagVisible должен быть выделен буфер памяти, и его

адрес присвоен переменной flagVisible.
3.  Перед использованием указателя value должен быть выделен буфер памяти, например,

char buffer[MAX_TEXT_LENGTH], и его адрес присвоен переменной value.
4.  Тип данных, которые находятся в области памяти с указателем value, описывается

структурой параметров ColumnInfo для каждой колонки атрибута.
5.  При использовании Unicode следует использовать функцию ksAddAttrRowW.

ksAddAttrRowW  Добавить строку к табличному 
атрибуту (Unicode)
Справка системы КОМПАС...
KOMPAS.chm::/502_Glava61_Obshchie_svedenija_.htm
Аналог данной функции при использовании Automation " метод
ksAttributeObject::ksAddAttrRow.
Синтаксис:
int ksAddAttrRowW (reference pAttr,
int rowNumb,
unsigned char *flagVisible,
void *value,
unsigned int size,
char * password);
Входные параметры:

pAttr " указатель на атрибут,
rowNumb " номер строки,
flagVisible " указатель на массив флагов видимости ячеек строки,
value " указатель на область памяти, откуда копируются данные,
Size " размер выделенной под value памяти,
password " пароль атрибута.

Возвращаемое значение:
4751



1 " в случае удачного завершения,
0 " в случае неудачи.

Примечания:

1.  Указатель на атрибут reference pAttr может быть получен следующими способами:
▼ с помощью функций итератора CreateAttrIterator, MoveAttrIterator,
▼ с помощью функций создания атрибутов ksCreateAttr или выбора атрибутов ChoiceAttr.
2.  Перед использованием указателя flagVisible должен быть выделен буфер памяти, и его

адрес присвоен переменной flagVisible.
3.  Перед использованием указателя value должен быть выделен буфер памяти, например,

char buffer[MAX_TEXT_LENGTH], и его адрес присвоен переменной value.
4.  Тип данных, которые находятся в области памяти с указателем value, описывается

структурой параметров ColumnInfoW для каждой колонки атрибута.
5.  При использовании ANSI следует использовать функцию ksAddAttrRow.

ksChoiceAttr3D  Просмотреть атрибуты объекта 
документамодели
Справка системы КОМПАС...
KOMPAS.chm::/502_Glava61_Obshchie_svedenija_.htm
Аналог данной функции при использовании Automation " метод
ksAttributeObject::ksChoiceAttr3D.
Синтаксис:
LPATTRIBUTE3D ksChoiceAttr3D (LPUNKNOWN pObj);
Входные параметры:

pObj " указатель на объект.

Возвращаемое значение:

указатель на интерфейс атрибута IAttribute3D " в случае удачного завершения,
0 " в случае неудачи.

ksCreateAttr  Создать атрибут объекта
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/502_Glava61_Obshchie_svedenija_.htm
Аналог данной функции при использовании Automation " метод
ksAttributeObject::ksCreateAttr.
4752



Синтаксис:
reference ksCreateAttr (reference pObj,
ksAttribute * attr,
double attrID,
char *libname);
Входные параметры:

pObj " указатель на объект (группа, вид, отдельный объект), атрибут которого 
создается. 
Если pObj = 0, то создается атрибут документа,

attr " указатель на структуру параметров атрибута ksAttribute,
attrID " уникальный номер типа атрибута,
libName " имя библиотеки типов атрибутов, 

если libname = NULL, то тип атрибута берется из текущего документа.

Возвращаемое значение:

указатель на атрибут " в случае удачного завершения,
0 " в случае неудачи.

Примечания:

1.  Указатель на объект reference pObj может быть получен следующими способами:
▼ с помощью функций Итератора CreateIterator, MoveIterator.
▼ с помощью функций создания объектов, возвращающих указатель reference на создан"

ный объект, например, reference LineSeg. 
2.  Уникальный номер типа атрибута attrID может быть получен с помощью поля typeid

структуры параметров типа атрибута LibraryAttrTypeParam, которая может быть получена
с помощью функции ksGetLibraryAttrTypesArray, или с помощью функции
GetAttrKeysInfo. Тип атрибута должен быть предварительно создан, например, с помо"
щью функции ksCreateAttrType.

ksCreateAttrType  Создать новый тип атрибута
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/502_Glava61_Obshchie_svedenija_.htm
Аналог данной функции при использовании Automation " метод
ksAttributeObject::ksCreateAttrType.
Синтаксис:
double ksCreateAttrType (ksAttributeType * attrType, char * libname); 
Входные параметры:
4753



attrType " attrType " указатель на структуру параметров типа атрибута ksAttributeType,
libName " имя библиотеки типов атрибутов, 

если libname = NULL, то тип атрибута создается в текущем документе.

Возвращаемое значение:

уникальный номер типа атрибута " в случае удачного завершения,
0 " в случае неудачи.

ksCreateAttr3D  Cоздать атрибут по номеру типа 
атрибута из библиотеки
Справка системы КОМПАС...
KOMPAS.chm::/502_Glava61_Obshchie_svedenija_.htm
Аналог данной функции при использовании Automation " метод
ksAttributeObject::ksCreateAttr3D.
Синтаксис:
LPATTRIBUTE3D_IFUNC ksCreateAttr3D (LPUNKNOWN pObj, ksAttribute * attr, double attrID,
char *libname);
Входные параметры:

pObj " указатель на объект для которого создается атрибут,
attr " указатель на структуру параметров атрибута ksAttribute,
attrID " уникальный номер типа атрибута,
libName " имя библиотеки типов атрибутов, 

если libname = NULL, то тип атрибута берется в документе.

Возвращаемое значение:

Указатель на интерфейс атрибута IAttribute3D " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
Уникальный номер типа атрибута attrID может быть получен с помощью поля typeid
структуры параметров типа атрибута LibraryAttrTypeParam, которая может быть получена
с помощью функции ksGetLibraryAttrTypesArray. Тип атрибута должен быть предвари"
тельно создан, например, с помощью функции ksCreateAttrType. 
4754



ksCreateAttr3DEx  Cоздать атрибут по номеру типа 
атрибута из библиотеки libname
Справка системы КОМПАС...
KOMPAS.chm::/502_Glava61_Obshchie_svedenija_.htm
Аналог данной функции при использовании Automation " метод
ksAttributeObject::ksCreateAttr3DEx.
Синтаксис Automation:
ksAttribute3D * ksCreateAttr3DEx (LPDISPATCH pObj,
LPDISPATCH pSourcePart,
LPDISPATCH attr,
double attrID,
BSTR libname);
Входные параметры:

pObj " указатель на объект для которого создается атрибут,
sourcePart " указатель на интерфейс вставки детали IPart,
attr " указатель на структуру параметров атрибута ksAttribute,
attrID " уникальный номер типа атрибута,
libName " имя библиотеки типов атрибутов, 

если libname = NULL, то тип атрибута берется в документе.

Возвращаемое значение:

Указатель на атрибут IAttribute3D " в случае удачного завершения,
0 " в случае неудачи.

Примечание:

1.  Если libname = NULL " тип атрибута берется в документе.
2.  pObj " может быть равен:

▼ NULL или указателю на интерфейс 3d документа IDocument3D " создается атрибут у до"
кумента;

▼ указателю на интерфейс коллекции объектов дерева IFeatureCollection " атрибут группо"
вой;

▼ указателю на интерфейс объекта дерева IFeature " атрибут у определенного объекта.
3.  Атрибут можно добавить ко всем объектам дерева построений, кроме верхнего компо"

нента, сопряжений, группы сопряжений.
4.  sourcePart " может быть:

▼ NULL " атрибут будет создан в текущем документе,
▼ указатель на интерфейс детали или подсборки вставленной в сборку IPart " атрибут бу"

дет создан в документе"источнике,
▼ если sourcePart == pObj создается атрибут документа в источнике.
5.  При использовании Unicode следует использовать функцию ksCreateAttr3DExW.
4755



ksCreateAttr3DExW  Cоздать атрибут по номеру 
типа атрибута из библиотеки libname (Unicode)
Справка системы КОМПАС...
KOMPAS.chm::/502_Glava61_Obshchie_svedenija_.htm
Аналог данной функции при использовании Automation " метод
ksAttributeObject::ksCreateAttr3DEx.
Синтаксис Automation:
ksAttribute3D * LIB_FUNC ksCreateAttr3DExW (LPUNKNOWN pObj,
IPart * pSourcePart,
ksAttributeW * attr,
double attrID,
LPWSTR libname);
Входные параметры:

pObj " указатель на объект для которого создается атрибут,
sourcePart " указатель на интерфейс вставки детали IPart,
attr " указатель на структуру параметров атрибута ksAttribute,
attrID " уникальный номер типа атрибута,
libName " имя библиотеки типов атрибутов, 

если libname = NULL, то тип атрибута берется в документе.

Возвращаемое значение:

Указатель на атрибут IAttribute3D " в случае удачного завершения,
0 " в случае неудачи.

Примечание:

1.  Если libname = NULL " тип атрибута берется в документе.
2.  pObj " может быть равен:

▼ NULL или указателю на интерфейс 3d документа IDocument3D " создается атрибут у до"
кумента,

▼ указателю на интерфейс коллекции объектов дерева IFeatureCollection " атрибут группо"
вой,

▼ указателю на интерфейс объекта дерева IFeature " атрибут у определенного объекта.
3.  Атрибут можно добавить ко всем объектам дерева построений, кроме верхнего компо"

нента, сопряжений, группы сопряжений.
4.  sourcePart " может быть:

▼ NULL " атрибут будет создан в текущем документе,
▼ указатель на интерфейс детали или подсборки вставленной в сборку IPart " атрибут бу"

дет создан в документе"источнике,
▼ если sourcePart == pObj, создается атрибут документа в источнике.
5.  При использовании ANSI следует использовать функцию ksCreateAttr3DEx.
4756



ksDeleteAttrRow  Удалить строку табличного 
атрибута
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/502_Glava61_Obshchie_svedenija_.htm
Аналог данной функции при использовании Automation " метод
ksAttributeObject::ksDeleteAttrRow.
Синтаксис:
int ksDeleteAttrRow (reference pAttr, unsigned int rowNumb, char * password);
Входные параметры:

pAttr " указатель на атрибут,
rowNumb " номер строки,
password " пароль атрибута.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание:

1.  Указатель на атрибут reference pAttr может быть получен следующими способами:
▼ с помощью функций итератора CreateAttrIterator, MoveAttrIterator,
▼ с помощью функций создания атрибутов ksCreateAttr или выбора атрибутов ChoiceAttr.

ksDeleteAttr3D  Удалить атрибут
Справка системы КОМПАС...
KOMPAS.chm::/502_Glava61_Obshchie_svedenija_.htm
Аналог данной функции при использовании Automation " метод
ksAttributeObject::ksDeleteAttr3D.
Синтаксис:
int ksDeleteAttr3D (LPUNKNOWN pObj,
LPATTRIBUTE3D pAttr,
char* password);
Входные параметры:

pObj " указатель на объект, у которого удаляется атрибут,
pAttr " указатель на атрибут IAttribute3D,
4757



password " пароль.
Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

ksDeleteAttr3DW  Удалить атрибут (Unicode)
Справка системы КОМПАС...
KOMPAS.chm::/502_Glava61_Obshchie_svedenija_.htm
Аналог данной функции при использовании Automation " метод
ksAttributeObject::ksDeleteAttr3D.
Синтаксис:
int LIB_FUNC ksDeleteAttr3DW (LPUNKNOWN pObj,
LPATTRIBUTE3D pAttr,
LPWSTR password);
Входные параметры:

pObj " указатель на объект, у которого удаляется атрибут,
pAttr " указатель на атрибут IAttribute3D,
password " пароль.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

ksGetAttrRow  Получить строку атрибута
Справка системы КОМПАС...
KOMPAS.chm::/502_Glava61_Obshchie_svedenija_.htm
Аналог данного метода при использовании Automation " метод
ksAttributeObject::ksGetAttrRow.
Синтаксис:
int ksGetAttrRow (reference pAttr,
unsigned int rowNumb,
unsigned char * flagVisible,
unsigned char * columnKeys,
void * value,
unsigned int size );
Входные параметры:

pAttr " указатель на атрибут,
4758



rowNumb " номер строки,
size " размер выделенной под value памяти.

Выходной параметр:

value " указатель на область памяти, куда копируются значения,
flagVisible " указатель на массив флагов видимости ячеек строки,
columnKeys " указатель на массив ключей ячеек строки.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание:

1.  Указатель на атрибут reference pAttr может быть получен следующими способами:
▼ с помощью функций итератора CreateAttrIterator, MoveAttrIterator,
▼ с помощью функций создания атрибутов ksCreateAttr или выбора атрибутов ChoiceAttr.
2.  Перед использованием указателя flagVisible должен быть выделен буфер памяти, на"

пример, char buffer[MAX_TEXT_LENGTH], и его адрес присвоен переменной flagVisible.
3.  Перед использованием указателя columnKeys должен быть выделен буфер памяти, и

его адрес присвоен переменной columnKeys.
4.  Перед использованием указателя value должен быть выделен буфер памяти, например,

char buffer[MAX_TEXT_LENGTH], и его адрес присвоен переменной value.
5.  Для получения размера данных ячейки атрибута может быть использована функция

ksGetSizeAttrValue.
6.  При использовании Unicode следует использовать функцию ksGetAttrRowW.
7.  Тип данных, которые находятся в области памяти с указателем value, описывается

структурой параметров ColumnInfo для каждой колонки атрибута.

ksGetAttrRowW  Получить строку атрибута 
(Unicode)
Справка системы КОМПАС...
KOMPAS.chm::/502_Glava61_Obshchie_svedenija_.htm
Аналог данного метода при использовании Automation " метод
ksAttributeObject::ksGetAttrRow.
Синтаксис:
int ksGetAttrRowW (reference pAttr,
unsigned int rowNumb,
unsigned char * flagVisible,
unsigned char * columnKeys,
void * value,
unsigned int size );
4759



Входные параметры:

pAttr " указатель на атрибут,
rowNumb " номер строки,
size " размер выделенной под value памяти.

Выходной параметр:

value " указатель на область памяти, куда копируются значения,
flagVisible " указатель на массив флагов видимости ячеек строки,
columnKeys " указатель на массив ключей ячеек строки.

Возвращаемое значение:

1 " в случае удачного завершения.
0 " в случае неудачи.

Примечание:

1.  Указатель на атрибут reference pAttr может быть получен следующими способами:
▼ с помощью функций итератора CreateAttrIterator, MoveAttrIterator,
▼ с помощью функций создания атрибутов ksCreateAttr или выбора атрибутов ChoiceAttr.
2.  Перед использованием указателя flagVisible должен быть выделен буфер памяти, на"

пример, char buffer[MAX_TEXT_LENGTH], и его адрес присвоен переменной flagVisible.
3.  Перед использованием указателя columnKeys должен быть выделен буфер памяти, и

его адрес присвоен переменной columnKeys.
4.  Перед использованием указателя value должен быть выделен буфер памяти, например,

char buffer[MAX_TEXT_LENGTH], и его адрес присвоен переменной value.
5.  Для получения размера данных ячейки атрибута может быть использована функция

ksGetSizeAttrValue.
6.  При использовании ANSI следует использовать функцию ksGetAttrRow.
7.  Тип данных, которые находятся в области памяти с указателем value, описывается

структурой параметров ColumnInfoW для каждой колонки атрибута.

ksGetAttrType  Получить описание типа табличного 
атрибута из библиотеки
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/502_Glava61_Obshchie_svedenija_.htm
Аналог данной функции при использовании Automation " метод
ksAttributeObject::ksGetAttrType.
Синтаксис:
4760



int ksGetAttrType (double attrID, char * libname, ksAttributeType * attrType);
Входной параметр:

attrID " уникальный номер типа атрибута,
libName " имя библиотеки типов атрибутов, 

если libname = NULL, то тип атрибута из текущего документа.

Выходной параметр:

attrType " указатель на структуру типа атрибута AttributeType....

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
Уникальный номер типа атрибута attrID может быть получен с помощью поля typeid
структуры параметров типа атрибута LibraryAttrTypeParam, которая может быть получена
с помощью функции ksGetLibraryAttrTypesArray, или с помощью функции
GetAttrKeysInfo. Тип атрибута должен быть предварительно создан, например, с помо"
щью функции ksCreateAttrType.

ksGetAttrTypeInfo  Выдать информацию о типе 
атрибута
Синтаксис:
int LIB_FUNC ksGetAttrТypeInfo (reference pAttr,
double * numb,
char * attrTypeName,
unsigned int attrTypeNameSize,
char * attrTypeFileName,
unsigned int attrTypeFileNameSize,
char * attrTypePathInFile,
unsigned int attrTypePathInFileSize);
Входные параметры:

pAttr " указатель на атрибут,
attrTypeNameSize " размер буферa имени типа атрибута,
attrTypeFileNameSize " размер буферa имени файла с описанием типа атрибута,
attrTypePathInFileSize " размер буферa для пути к описанию типа атрибута внутри 

библиотеки типов.

Выходные параметры:
4761



numb " номер типа атрибута,
attrTypeName " имя типа атрибута,
attrTypeFileName " имя файла, в котором описан тип атрибута,
attrTypePathInFile " путь к описанию типа атрибута внутри библиотеки типов.

Возвращаемое значение:

TRUE " в случае удачного завершения,
FALSE " в случае неудачи.

Примечание:
Если присылается NULL, соответствующее поле не заполняется.

ksGetAttrTypeInfoW  Выдать информацию о типе 
атрибута (Unicode)
Синтаксис:
int LIB_FUNC ksGetAttrТypeInfoW(reference pAttr,
double * numb,
LPWSTR attrTypeName,
unsigned int attrTypeNameSize,
LPWSTR * attrTypeFileName,
unsigned int attrTypeFileNameSize,
LPWSTR * attrTypePathInFile,
unsigned int attrTypePathInFileSize);
Входные параметры:

pAttr " указатель на атрибут,
attrTypeNameSize " размер буферa имени типа атрибута,
attrTypeFileNameSize " размер буферa имени файла с описанием типа атрибута,
attrTypePathInFileSize " размер буферa для пути к описанию типа атрибута внутри 

библиотеки типов.

Выходные параметры:

numb " номер типа атрибута,
attrTypeName " имя типа атрибута,
attrTypeFileName " имя файла, в котором описан тип атрибута,
attrTypePathInFile " путь к описанию типа атрибута внутри библиотеки типов.

Возвращаемое значение:

TRUE " в случае удачного завершения,
FALSE " в случае неудачи.
4762



Примечание:
Если присылается NULL, соответствующее поле не заполняется.

ksGetAttrValue  Получить значение ячейки из 
таблицы атрибута
Справка системы КОМПАС...
KOMPAS.chm::/502_Glava61_Obshchie_svedenija_.htm
Аналог данной функции при использовании Automation " метод
ksAttributeObject::ksGetAttrValue.
Синтаксис:
int ksGetAttrValue (reference pAttr,
unsigned int rowNumb,
unsigned int columnNumb,
unsigned char *flagVisible,
unsigned char *columnKeys,
void *value,
unsigned int size);
Входные параметры:

pAttr " указатель на атрибут,
rowNumb " номер строки,
columnNumb " номер колонки,
size " размер выделенной под value памяти.

Выходной параметр:

value " указатель на область памяти, куда копируются значения,
flagVisible " указатель на массив флагов видимости ячеек строки,
columnKeys " указатель на массив ключей ячеек строки.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание:

1.  Для нетабличного атрибута номер колонки равен нулю.
2.  Указатель на атрибут reference pAttr может быть получен следующими способами:

▼ с помощью функций итератора CreateAttrIterator, MoveAttrIterator,
▼ с помощью функций создания атрибутов ksCreateAttr или выбора атрибутов ChoiceAttr.
3. .Для получения размера данных ячейки атрибута может быть использована функция

ksGetSizeAttrValue.
4763



4.  Перед использованием указателей value, flagVisible, columnKeys для каждого указателя
должен быть выделен буфер памяти, и его адрес присвоен соответствующей перемен"
ной.

5.  При использовании Unicode следует использовать функцию ksGetAttrValueW.
6.  Тип данных, которые находятся в области памяти с указателем value, описывается

структурой параметров ColumnInfo для каждой колонки атрибута.

ksGetAttrValueW  Получить значение ячейки из 
таблицы атрибута (Unicode)
Справка системы КОМПАС...
KOMPAS.chm::/502_Glava61_Obshchie_svedenija_.htm
Аналог данной функции при использовании Automation " метод
ksAttributeObject::ksGetAttrValue.
Синтаксис:
int ksGetAttrValueW (reference pAttr,
unsigned int rowNumb,
unsigned int columnNumb,
unsigned char *flagVisible,
unsigned char *columnKeys,
void *value,
unsigned int size);
Входные параметры:

pAttr " указатель на атрибут,
rowNumb " номер строки,
columnNumb " номер колонки,
size " размер выделенной под value памяти.

Выходной параметр:

value " указатель на область памяти, куда копируются значения,
flagVisible " указатель на массив флагов видимости ячеек строки,
columnKeys " указатель на массив ключей ячеек строки.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание:

1.  Для нетабличного атрибута номер колонки равен нулю.
2.  Указатель на атрибут reference pAttr может быть получен следующими способами:
4764



▼ с помощью функций итератора CreateAttrIterator, MoveAttrIterator,
▼ с помощью функций создания атрибутов ksCreateAttr или выбора атрибутов ChoiceAttr.
3. .Для получения размера данных ячейки атрибута может быть использована функция

ksGetSizeAttrValue.
4.  Перед использованием указателей value, flagVisible, columnKeys для каждого указателя

должен быть выделен буфер памяти, и его адрес присвоен соответствующей перемен"
ной.

5.  При использовании ANSI следует использовать функцию ksGetAttrValue.
6.  Тип данных, которые находятся в области памяти с указателем value, описывается

структурой параметров ColumnInfoW для каждой колонки атрибута.

ksGetLibraryAttrTypesArray  Получить массив типов 
атрибутов, находящихся в указанной библиотеке
Пример...
Аналог данной функции при использовании Automation " метод
ksAttributeObject::ksGetLibraryAttrTypesArray.
Синтаксис:
reference ksGetLibraryAttrTypesArray (char * libname);
Входной параметр:

libName " имя библиотеки типов атрибутов.
Если libname = NULL, то типы атрибутов из текущего документа.

Возвращаемое значение:

указатель на динамический массив ksDynamicArray " в случае удачного 
LIBRARY_ATTR_TYPE_ARR " массив типов атрибутов, находящихся в завершения,
заданной библиотеке типов
0 " в случае неудачи.

ksGetSizeAttrRow  Получить длину строки 
указанного табличного атрибута с указателем
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/505_62_1_2_Opisanie_struktury.htm
Аналог данной функции при использовании Automation " метод
ksAttributeObject::ksGetSizeAttrRow.
Синтаксис:
int ksGetSizeAttrRow (reference pAttr, int * count);
4765



Входной параметр:

pAttr " указатель на атрибут.

Выходной параметр:

count " число ячеек с учетом записей.

Возвращаемое значение:

длина строки атрибута " в случае удачного завершения,
0 " в случае неудачи.

Примечание:

1.  Указатель на атрибут reference pAttr может быть получен следующими способами:
▼ с помощью функций итератора CreateAttrIterator, MoveAttrIterator,
▼ с помощью функций создания атрибутов ksCreateAttr или выбора атрибутов ChoiceAttr..
2.  При использовании Unicode следует использовать функцию ksGetSizeAttrRowW.

ksGetSizeAttrRowW  Получить длину строки 
указанного табличного атрибута с указателем 
(Unicode)
Справка системы КОМПАС...
KOMPAS.chm::/505_62_1_2_Opisanie_struktury.htm
Аналог данной функции при использовании Automation " метод
ksAttributeObject::ksGetSizeAttrRowW.
Синтаксис:
int ksGetSizeAttrRowW (reference pAttr, int * count);
Входной параметр:

pAttr " указатель на атрибут.

Выходной параметр:

count " число ячеек с
учетом запи"
сей.

Возвращаемое значение:

длина строки атрибута " в случае удачного завершения,
0 " в случае неудачи.
4766



Примечание:

1.  Указатель на атрибут reference pAttr может быть получен следующими способами:
▼ с помощью функций итератора CreateAttrIterator, MoveAttrIterator,
▼ с помощью функций создания атрибутов ksCreateAttr или выбора атрибутов ChoiceAttr..
2.  При использовании ANSI следует использовать функцию ksGetSizeAttrRow.

ksGetSizeAttrValue  Получить размер данных 
ячейки атрибута
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/505_62_1_2_Opisanie_struktury.htm
Аналог данной функции при использовании Automation " метод
ksAttributeObject::ksGetSizeAttrValue.
Синтаксис:
int ksGetSizeAttrValue (reference pAttr, unsigned int columnNumb, int *count);
Входные параметры:

pAttr " указатель на атрибут,
columnNumb " номер колонки.

Выходной параметр:

count " число ячеек с учетом записей.

Возвращаемое значение:

длина строки ячейки атрибута " в случае удачного завершения,
0 " в случае неудачи.

Примечание:

1.  Указатель на атрибут reference pAttr может быть получен следующими способами:
▼ с помощью функций итератора CreateAttrIterator, MoveAttrIterator,
▼ с помощью функций создания атрибутов ksCreateAttr или выбора атрибутов ChoiceAttr..
2.  При использовании Unicode следует использовать функцию ksGetSizeAttrValueW.
4767



ksGetSizeAttrValueW  Получить размер данных 
ячейки атрибута (Unicode)
Справка системы КОМПАС...
KOMPAS.chm::/505_62_1_2_Opisanie_struktury.htm
Аналог данной функции при использовании Automation " метод
ksAttributeObject::ksGetSizeAttrValueW.
Синтаксис:
int ksGetSizeAttrValueW (reference pAttr, unsigned int columnNumb, int *count);
Входные параметры:

pAttr " указатель на атрибут,
columnNumb " номер колонки.

Выходной параметр:

count " число ячеек с учетом записей.

Возвращаемое значение:

длина строки ячейки атрибута " в случае удачного завершения,
0 " в случае неудачи.

Примечание:

1.  Указатель на атрибут reference pAttr может быть получен следующими способами:
▼ с помощью функций итератора CreateAttrIterator, MoveAttrIterator,
▼ с помощью функций создания атрибутов ksCreateAttr или выбора атрибутов ChoiceAttr..
2.  При использовании ANSI следует использовать функцию ksGetSizeAttrValue.

ksSetAttrRow  Установить строку атрибута
Справка системы КОМПАС...
KOMPAS.chm::/502_Glava61_Obshchie_svedenija_.htm
Аналог данной функции при использовании Automation " метод
ksAttributeObject::ksSetAttrRow.
Синтаксис:
int ksSetAttrRow (reference pAttr,
unsigned int rowNumb,
unsigned char *flagVisible,
unsigned char *columnKeys,
void *value,
4768



unsigned int size,
char *password);
Входные параметры:

pAttr " указатель на атрибут,
rowNumb " номер строки,
flagVisible " указатель на массив флагов видимости ячеек строки,
columnKeys " указатель на массив ключей ячеек строки,
value " указатель на область памяти, откуда копируются данные,
size " размер выделенной под value памяти,
password " пароль атрибута.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Смотрите также:
ksLtVariant
Примечание:

1.  Указатель на атрибут reference pAttr может быть получен следующими способами:
▼ с помощью функций итератора CreateAttrIterator, MoveAttrIterator,
▼ с помощью функций создания атрибутов ksCreateAttr или выбора атрибутов ChoiceAttr.
2.  Перед использованием указателя flagVisible должен быть выделен буфер памяти, и его

адрес присвоен переменной flagVisible.
3.  Перед использованием указателя value должен быть выделен буфер памяти, например,

char buffer[MAX_TEXT_LENGTH], и его адрес присвоен переменной value.
4.  Тип данных, которые находятся в области памяти с указателем value, описывается

структурой параметров ColumnInfo для каждой колонки атрибута.
5.  При использовании Unicode следует использовать функцию ksSetAttrRowW.

ksSetAttrRowW  Установить строку атрибута 
(Unicode)
Справка системы КОМПАС...
KOMPAS.chm::/502_Glava61_Obshchie_svedenija_.htm
Аналог данной функции при использовании Automation " метод
ksAttributeObject::ksSetAttrRow.
Синтаксис:
int ksSetAttrRowW (reference pAttr,
unsigned int rowNumb,
unsigned char *flagVisible,
unsigned char *columnKeys,
4769



void *value,
unsigned int size,
char *password);
Входные параметры:

pAttr " указатель на атрибут,
rowNumb " номер строки,
flagVisible " указатель на массив флагов видимости ячеек строки,
columnKeys " указатель на массив ключей ячеек строки,
value " указатель на область памяти, откуда копируются данные,
Size " размер выделенной под value памяти,
password " пароль атрибута.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Смотрите также:
ksLtVariant
Примечание:

1.  Указатель на атрибут reference pAttr может быть получен следующими способами:
▼ с помощью функций итератора CreateAttrIterator, MoveAttrIterator,
▼ с помощью функций создания атрибутов ksCreateAttr или выбора атрибутов ChoiceAttr.
2.  Перед использованием указателя flagVisible должен быть выделен буфер памяти, и его

адрес присвоен переменной flagVisible.
3.  Перед использованием указателя value должен быть выделен буфер памяти, например,

char buffer[MAX_TEXT_LENGTH], и его адрес присвоен переменной value.
4.  Тип данных, которые находятся в области памяти с указателем value, описывается

структурой параметров ColumnInfoW для каждой колонки атрибута.
5.  При использовании ANSI следует использовать функцию ksSetAttrRow.

ksSetAttrType  Изменить тип атрибута в библиотеке 
типов атрибутов
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/510_62_3_Upravlenie_tipami_atri.htm
Аналог данной функции при использовании Automation " метод
ksAttributeObject::ksSetAttrType.
Синтаксис:
4770



double ksSetAttrType (double attrID,
char * libname,
ksAttributeType * attrType,
char * password);
Входные параметры:

attrID " уникальный номер типа атрибута,
libName " имя библиотеки типов атрибутов, 

если libname = NULL, то тип атрибута изменяется в текущем документе,
attrType " Указатель на структуру параметров типа атрибута...,
password " пароль типа атрибута.

Возвращаемое значение:

уникальный номер типа атрибута " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
Уникальный номер типа атрибута attrID может быть получен с помощью поля typeid
структуры параметров типа атрибута LibraryAttrTypeParam, которая может быть получена
с помощью функции ksGetLibraryAttrTypesArray, или с помощью функции
GetAttrKeysInfo. Тип атрибута должен быть предварительно создан, например, с помо"
щью функции ksCreateAttrType.

ksSetAttrValue  Установить значение атрибута
Справка системы КОМПАС...
KOMPAS.chm::/502_Glava61_Obshchie_svedenija_.htm
Аналог данной функции при использовании Automation " метод
ksAttributeObject::ksSetAttrValue.
Синтаксис:
int ksSetAttrValue(reference pAttr,
unsigned int rowNumb,
unsigned int columnNumb,
unsigned char *flagVisible,
unsigned char *columnKeys,
void *value,
unsigned int size,
char *password);
Входные параметры:

pAttr " указатель на атрибут,
rowNumb " номер строки,
columnNumb " номер колонки,
4771



flagVisible " указатель на массив флагов видимости ячеек строки,
columnKeys " ключ поля колонки (одно значение, если не запись и массив 

значений, если запись),
value " указатель на область памяти, откуда копируется значение ячейки,
size " размер выделенной под value памяти,
password " пароль атрибута.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание:

1.  Указатель на атрибут reference pAttr может быть получен следующими способами:
▼ с помощью функций итератора CreateAttrIterator, MoveAttrIterator,
▼ с помощью функций создания атрибутов ksCreateAttr или выбора атрибутов ChoiceAttr.
2.  Перед использованием указателя flagVisible должен быть выделен буфер памяти, и его

адрес присвоен переменной flagVisible.
3.  Перед использованием указателя value должен быть выделен буфер памяти, например,

char buffer[MAX_TEXT_LENGTH], и его адрес присвоен переменной value.
4.  При использовании Unicode следует использовать функцию ksSetAttrValueW.
5.  Тип данных, которые находятся в области памяти с указателем value, описывается

структурой параметров ColumnInfo для каждой колонки атрибута.

ksSetAttrValueW  Установить значение атрибута 
(Unicode)
Справка системы КОМПАС...
KOMPAS.chm::/502_Glava61_Obshchie_svedenija_.htm
Аналог данной функции при использовании Automation " метод
ksAttributeObject::ksSetAttrValue.
Синтаксис:
int ksSetAttrValueW(reference pAttr,
unsigned int rowNumb,
unsigned int columnNumb,
unsigned char *flagVisible,
unsigned char *columnKeys,
void *value,
unsigned int size,
char *password);
Входные параметры:

pAttr " указатель на атрибут,
4772



rowNumb " номер строки,
columnNumb " номер колонки,
flagVisible " указатель на массив флагов видимости ячеек строки,
columnKeys " ключ поля колонки (одно значение, если не запись и массив значений, 

если запись),
value " указатель на область памяти, откуда копируется значение ячейки,
size " размер выделенной под value памяти,
password " пароль атрибута.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание:

1.  Указатель на атрибут reference pAttr может быть получен следующими способами:
▼ с помощью функций итератора CreateAttrIterator, MoveAttrIterator,
▼ с помощью функций создания атрибутов ksCreateAttr или выбора атрибутов ChoiceAttr.
2.  Перед использованием указателя flagVisible должен быть выделен буфер памяти, и его

адрес присвоен переменной flagVisible.
3.  Перед использованием указателя value должен быть выделен буфер памяти, например,

char buffer[MAX_TEXT_LENGTH], и его адрес присвоен переменной value.
4.  При использовании ANSI следует использовать функцию ksSetAttrValue.
5.  Тип данных, которые находятся в области памяти с указателем value, описывается

структурой параметров ColumnInfoW для каждой колонки атрибута.

MoveAttrIterator  Перебирать атрибуты по 
итератору
Пример...
Аналог данной функции при использовании Automation " метод
ksIterator::ksMoveAttrIterator.
Синтаксис:
reference MoveAttrIterator (reference iterator,
unsigned char ch,
reference * pObj);
Входные параметры:

iterator " указатель на итератор,
ch " направление перемещения итератора:

F " первый атрибут,
N " следующий атрибут,

pObj " указатель на группу.

Возвращаемое значение:
4773



указатель на атрибут " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Если итератор создан для движения по элементам с определенным атрибутом, то pObj "
указатель на объект с данным атрибутом. Если pObj = NULL, pObj не заполняется.

SetAttrRow  Установить строку табличного атрибута
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/502_Glava61_Obshchie_svedenija_.htm
Замечание. Функция устарела, вместо неё использовать ksSetAttrRow.
Синтаксис:
int SetAttrRow (reference pAttr,
unsigned int rowNumb,
unsigned char *flagVisible,
void *value,
unsigned int size,
char * password);
Входные параметры:

pAttr " указатель на атрибут,
rowNumb " номер строки,
flagVisible " указатель на массив флагов видимости ячеек строки,
value " указатель на область памяти, откуда копируются данные,
size " размер выделенной под value памяти,
password " пароль атрибута.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
Тип данных, которые находятся в области памяти с указателем value, описывается струк"
турой параметров ColumnInfo для каждой колонки атрибута.

SetAttrType  Установить описание типа атрибута
Пример...
4774



Справка системы КОМПАС...
KOMPAS.chm::/502_Glava61_Obshchie_svedenija_.htm
Функция устарела, рекомендуется использовать ksSetAttrType.
Синтаксис:
int SetAttrType (double attrID,
char *libname,
AttributeType * attrType,
char * password);
Входные параметры:

attrID " уникальный номер типа атрибута,
libName " имя библиотеки типов атрибутов, 

если libname = NULL, то обрабатывается локальный атрибут текущего документа.
attrType " Структура типа атрибута...,
password " пароль типа атрибута.

Возвращаемое значение:

уникальный номер типа атрибута " в случае удачного завершения,
0 " в случае неудачи.

SetAttrValue  Установить значение атрибута
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/502_Glava61_Obshchie_svedenija_.htm
Замечание. Функция устарела, вместо неё использовать ksSetAttrValue.
Аналог данной функции при использовании Automation " метод
ksAttributeObject::ksSetAttrValue.
Синтаксис:
int SetAttrValue (reference pAttr, 
unsigned int rowNumb, 
unsigned int columnNumb,
unsigned char *flagVisible, 
void *value, 
unsigned int size, char * password);
Входные параметры:

pAttr " указатель на атрибут,
rowNumb " номер строки,
columnNumb " номер колонки,
flagVisible " флаг видимости ячейки (одно значение, если не запись и массив 

значений, если запись),
value " указатель на область памяти, откуда копируется значение ячейки,
4775



size " размер выделенной памяти под value,
password " пароль атрибута.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
Тип данных, которые находятся в области памяти с указателем value, описывается струк"
турой параметров ColumnInfo для каждой колонки атрибута.

ViewEditAttr  Вывести диалог для просмотра или 
редактирования атрибута
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/DLG_ATR_LST_BODY_ATR.htm
Аналог данной функции при использовании Automation " метод
ksAttributeObject::ksViewEditAttr.
Синтаксис:
int ViewEditAttr (reference pAttr, unsigned int type, char * password);
Входные параметры:

pAttr " указатель на атрибут,
type " режим работы:

1 " режим просмотра,
2 " режим редактирования,

password " пароль типа атрибута.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
 Указатель на атрибут reference pAttr может быть получен следующими способами:

▼ с помощью функций итератора CreateAttrIterator, MoveAttrIterator,
▼ с помощью функций создания атрибутов ksCreateAttr или выбора атрибутов ChoiceAttr.

ViewEditAttrType  Вывести диалог для просмотра 
или редактирования типа атрибута
Пример...
4776



Справка системы КОМПАС...
KOMPAS.chm::/DLG_ATR_NEW_TYPE.htm
Аналог данной функции при использовании Automation " метод
ksAttributeObject::ksViewEditAttrType.
Синтаксис:
int ViewEditAttrType (char * libname, unsigned int type, double attrId, char * password);
Входные параметры:

libName " имя библиотеки типов атрибутов. 
Если libname = NULL, типы атрибутов берутся из текущего документа,

type " режим работы:
 " 1 " режим просмотра,
 2 " режим редактирования,

attrId " уникальный номер типа атрибута,
password " пароль типа атрибута.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
Уникальный номер типа атрибута attrID может быть получен с помощью поля typeid
структуры параметров типа атрибута LibraryAttrTypeParam или с помощью функции
GetAttrKeysInfo. Тип атрибута должен быть предварительно создан, например, с помо"
щью функции ksCreateAttrType.

Функции работы с событиями
Функции данного раздела обеспечивают обработку событий.

ksConnectionAdvise  Подписаться на событие
Синтаксис:
int ksConnectionAdvise (NotifyConnectionParam * param, LPUNKNOWN object);
Входные параметры:

param " указатель на структуру параметров подписки на события,
object " указатель интерфейса событий.

Возвращаемое значения:

1 " в случае успеха,
0 " в случае неудачи.

Примечание:
4777



Система выполнит AddRef на object и запомнит в текущей библиотеке или в текущей
notify"библиотеке.

ksConnectionUnAdvise  Снять подписку на событие
Синтаксис:
int ksConnectionUnadvise (NotifyConnectionParam * param);
Входные параметры:

param " указатель на структуру параметров подписки на события.

Возвращаемое значение:

1 " в случае успеха,
0 " в случае неудачи.

Примечание:
Для текущей библиотеки или текущей notify"библиотеки выполнит Release на соответст"
вующий указатель событий.

Интерфейсы событий
4778



Структуры параметров и константы
Структуры параметров и константы (список) 
A...B
C
D...FG...KLM...OPQ"RSTU...Z

Структуры параметров атрибутов
Attribute  Структура параметров табличного 
атрибута

unsigned int key1 рекомендуется как код разработчика
unsigned int key2 рекомендуется как код атрибута
unsigned int key3 рекомендуется как код разработчика
unsigned int key4 системный код атрибута
unsigned char *flagVisible массив, определяющий для каждой колонки атрибута 

видимость или невидимость:
(0 " видимое поле, 1" невидимое поле)

void *values массив значений ячеек таблицы атрибутов (сначала все 
значения для первой строки, затем все значения для 
второй строки и т.д.)

unsigned int valSize размер массива значений ячеек
char password [10] пароль, если не пустая строка " защищает от 

несанкционированного изменения информации в 
атрибуте

Примечания:

1.  Значения параметра key4 от 0 до 1000 зарезервированы за ОАО "АСКОН"
2.  Эта структура и использующая ее функция CreateAttr устарели. Рекомендуется вместо

них использовать структуру ksAttribute и функцию ksCreateAttr.

ksAttribute  Структура параметров атрибута
Справка системы КОМПАС...
Аналог данных параметров при использовании Automation " интерфейс ksAttributeParam.

unsigned int key1 ключ (дополнительный идентификатор) для 
поиска атрибута

unsigned int key2 ключ (дополнительный идентификатор) для 
поиска атрибута

unsigned int key3 ключ (дополнительный идентификатор) для 
поиска атрибута
4779



unsigned int key4 ключ (дополнительный идентификатор) для 
поиска атрибута

unsigned char *flagVisible массив, определяющий для каждой колонки 
атрибута видимость или невидимость (0 " видимое 
поле, 1" невидимое поле)

void *values массив значений ячеек таблицы атрибутов 
(сначала все значения для первой строки, затем 
все значения для второй строки и т.д.)

unsigned int valSize размер массива значений ячеек
char password[10] пароль, если не пустая строка " защищает от 

несанкционированного изменения информации в 
атрибуте

unsigned char *columnKeys массив ключей колонок
Примечание:

1.  При создании атрибута, например, с помощью функции ksCreateAttr, ключам key1 " key4
могут быть присвоены нулевые значения. Если заданы ненулевые значения ключей или
одного из ключей, эти значения могут быть использованы в дальнейшем как дополни"
тельные идентификаторы для поиска атрибута с помощью итератора по атрибутам
CreateAttrIterator. При присвоении значений ключам рекомендуется для ключей key1,
key3 присваивать код, идентифицирующий разработчика, для ключа key2 " код атрибута,
для ключа key4 " системный код. Значения параметра key4 от 0 до 1000 зарезервированы
за ОАО"АСКОН".

2.  Значения ключей атрибута могут быть получены с помощью функции GetAttrKeysInfo.
3.  Перед использованием каждого из указателей: flagVisible, values, columnKeys должен

быть выделен буфер памяти, и его адрес присвоен соответствующей переменной из ука"
занных.

4.  При задании значений параметров flagVisible и columnKeys необходимо учитывать типы
данных элементов атрибута. Колонка атрибута может содержать данные типа Запись.
Запись может, в свою очередь, состоять из нескольких колонок. Массивы флагов и клю"
чей должны содержать количество элементов, равное суммарному количеству колонок,
включая колонки, содержащие данные типа Запись.
Например, если атрибут состоит из пяти колонок, то массив будет состоять из пяти эле"
ментов. Если в одной из колонок данные имеют тип Запись, которая содержит 2 колонки,
то массив будет состоять из семи элементов. Флаг видимости колонки типа Запись по"
зволяет управлять отображением всей колонки. Если колонка отображается (значение
для нее равно 1), то флаги для каждой из колонок записи позволяют управлять ее ото"
бражением. Если колонка атрибута не отображается (значение для нее равно 0), то вне
зависимости от значений флагов для колонок записи, колонка не будет отображаться.

5.  При использовании Unicode следует использовать структуру параметров ksAttributeW.

ksAttributeW  Структура параметров атрибута 
(Unicode)
Справка системы КОМПАС...
Аналог данных параметров при использовании Automation " интерфейс ksAttributeParam.
4780



unsigned int key1 ключ (дополнительный идентификатор) для 
поиска атрибута

unsigned int key2 ключ (дополнительный идентификатор) для 
поиска атрибута

unsigned int key3 ключ (дополнительный идентификатор) для 
поиска атрибута

unsigned int key4 ключ (дополнительный идентификатор) для 
поиска атрибута

unsigned char *flagVisible массив, определяющий для каждой колонки 
атрибута видимость или невидимость (0 " видимое 
поле, 1" невидимое поле)

void *values массив значений ячеек таблицы атрибутов 
(сначала все значения для первой строки, затем 
все значения для второй строки и т.д.)

unsigned int valSize размер массива значений ячеек
wchar_t password[10] пароль, если не пустая строка " защищает от 

несанкционированного изменения информации в 
атрибуте

unsigned char *columnKeys массив ключей колонок

Примечание:

1.  При создании атрибута, например, с помощью функции ksCreateAttr, ключам key1 " key4
могут быть присвоены нулевые значения. Если заданы ненулевые значения ключей или
одного из ключей, эти значения могут быть использованы в дальнейшем как дополни"
тельные идентификаторы для поиска атрибута с помощью итератора по атрибутам
CreateAttrIterator. При присвоении значений ключам рекомендуется для ключей key1,
key3 присваивать код, идентифицирующий разработчика, для ключа key2 " код атрибута,
для ключа key4 " системный код. Значения параметра key4 от 0 до 1000 зарезервированы
за OАО "АСКОН".

2.  Значения ключей атрибута могут быть получены с помощью функции GetAttrKeysInfo.
3.  Перед использованием каждого из указателей: flagVisible, values, columnKeys должен

быть выделен буфер памяти, и его адрес присвоен соответствующей переменной из ука"
занных.

4.  При задании значений параметров flagVisible и columnKeys необходимо учитывать типы
данных элементов атрибута. Колонка атрибута может содержать данные типа Запись.
Запись может, в свою очередь, состоять из нескольких колонок. Массивы флагов и клю"
чей должны содержать количество элементов, равное суммарному количеству колонок,
включая колонки, содержащие данные типа Запись.
Например, если атрибут состоит из пяти колонок, то массив будет состоять из пяти эле"
ментов. Если в одной из колонок данные имеют тип Запись, которая содержит 2 колонки,
то массив будет состоять из семи элементов. Флаг видимости колонки типа Запись по"
зволяет управлять отображением всей колонки. Если колонка отображается (значение
для нее равно 1), то флаги для каждой из колонок записи позволяют управлять ее ото"
бражением. Если колонка атрибута не отображается (значение для нее равно 0), то вне
зависимости от значений флагов для колонок записи, колонка не будет отображаться.

5.  При использовании ANSI следует использовать структуру параметров ksAttribute.
4781



AttributeType  Структура параметров типа 
табличного атрибута

char header [80] заголовoк"комментарий типа,
unsigned int rowsCount количество строк в таблице,
unsigned char flagVisible флаг видимости атрибута в таблице:

(0 " невидимый,
 1 " видимый),

char password[10] пароль, если не пустая строка " защищает 
от несанкционированного изменения типа,

reference columns массив неопределенной длины 
информации о столбцах.

Примечания:

1.  Эта структура и использующая ее функция CreateAttrType устарели. Рекомендуется вме"
сто них использовать структуру ksAttributeType и функцию ksCreateAttrType.

2.  Массив columns содержит структуры параметров столбцов ColumnInfo.

ksAttributeType  Структура параметров типа 
атрибута
Справка системы КОМПАС...
Аналог данных параметров при использовании Automation " интерфейс
ksAttributeTypeParam.

unsigned int key1 рекомендуется как код разработчика
unsigned int key2 рекомендуется как код атрибута
unsigned int key3 рекомендуется как код разработчика
unsigned int key4 системный код атрибута
char header[80] заголовoк"комментарий типа
unsigned int rowsCount количество строк в таблице
unsigned char flagVisible флаг видимости атрибута в таблице:

(0 " видимый,
 1 " невидимый)

char password[10] пароль, если не пустая строка " защищает 
от несанкционированного изменения типа

reference columns массив неопределенной длины 
информации о столбцах

Примечание:

1.  Параметры типа атрибута могут быть получены с помощью функции ksGetAttrType.
2.  При создании типа атрибута ключам key1 " key4 могут быть присвоены нулевые значе"

ния. Если заданы ненулевые значения ключей или одного из ключей, эти значения могут
быть использованы в дальнейшем как дополнительные идентификаторы для поиска
атрибута с помощью итератора по атрибутам CreateAttrIterator. При присвоении значений
4782



ключам рекомендуется для ключей key1, key3 присваивать код, идентифицирующий
разработчика, для ключа key2 " код атрибута, для ключа key4 " системный код. Значения
параметра key4 от 0 до 1000 зарезервированы за ОАО "АСКОН".

3.  Значения ключей атрибута могут быть получены с помощью функции GetAttrKeysInfo.
4.  Массив колонок columns содержит структуры параметров колонок ColumnInfo и может

быть создан с помощью функции CreateArray с параметром ATTR_COLUMN_ARR и
AddArrayItem.

5.  При использовании Unicode следует использовать структуру параметров
ksAttributeTypeW.

ksAttributeTypeW  Структура параметров типа 
атрибута (Unicode)
Аналог данных параметров при использовании Automation " интерфейс
ksAttributeTypeParam.

unsigned int key1 рекомендуется как код разработчика,
unsigned int key2 рекомендуется как код атрибута,
unsigned int key3 рекомендуется как код разработчика,
unsigned int key4 системный код атрибута,
wchar_t header[80] заголовoк"комментарий типа,
unsigned int rowsCount количество строк в таблице,
unsigned char flagVisible флаг видимости атрибута в таблице:

(0 " видимый,
 1 " невидимый),

wchar_t password[10] пароль, если не пустая строка " защищает от 
несанкционированного изменения типа,

reference columns массив неопределенной длины информации о 
столбцах.

Примечание:

1.  Параметры типа атрибута могут быть получены с помощью функции ksGetAttrType.
2.  При создании типа атрибута ключам key1 " key4 могут быть присвоены нулевые значе"

ния. Если заданы ненулевые значения ключей или одного из ключей, эти значения могут
быть использованы в дальнейшем как дополнительные идентификаторы для поиска
атрибута с помощью итератора по атрибутам CreateAttrIterator. При присвоении значений
ключам рекомендуется для ключей key1, key3 присваивать код, идентифицирующий
разработчика, для ключа key2 " код атрибута, для ключа key4 " системный код. Значения
параметра key4 от 0 до 1000 зарезервированы за ОАО "АСКОН".

3.  Значения ключей атрибута могут быть получены с помощью функции GetAttrKeysInfo.
4.  Массив колонок columns содержит структуры параметров колонок ColumnInfo и может

быть создан с помощью функции CreateArray с параметром ATTR_COLUMN_ARR и
AddArrayItem.

5.  При использовании ANSI следует использовать структуру параметров ksAttributeType.
4783



ColumnInfo  Структура параметров одного столбца 
табличного атрибута
Справка системы КОМПАС...
Аналог данных параметров при использовании Automation " интерфейс
ksColumnInfoParam.

char header [80] заголовoк"комментарий столбца,
unsigned char type тип данных в столбце табличного атрибута,
unsigned char key дополнительный признак ("ключ"), который 

позволит отличить разные переменные с 
одинаковым типом,

char def [TEXT_LENGTH] значение в столбце по умолчанию,
unsigned char flagEnum флаг, включающий режим, когда значение 

поля атрибута будет заполнятся из массива 
перечисленных значений (1 " включен, 0 " 
отключен),

reference fieldEnum массив неопределенной длины перечислений 
(строки),

reference columns динамический массив неопределенной длины 
информации о колонках записи.

Примечание:

1.  Если тип данных в столбце запись (RECORD), то массив columns, в свою очередь, содер"
жит структуры, определяющие поля этой записи. Напомним, что запись соответствует
табличному атрибуту (только запись, в отличие от табличного атрибута, не может содер"
жать вложенную запись).

2.  Параметры структуры могут быть получены с помощью функции GetAttrColumnInfo или
поля “columns” структуры параметров типа атрибута AttributeType.

3.  При использовании Unicode следует использовать структуру параметров ColumnInfoW.

ColumnInfoW  Структура параметров одного 
столбца табличного атрибута (Unicode)
Справка системы КОМПАС...
Аналог данных параметров при использовании Automation " интерфейс
ksColumnInfoParam.

wchar_t header [80] заголовoк"комментарий столбца,
unsigned char type тип данных в столбце табличного атрибута,
unsigned char key дополнительный признак ("ключ"), который 

позволит отличить разные переменные с 
одинаковым типом,

wchar_t def [TEXT_LENGTH] значение в столбце по умолчанию,
4784



unsigned char flagEnum флаг, включающий режим, когда значение поля 
атрибута будет заполнятся из массива 
перечисленных значений (1 " включен, 0 " 
отключен),

reference fieldEnum массив неопределенной длины перечислений 
(строки),

reference columns динамический массив неопределенной длины 
информации о колонках записи.

Примечание:

1.  Если тип данных в столбце запись (RECORD), то массив columns, в свою очередь, содер"
жит структуры, определяющие поля этой записи. Напомним, что запись соответствует
табличному атрибуту (только запись, в отличие от табличного атрибута, не может содер"
жать вложенную запись).

2.  Параметры структуры могут быть получены с помощью функции GetAttrColumnInfo или
поля “columns” структуры параметров типа атрибута AttributeType.

3.  При использовании ANSI следует использовать структуру параметров ColumnInfo.

LibraryAttrTypeParam  Структура параметров для 
типа атрибута в библиотеке типов атрибутов
Справка системы КОМПАС...

Аналог данных параметров при использовании Automation " интерфейс
ksLibraryAttrTypeParam.

char name [MAX_TEXT_LENGTH] имя типа атрибута,
double typeId номер типа атрибута в библиотеке/

Примечание:

1.  Параметры структуры могут быть получены с помощью метода
ksGetLibraryAttrTypesArray.

2.  Уникальный номер типа атрибута typeid может быть получен с помощью функции
GetAttrKeysInfo. Тип атрибута должен быть предварительно создан, например, с помо"
щью функции ksCreateAttrType.

3.  При использовании Unicode следует использовать структуру параметров
LibraryAttrTypeParamW.
4785



LibraryAttrTypeParamW  Структура параметров для 
типа атрибута в библиотеке типов атрибутов 
(Unicode)
Справка системы КОМПАС...

Аналог данных параметров при использовании Automation " интерфейс
ksLibraryAttrTypeParam.

wchar_t name [MAX_TEXT_LENGTH] имя типа атрибута,
double typeId номер типа атрибута в библиотеке/

Примечание:

1.  Параметры структуры могут быть получены с помощью метода
ksGetLibraryAttrTypesArray.

2.  Уникальный номер типа атрибута typeid может быть получен с помощью функции
GetAttrKeysInfo. Тип атрибута должен быть предварительно создан, например, с помо"
щью функции ksCreateAttrType.

3.  При использовании ANSI следует использовать структуру параметров
LibraryAttrTypeParam.

Структуры параметров размеров
ABreakDimParam  Структура параметров углового 
размера с обрывом
Справка системы КОМПАС...
CM_CUT_DIMA.htmАналог данных параметров при использовании Automation " интер"
фейс ksABreakDimParam.

DimText tPar параметры размерной надписи,
BreakDimDrawing dPar параметры изображения размера,
ADimSource sPar параметры привязки углового размера.

Структура параметров размерной надписи DimText...
Структура параметров изображения размера с обрывом BreakDimDrawing... 
Структура параметров привязки углового размера ADimSource... 

ADimParam  Структура параметров углового 
размера
Справка системы КОМПАС...
Аналог данных параметров при использовании Automation " интерфейс ksADimParam
4786



DimText tPar параметры размерной надписи,
DimDrawing dPar параметры изображения размера,
ADimSource sPar параметры привязки углового размера.

Структура параметров размерной надписи DimText...
Структура параметров изображения размера DimDrawing... 
Структура параметров привязки углового размера ADimSource... 

ADimSource  Структура параметров привязки 
углового размера
Справка системы КОМПАС...
Аналог данных параметров при использовании Automation " интерфейс
ksADimSourceParam.

double xc, yc координаты центра размерной дуги,
double rad радиус размерной дуги,
double ang1 начальный угол размерной дуги,
double ang2 конечный угол размерной дуги,
int dir направление:

(1 " размерная линия против часовой стрелки;
 "1 " по часовой стрелке),

double x1, y1 координаты точки выхода первой выносной линии,
double x2, y2 координаты точки выхода второй выносной линии.

Примечание:
Радиус размерной дуги " аннотационный параметр (он не зависит от масштаба).

BreakDimDrawing  Структура параметров отрисовки 
линейного или углового размера с обрывом
Справка системы КОМПАС...
CM_CUT_DIML.htmСправка системы КОМПАС...
CM_CUT_DIMA.htmАналог данных параметров при использовании Automation " интер"
фейс ksBreakDimDrawing.

unsigned char pl признак отрисовки выносной линии
(0 " отрисовка включена, 
1 " отрисовка выключена),

unsigned char pt Тип стрелки у первой выносной линии,
int textPos положение текста: 

0 " автоматическое размещение текста,
> 0 " значение расстояния от выносной линии 
до текста в направлении от первой точки ко 
второй),
4787



int shelfDir признак отрисовки полки 
(0 " нет полки,
"1 " полка направлена влево,
 1 " полка направлена вправо,
 2 " полка направлена вверх, 
 3 " полка направлена вниз).

double ang угол наклона "ножки" полки,
int length длина "ножки" полки.
Примечание:
Параметры textPos и length являются аннотационными (не зависят от масштаба, показы"
вают расстояние и длину "на бумаге").

DimDrawing  Структура параметров отрисовки 
линейного и углового размеров
Справка системы КОМПАС: линейный размер...
CM_DIML.htm

Угловой размер...
CM_DIMA.htmАналог данных параметров при использовании Automation " интерфейс
ksDimDrawingParam.

unsigned char pl1 признак отрисовки первой выносной линии:
(0 " включена, 
1 " выключена),

unsigned char pl2 признак отрисовки второй выносной линии:
(0 " включена,
 1 " выключена),

unsigned char pt1 тип стрелки у первой выносной линии,
unsigned char pt2 тип стрелки у второй выносной линии,
int textPos положение текста:

(0 " автоматическое размещение текста,
> 0 " на указанное расстояние в направлении от 
первой точки ко второй;
< 0 " на указанное расстояние в направлении от 
второй точки к первой;

unsigned char extBase параметр отрисовки текста: 
(0 " в центре,
1" textPos относительно 1 точки;
2 " textPos относительно 2 точки;
3 " общая размерная линия),

int shelfDir наличие выносной полки: 
(0 " нет выносной полки,
"1 " полка направлена влево 
 1 " полка направлена вправо,
 2 " полка направлена вверх,
 3 " полка направлена вниз),
4788



double ang угол наклона "ножки" выносной полки,
int length длина "ножки" выносной полки.
Типы отрисовки стрелок в размерах... 
Примечания:

1.  Значение параметра textPos задается в миллиметрах для линейных размеров и в граду"
сах для угловых. Этот параметр " аннотационный (не зависит от масштаба).

2.  Параметр length " аннотационный (не зависит от масштаба).

DimText  Структура параметров размерной надписи
Справка системы КОМПАС...
CM_DIM_TEXT_EDITOR.htm#label_paramАналог данных параметров при использо"
вании Automation " интерфейс ksDimTextParam.

unsigned short style стиль текста размера, 
(0 " стиль по умолчанию)

unsigned int sign номер условного значка перед номиналом 
(0 " нет значка, 
1 " диаметр, 
2 " квадрат,
3 " радиус,
> 3 " номер значка из шрифта Symbol type A
4 " М " метрическая резьба
210 " символ сферы,

unsigned int bitFlag 0 " ручное задание или набор битовых полей, 
задающих признаки размерной надписи,

reference pText динамический массив строк,
unsigned char stringFlag флаг используемого типа массива строк:

0 " динамический массив строк символов 
CHAR_STR_ARR или CHAR_STR_ARR_W,
1 " динамический массив строк текста 
TEXT_LINE_ARR

Признаки размерной надписи... 
Структура параметров TextLineParam... 
Примечание:

1.  Строки в pText должны лежать в последовательности с учетом включения битовых фла"
гов в bitFlag: текст перед номиналом, номинал, квалитет, верхнее отклонение, нижнее от"
клонение, единицы измерения, текст после размера, последующие строки. 

2.  Верхнее отклонение, нижнее отклонение принимаются, если флаг TOLERANCE не вклю"
чен, а DEVIATION включен (это признак ручной простановки отклонений).

3.  Для функции GetObjParam нужно определить флаг stringFlag. Если он равен нулю, вы"
дается динамический массив строк символов.
4789



4.  Динамический массив TEXT_LINE_ARR содержит структуру TextLineParam.

DimensionsOptions  Структура параметров для 
определения настроек размеров
Справка системы КОМПАС...
CM_CHANGELEADER.htm
Аналог данных параметров при использовании Automation " интерфейс
ksDimensionsOptions.

double proLineExtension выход выносных линий за 
размерную,

double textDistanceFromDimLine расстояние от размерной линии до 
текста,

double textDistanceFromProLine расстояние от выносных линий до 
текста,

double dimLineExtension выход размерной линии за текст,
double arrowLength длина стрелки размера,
unsigned short style стиль текста,
unsigned char decimalsCount количество знаков после запятой (от 

0 до 9),
int anglePrecisionLevel точность углового размера:

0 " градусы,
1" минуты,
2" секунды,

int hiddenToleranceNumber максимальный номер 
показываемого квалитета (от 1 до 
17)
"1 " показ квалитета не включен.

DimensionPartsParam  Структура параметров 
объектов, составляющих размер
Справка системы КОМПАС...
Аналог данных параметров при использовании Automation " интерфейс
ksDimensionPartsParam.

reference line1 первая выносная линия,
reference line2 вторая выносная линия,
reference dimLine размерная линия,
reference dimLine1 продолжение размерной линии,
reference leg "ножка",
reference shelf полка,
reference gr временная группа всех объектов размера, 

включая тексты,
4790



reference curveExt " продолжение базовой кривой (у радиального 
размера дуги),
" линия""указатель", проведенная от размерной 
надписи к дуге (у размера дуги).

Примечание:
