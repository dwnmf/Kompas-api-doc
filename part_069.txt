
Примечание:
Функция используется в режиме редактирования штампа, таблицы, допуска формы, в
режиме создания допуска формы.

ksCombineTwoTableItems  Объединить две ячейки 
таблицы, если они имеют общую границу
Интерфейс...
3731



Справка системы КОМПАС...
584_69_1_3_Obwedinenie_jacheek.htm
Аналог данного метода при использовании API экспортных функций "
ksCombineTwoTableItems.
Синтаксис Automation:
long ksCombineTwoTableItems (long index1, long index2);
Входные параметры:

index1 " номер первой ячейки,
index2 " номер второй ячейки.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Нумерация ячеек начинается с 1. 
Функция используется в режиме редактирования таблицы или допуска формы.

ksDivideTableItem  Разделить ячейку таблицы
Интерфейс...

Справка системы КОМПАС...
584_69_1_4_Razdelenie_jacheek.htm
Аналог данного метода при использовании API экспортных функций " ksDivideTableItem.
Синтаксис Automation:
long ksDivideTableItem (long index, 
BOOL vertical, 
long style);
Входные параметры:

index " номер ячейки,
vertical " направление разделения ячейки:

1 " вертикально, 
0 " горизонтально,

style " стиль линии получившейся границы:
0 " невидимая, 
1 " основная, 
2 " тонкая, 
7 " утолщенная.

Возвращаемое значение:
3732



1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Нумерация ячеек начинается с 1. 
Функция используется в режиме редактирования таблицы или допуска формы.

ksGetPointOnToleranceTable  Получить координаты 
точки на таблице допуска формы
Интерфейс...
Аналог данного метода при использовании API экспортных функций "
ksGetPointOnToleranceTable.
Синтаксис Automation:
long ksGetPointOnToleranceTable (long tolerance, 
short entry, 
LPDISPATCH point);
Входные параметры:

tolerance " указатель на допуск формы,
entry " положение базовой точки.

Выходной параметр:

point " указатель на интерфейс параметров математиче"
ской точки ksMathPointParam.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

ksGetTableBorderStyle  Получить стиль границы ячейки
Интерфейс...

Справка системы КОМПАС...
Аналог данного метода при использовании API экспортных функций "
ksGetTableBorderStyle.
Синтаксис Automation:
long ksGetTableBorderStyle (long index, 
short typeBorder);
3733



Входные параметры:

index " номер ячейки,
typeBorder " тип границы:

0 " левая, 
1 " правая, 
2 " верхняя, 
3 " нижняя.

Возвращаемое значение:

" стиль линии гра" " в случае успешного заверше"
ницы: ния,
0 " невидимая, 
1 " основная, 
2 " тонкая, 
7 " утолщенная.
"1 " в случае неудачи.

Примечание:
Нумерация ячеек начинается с 1. 
Функция используется в режиме редактирования таблицы или допуска формы.

ksGetTableColumnText  Получить текст ячейки
Интерфейс...
Аналог данного метода при использовании API экспортных функций "
ksGetTableColumnText.
Синтаксис Automation:
long ksGetTableColumnText (long* numb, LPDISPATCH param);
Выходные параметры:

numb " номер ячейки,
param " указатель на интерфейс ksTextParam.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Функция используется в режиме редактирования таблицы. 
Нумерация ячеек начинается с единицы.
3734



"

Если не определен номер ячейки с помощью функции ksColumnNumber, метод начинает
работу с первой ячейки. 
После выполнения метода происходит смещение на следующую ячейку.
Если param=0, все графы пройдены.

ksGetTableItemsCount  Получить количество ячеек в 
таблице (для виртуальной сетки)
Интерфейс...
Аналог данного метода при использовании API экспортных функций "
ksGetTableItemsCount.
Синтаксис Automation:
long ksGetTableItemsCount (short type);
Входной параметр:

type " признак, какое число требуется получить:
0 " общее число ячеек, 
1 " число ячеек в строке, 
2 " число ячеек в колонке.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Функция используется в режиме редактирования таблицы или допуска формы.

ksGetToleranceColumnText  Получить текст ячейки
Интерфейс...
Аналог данного метода при использовании API экспортных функций "
ksGetToleranceColumnText.
Синтаксис Automation:
long ksGetToleranceColumnText (long* numb, LPDISPATCH par);
Выходные параметры:

numb " номер ячейки,
par " указатель на интерфейс параметров строки тек

ста ksTextLineParam.

Возвращаемое значение:
3735



1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Функция используется в режиме редактирования допуска формы.
Нумерация ячеек начинается с единицы.
Если не определен номер ячейки с помощью функции ksDocument2D::ksColumnNumber
, метод начинает работу с первой ячейки.
После выполнения метода происходит смещение на следующую ячейку.
Если par=NULL, все графы пройдены.
После использования массив par">pTextItem желательно удалить.

ksOpenTable  Открыть таблицу для редактирования
Интерфейс...
Аналог данного метода при использовании API экспортных функций " ksOpenTable.
Синтаксис Automation:
long ksOpenTable (long table);
Входной параметр:

table " указатель на таблицу.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Чтобы закрыть редактирование таблицы, нужно вызвать функцию
ksDocument2D::ksEndObj.

ksOpenTolerance  Открыть допуск формы для 
редактирования
Интерфейс...
Аналог данного метода при использовании API экспортных функций " ksOpenTolerance.
Синтаксис Automation:
long ksOpenTolerance (long tolerance);
Входной параметр:

tolerance " указатель на допуск формы.
3736



Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Чтобы закрыть редактирование допуска формы, нужно вызвать функцию
ksDocument2D::ksEndObj.

ksRebuildTableVirtualGrid  Перестроить виртуальную 
сетку таблицы
Интерфейс...
Аналог данного метода при использовании API экспортных функций "
ksRebuildTableVirtualGrid.
Синтаксис Automation:
long ksRebuildTableVirtualGrid();
Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1. Функция используется в режиме редактирования таблицы или допуска формы.
2. Таблица работает с виртуальной сеткой " регулярной таблицей, наложенной на редакти"

руемую таблицу и отображающей все ячейки. Если редактируемая таблица регулярная,
то ее виртуальная сетка полностью совпадает с таблицей.

3. Нумерация ячеек начинается с левого верхнего угла и с единицы по строкам.
4. Перестраивать сетку нужно после объединения или разделения ячеек.

ksSetTableBorderStyle  Изменить стиль границы ячейки
Интерфейс...

Справка системы КОМПАС...
Аналог данного метода при использовании API экспортных функций "
ksSetTableBorderStyle.
Синтаксис Automation:
long ksSetTableBorderStyle (long index, 
short typeBorder, 
long style);
Входные параметры:
3737



"

index " номер ячейки,
typeBorder " тип границы:

0 " левая, 
1 " правая, 
2 " верхняя, 
3 " нижняя,

style " стиль линии границы:
0 " невидимая, 
1 " основная, 
2 " тонкая, 
7 " утолщенная.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Нумерация ячеек начинается с 1.
Функция используется в режиме редактирования таблицы или допуска формы.

ksSetToleranceColumnText  Установить текст ячейки 
допуска формы
Интерфейс...
Аналог данного метода при использовании API экспортных функций "
ksSetToleranceColumnText.
Синтаксис Automation:
long ksSetToleranceColumnText (long numb, LPDISPATCH par);
Входные параметры:
 

Numb " номер ячейки,
Par " указатель на интерфейс параметров строки тек

ста ksTextLineParam.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Функция используется в режиме редактирования допуска формы.
3738



Размеры и технологические обозначения

ksAngBreakDimension  проставить угловой размер с 
обрывом
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций "
AngBreakDimension.
Синтаксис Automation:
long ksAngBreakDimension (LPDISPATCH angPar);
Входной параметр:

angPar " указатель на интерфейс углового размера с об"
рывом ksABreakDimParam.

Возвращаемое значение:

указатель на угловой размер с " в случае удачного завершения,
обрывом
0 " в случае неудачи.

ksAngDimension  Проставить угловой размер
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций " AngDimension.
Синтаксис Automation:
long ksAngDimension (LPDISPATCH angPar);
Входной параметр:

angPar " указатель на интерфейс углового размера
ksADimParam.

Возвращаемое значение:

указатель на угловой размер " в случае удачного завершения,
0 " в случае неудачи.
3739



ksAxisLine  Создать объект "Осевая линия"
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций " ksAxisLine.
Синтаксис Automation:
long ksAxisLine (LPDISPATCH param);
Входные параметры:

param " указатель на интерфейс ksAxisLineParam
параметров осевой линии.

Возвращаемое значение:

указатель на объект "Осевая линия" " в случае успешного завершения,
0 " в случае неудачи.

ksBase  Проставить обозначения базы
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций " Base.
Синтаксис Automation:
long ksBase (LPDISPATCH par);
Входной параметр:

par " указатель на интерфейс обозначения базы ksBaseParam.

Возвращаемое значение:

указатель на обозначение базы " в случае удачного завершения,
0 " в случае неудачи.

ksBrandLeader  Создать линиювыноску для 
обозначения клеймения
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций " BrandLeader.
Синтаксис Automation:
long ksBrandLeader (LPDISPATCH brandLeaderParam);
3740



Входной параметр:

brandLeaderParam " указатель на интерфейс параметров линии"
выноски для обозначения клеймения 
ksBrandLeaderParam.

Возвращаемое значение:

указатель на линию"выноску для обозначения " в случае удачного завершения,
клеймения
0 " в случае неудачи.

ksCentreMarker  Создать обозначение центра
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций " ksCentreMarker.
Синтаксис Automation:
long ksCentreMarker (LPDISPATCH param);
Входной параметр:

param " указатель на интерфейс обозначения центра
ksCentreParam.

Возвращаемое значение:

указатель на обозначение центра " в случае удачного завершения,
0 " в случае неудачи.

ksCutLine  Создать линию разреза/сечения
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций " CutLine.
Синтаксис Automation:
long ksCutLine (LPDISPATCH par);
Входной параметр:

par " указатель на интерфейс линии разреза/сечения ksCutLineParam.

Возвращаемое значение:
3741



указатель на линию разреза/сечения " в случае удачного завершения,
0 " в случае неудачи.

ksDiamDimension  Проставить диаметральный размер
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций " DiamDimension.
Синтаксис Automation:
long ksDiamDimension (LPDISPATCH linPar);
Входной параметр:

linPar " указатель на интерфейс диаметрального размера ksRDimParam.

Возвращаемое значение:

указатель на диаметральный размер " в случае удачного завершения,
0 " в случае неудачи.

ksLeader  Создать линиювыноску
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций " Leader.
Синтаксис Automation:
long ksLeader (LPDISPATCH leaderPar);
Входной параметр:

leaderPar " указатель на интерфейс параметров линии"выноски 
ksLeaderParam.

Возвращаемое значение:

указатель на линию"выноску " в случае удачного завершения,
0 " в случае неудачи.
3742



ksLinBreakDimension  Проставить линейный размер с 
обрывом
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций "
LinBreakDimension.
Синтаксис Automation:
long ksLinBreakDimension (LPDISPATCH linPar);
Входной параметр:

linPar " указатель на интерфейс линейного размера с обрывом 
ksLBreakDimParam.

Возвращаемое значение:

указатель на линейный размер с обрывом " в случае удачного завершения,
0 " в случае неудачи.

ksLinDimension  Проставить линейный размер
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций " LinDimension.
Синтаксис Automation:
long ksLinDimension (LPDISPATCH linPar);
Входной параметр:

linPar " указатель на интерфейс линейного размера ksLDimParam.

Возвращаемое значение:

указатель на линейный размер " в случае удачного завершения,
0 " в случае неудачи.

ksMarkerLeader  Создать линиювыноску для 
обозначения маркировки
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций " MarkerLeader.
3743



Синтаксис Automation:
long ksMarkerLeader (LPDISPATCH markerLeaderParam);
Входной параметр:

markerLeaderParam " указатель на интерфейс параметров линии"
выноски для обозначения маркирования 
ksMarkerLeaderParam.

Возвращаемое значение:

указатель на линию"выноску для обозначения " в случае удачного завершения,
маркирования
0 " в случае неудачи.

ksOrdinatedDimension  Проставить размер высоты
Интерфейс...

Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций "
ksOrdinatedDimension.
Синтаксис Automation:
long ksOrdinatedDimension (IDispatch* ordPar);
Входной параметр:

ordPar " указатель на интерфейс параметров размера
высоты ksOrdinatedDimParam.

Возвращаемое значение:

указатель на размер высоты " в случае удачного завершения,
0 " в случае неудачи.

ksPositionLeader  Создать позиционную линиювыноску
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций " PositionLeader.
Синтаксис Automation:
long ksPositionLeader (LPDISPATCH posLeaderParam);
Входной параметр:
3744



posLeaderParam " указатель на интерфейс параметров позиционной 
линии"выноски ksPosLeaderParam.

Возвращаемое значение:

указатель на позиционную линию"выноску " в случае удачного завершения,
0 " в случае неудачи.

ksRadBreakDimension  Проставить радиальный размер с 
изломом
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций "
RadBreakDimension.
Синтаксис Automation:
long ksRadBreakDimension (LPDISPATCH par);
Входной параметр:

par " указатель на интерфейс радиального размера с изломом ksRBreakDimParam.

Возвращаемое значение:

указатель на радиальный размер с изломом " в случае удачного завершения,
0 " в случае неудачи.

ksRadDimension  Проставить радиальный размер
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций " RadDimension.
Синтаксис Automation:
long ksRadDimension (LPDISPATCH par);
Входной параметр:

par " указатель на интерфейс радиального размера ksRDimParam.

Возвращаемое значение:

указатель на радиальный размер " в случае удачного завершения,
0 " в случае неудачи.
3745



ksRough  Проставить обозначение шероховатости
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций " Rough.
Синтаксис Automation:
long ksRough (LPDISPATCH roughPar);
Входной параметр:

roughPar " указатель на интерфейс обозначения шероховатости 
ksRoughParam.

Возвращаемое значение:

указатель на обозначение шероховатости " в случае удачного завершения,
0 " в случае неудачи.

ksTolerance  Проставить допуск формы
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций " Tolerance.
Синтаксис Automation:
long ksTolerance (LPDISPATCH par);
Входной параметр:

par " указатель на интерфейс допуска формы
ksToleranceParam.

Возвращаемое значение:

указатель на допуск формы " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
Операторы ksDocument2D::ksColumnNumber и ksDocument2D::ksTextLine, вводимые
между операторами ksDocument2D::ksTolerance и ksDocument2D::ksEndObj, принадле"
жат допуску формы.
ksColumnNumber определяет номер ячейки, куда помещать текст. Вначале считается, что
допуск формы имеет таблицу из 10 колонок и 10 строк. Каждая ячейка таблицы имеет
свой номер. Нумерация идет слева направо и сверху вниз.
3746



По завершении создания объекта таблица форматируется, и лишние ячейки удаляются.
ksEndObj возвращает указатель на допуск формы.

ksViewPointer  Создать стрелку направления взгляда
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций " ViewPointer.
Синтаксис Automation:
long ksViewPointer (LPDISPATCH par);
Входной параметр:

par " указатель на интерфейс стрелки направления
взгляда ksViewPointerParam.

Возвращаемое значение:

указатель на стрелку взгляда " в случае удачного завершения,
0 " в случае неудачи.

Матрицы преобразования

ksDeleteMtr  Удалить матрицу трансформации
Интерфейс...
Аналог данного метода при использовании API экспортных функций " DeleteMtr.
Синтаксис Automation:
long ksDeleteMtr();
Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Метод отменяет режим преобразования координат, линейных и угловых параметров,
введенный методом ksDocument2D::ksMtr.

ksMtr  Создать матрицу преобразования координат
Интерфейс...
Аналог данного метода при использовании API экспортных функций " ksMtr.
Синтаксис Automation:
long ksMtr (double x, 
3747



double y, 
double Angle, 
double scaleX, 
double scaleY);
Входные параметры:

x, y " координаты начала локальной системы коорди"
нат,

angle " угол наклона системы координат в градусах,
scaleX " масштаб локальной системы координат по оси Х,
scaleY " масштаб локальной системы координат по оси Y.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Допускается вложение матриц трансформации. В результате вложения действует сум"
марная матрица, полученная произведением накопленных матриц. Объекты вида, вводи"
мые между методами ksDocument2D::ksMtr и ksDocument2D::ksDeleteMtr, подвергаются
преобразованию по суммарной матрице.

Графические примитивы

ksArcByAngle  Создать дугу по двум точкам и углу 
раствора
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций " ArcByAngle.
Синтаксис Automation:
long ksArcByAngle (double xc, 
double yc, 
double rad, 
double f1, 
double f2, 
short direction, 
long style);
Входные параметры:
3748



xc, yc " координаты центра дуги,
rad " радиус дуги,
f1, f2 " начальный и конечный угол дуги в градусах,
direction " направление отрисовки дуги: 

1 " против часовой стрелки, 
"1 " по часовой стрелке,

style " стиль линии.

Системные стили линий...
Возвращаемое значение:

указатель на дугу " в случае удачного завершения,
0 " в случае неудачи.

ksArcByPoint  Создать дугу по центру и конечным 
точкам
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций " ArcByPoint.
Синтаксис Automation:
long ksArcByPoint (double xc, 
double yc, 
double rad, 
double x1, 
double y1, 
double x2,
double y2, 
short direction, 
long style);
Входные параметры:

xc, yc " координаты центра дуги,
rad " радиус дуги,
x1, y1 " координаты начальной точки дуги,
x2, y2 " координаты конечной точки дуги,
direction " направление отрисовки дуги: 

1 " против часовой стрелки, 
"1 " по часовой стрелке,

style " стиль линии.

Системные стили линий...
Возвращаемое значение:
3749



указатель на дугу " в случае удачного завершения,
0 " в случае неудачи.

ksArcBy3Points  Создать дугу по трем точкам
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций " ArcBy3Points.
Синтаксис Automation:
long ksArcBy3Points (double x1, 
double y1, 
double x2, 
double y2, 
double x3, 
double y3, 
long style);
Входные параметры:

x1, y1 " координаты начальной точки на дуге,
x2, y2 " координаты средней точки на дуге,
x3, y3 " координаты конечной точки на дуге,
style " стиль линии.

Системные стили линий...
Возвращаемое значение:

указатель на дугу " в случае удачного завершения,
0 " в случае неудачи.

ksCircle  Создать окружность
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций " Circle.
Синтаксис Automation:
long ksCircle (double xc, 
double yc, 
double rad, 
long style);
Входные параметры:
3750



xc, yc " координаты центра окружности,
rad " радиус окружности,
style " стиль линии.

Системные стили линий...
Возвращаемое значение:

указатель на окружность " в случае удачного завершения,
0 " в случае неудачи.

ksColouring  Создать фоновую заливку цветом
Интерфейс...

Справка системы КОМПАС...
Аналог данного метода при использовании API экспортных функций " ksColouring.
Синтаксис Automation:
long ksColouring (long color);
Входной параметр:

color " цвет заливки.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Заливка " составной объект. Объекты вида, вводимые между методами
ksDocument2D::ksColouring и ksDocument2D::ksEndObj, принадлежат заливке и образуют
ее границу.
ksDocument2D::ksEndObj возвращает указатель на заливку.

ksConicArc  Построить коническое сечение
Интерфейс...
Аналог данного метода при использовании API экспортных функций " ksConicArc.
Синтаксис Automation:
long ksConicArc (LPDISPATCH param);
Входной параметр:

param " указатель на интерфейс конического сечения 
ksConicArcParam.

Возвращаемое значение:
3751



указатель на коническое сечение " в случае удачного завершения,
0 " в случае неудачи.
Примечание:
Коническим сечением может быть дуга окружности, дуга эллипса или кривая NURBS.

ksEllipse  Создать эллипс
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций " ksEllipse.
Синтаксис Automation:
long ksEllipse (LPDISPATCH param);
Входной параметр:

param " указатель на интерфейс ksEllipseParam.

Возвращаемое значение:

указатель на эллипс " в случае удачного завершения,
0 " в случае неудачи.

ksEllipseArc  Создать дугу эллипса
Интерфейс...
Аналог данного метода при использовании API экспортных функций " ksEllipseArc.
Синтаксис Automation:
long ksEllipseArc (LPDISPATCH param);
Входной параметр:

param " указатель на интерфейс ksEllipseArcParam.

Возвращаемое значение:

указатель на дугу эллипса " в случае удачного завершения,
0 " в случае неудачи.

ksEquidistant  Построить эквидистанту
Интерфейс..
3752



Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций " Equidistant.
Синтаксис Automation:
long ksEquidistant (LPDISPATCH param);
Входной параметр:

param " указатель на интерфейс ksEquidistantParam.

Возвращаемое значение:

указатель на эквидистанту " в случае удачного завершения,
0 " в случае неудачи.

ksHatch  Создать штриховку
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций " HatchEx.
Синтаксис Automation:
long ksHatch (long style, 
double Angle, 
double step, 
double width, 
double x0, 
double y0);
Входные параметры:

style " стиль штриховки,
angle " угол штриховки в градусах,
step " шаг штриховки,
width " ширина полосы штрихования вдоль границы штриховки,
x0, y0 " координаты начальной точки штриховки.

Системные стили штриховок...
Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Все следующие далее до вызова метода ksDocument2D::ksEndObj геометрические при"
митивы определяют границы штриховки (внешние и внутренние). Порядок определения
3753



элементов границы является произвольным. Метод ksDocument2D::ksEndObj возвраща"
ет указатель на штриховку.

ksInsertRaster  Вставить растровый объект
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций " ksInsertRaster.
Синтаксис Automation:
long ksInsertRaster (LPDISPATCH param);
Входной параметр:

param " указатель на интерфейс растрового объекта 
ksRasterParam.

Возвращаемое значение:

указатель на растровый объект " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
Создается новый объект "Выносной элемент" в текущем виде и в текущем документе.

ksLine  Создать прямую
Интерфейс...

Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций " Line.
Синтаксис Automation:
long ksLine (double x, 
double y, 
double Angle);
Входные параметры:

x, y " координаты точки на прямой,
Angle " угол наклона прямой относительно оси OX 

(в градусах).

Возвращаемое значение:

указатель на прямую " в случае удачного завершения,
3754



0 " в случае неудачи.

ksLineSeg  Создать отрезок
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций " LineSeg.
Синтаксис Automation:
long ksLineSeg (double x1, 
double y1, 
double x2, 
double y2, 
long style);
Входные параметры:

x1, y1 " координаты первой точки отрезка,
x2, y2 " координаты второй точки отрезка,
style " стиль линии.

Системные стили линий...Возвращаемое значение:

указатель на отрезок " в случае удачного завершения,
0 " в случае неудачи.

ksParEllipseArc  Создать дугу эллипса
Интерфейс...
Аналог данного метода при использовании API экспортных функций " ksParEllipseArc.
Синтаксис Automation:
long ksParEllipseArc (LPDISPATCH param);
Входной параметр:

param " указатель на интерфейс ksEllipseArcParam1.

Возвращаемое значение:

указатель на дугу эллипса " в случае удачного завершения,
0 " в случае неудачи.
3755



ksPoint  Создать точку
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций " Point.
Синтаксис Automation:
long ksPoint (double x, 
double y, 
long style);
Входные параметры:

x, y " координаты точки,
style " стиль отрисовки точки.

Системные стили отрисовки точек...
Возвращаемое значение:

указатель на точку " в случае удачного завершения,
0 " в случае неудачи.

ksPointArraw  Создать значок
Интерфейс...

Cправка системы КОМПАС: стрелка линии"выноски...

Cправка системы КОМПАС:тип значка...

Аналог данного метода при использовании API экспортных функций " PointArraw.
Синтаксис Automation:
long ksPointArraw (double x,
double y,
double ang,
short term);
Входные параметры:

x, y " координаты точки привязки значка,
ang " угол отрисовки значка,
term " тип значка.

Системные типы значков...
Возвращаемое значение:
3756



указатель на значок " в случае удачного завершения,
0 " в случае неудачи.

ksRectangle  Создать прямоугольник
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций " ksRectangle.
Синтаксис Automation:
long ksRectangle (LPDISPATCH param, 
short centre);
Входные параметры:

param " указатель на интерфейс параметров прямоугольника 
ksRectangleParam,

centre " признак построения обозначения центра: 
0 " нет осей, 
1 " значок осей (маленький "крестик"), 
2 " горизонтальная ось, 
3 " обе оси.

Возвращаемое значение:

указатель на прямоугольник " в случае удачного завершения,
0 " в случае неудачи.

ksRegularPolygon  Cоздать правильный многоугольник
Интерфейс...Справка системы КОМПАС...

Аналог данного метода при использовании API экспортных функций " ksRegularPolygon.
Синтаксис Automation:
long ksRegularPolygon (LPDISPATCH param, 
short centre);
Входные параметры:

param " указатель на интерфейс параметров многоугольника 
ksRegularPolygonParam,
3757



centre " признак построения обозначения центра: 
0 " нет осей, 
1 " значок осей (маленький "крестик"), 
2 " горизонтальная ось, 
3 " обе оси.

Возвращаемое значение:

указатель на правильный многоугольник " в случае удачного завершения,
0 " в случае неудачи.
3758



Интерфейсы фантомов 
Интерфейс фантома ksPhantom
Интерфейс фантома.
Аналог данных параметров при использовании API экспортных функций " Phantom.
Примечание:
Указатель на интерфейс можно получить при помощи метода
KompasObject::GetParamStruct.
Смотрите также:KompasObject 

ksPhantom  свойства

phantom  Тип фантома
Интерфейс...
Тип данных:short.
Синтаксис Automation:

phantom = iPhantom.phantom Получить свойство(* )
iPhantom.phantom = phantom Установить свойство (* )
phantom = iPhantom.GetPhantom() Получить свойство (**)
iPhantom.SetPhantom(phantom) Установить свойство (**)

Типы фантомов...

ksPhantom  методы

GetPhantomParam  Получить указатель на интерфейс 
параметров фантома
Интерфейс...
Синтаксис Automation:
LPDISPATCH GetPhantomParam();
Возвращаемое значение:

" указатель на интерфейс параметров фантома
ksType1, ksType2, ksType3, ksType5, ksType6.

Примечание
Метод возвращает указатель на интерфейс параметров фантома указанного типа (смо"
трите свойство phantom).
Типы фантомов...
3759



Init  Инициализировать параметры
Интерфейс...
BOOL Init();
Возвращаемое значение:

TRUE " в случае удачного завершения.

Примечание:
Метод обнуляет все параметры фантома.

Фантом для сдвига группы (Интерфейс ksType1) 
Интерфейс параметров фантома для сдвига группы.
Аналог данных параметров при использовании API экспортных функций " Type1.
Примечание:
Указатель на интерфейс можно получить при помощи метода
ksPhantom::GetPhantomParam.
Смотрите также: ksPhantom

ksType1 свойства

angle  Угол поворота группы
Интерфейс...
Тип данных:double.
Синтаксис Automation:

angle = iType1.angle Получить свойство(* )
iType1.angle = angle Установить свойство (* )
angle = iType1.GetAngle() Получить свойство (**)
iType1.SetAngle (angle) Установить свойство (**)

gr  Указатель на группу
Интерфейс...
Тип данных:long.
Синтаксис Automation:

gr = iType1.gr Получить свойство(* )
iType1.gr = gr Установить свойство (* )
gr = iType1.GetGr() Получить свойство (**)
iType1.SetGr (gr) Установить свойство (**)
3760



scale_  Масштаб
Интерфейс...
Тип данных:double.
Синтаксис Automation:

scale_ = iType1.scale_ Получить свойство(* )
iType1.scale_ = scale_ Установить свойство (* )
scale_ = iType1.GetScale_() Получить свойство (**)
iType1.SetScale_(scale) Установить свойство (**)

xBase, yBase  Координаты базовой точки группы
Интерфейс...Тип данных:double.
Синтаксис Automation:

xBase = iType1.xBase Получить свойство(* )
iType1.xBase = xBase Установить свойство (* )
xBase = iType1.GetXBase() Получить свойство (**)
iType1.SetXBase (xBase) Установить свойство (**)

ksType1  методы

Init  Инициализировать параметры
Интерфейс...
BOOL Init();
Возвращаемое значение:

TRUE " в случае удачного завершения.

Примечание:
Метод обнуляет все параметры фантома.

Фантом  отрезок, фантом  окружность (Интерфейс 
ksType2)
Интерфейс параметров фантомаотрезка или фантомаокружности.
Аналог данных параметров при использовании API экспортных функций " Type2.
Примечание:
Указатель на интерфейс можно получить при помощи метода
ksPhantom::GetPhantomParam.
Смотрите также: ksPhantom
3761



ksType2 свойства

xBase, yBase  Координаты базовой точки
Интерфейс...Тип данных:double.
Синтаксис Automation:

xBase = iType2.xBase Получить свойство(* )
iType2.xBase = xBase Установить свойство (* )
xBase = iType2.GetXBase() Получить свойство (**)
iType2.SetXBase (xBase) Установить свойство (**)

 ksType2  методы

Init  Инициализировать параметры
Интерфейс...
Синтаксис Automation:
BOOL Init();
Возвращаемое значение:

TRUE " в случае удачного завершения.

Примечание:
Метод обнуляет все параметры фантома.

Фантом прямоугольник, фантом отрезок под углом 
(Интерфейс ksType3)
Интерфейс параметров фантомапрямоугольника или фантомаотрезка c за
данным углом.
Аналог данных параметров при использовании API экспортных функций " Type3.
Примечание:
Указатель на интерфейс можно получить при помощи метода
ksPhantom::GetPhantomParam.
Смотрите также: ksPhantom

ksType3  свойства

angle  Угол поворота
Интерфейс...
Тип данных:double.
Синтаксис Automation:
3762



angle = iType3.angle Получить свойство(* )
iType3.angle = angle Установить свойство (* )
angle = iType3.GetAngle() Получить свойство (**)
iType3.SetAngle (angle) Установить свойство (**)

xBase, yBase  Координаты базовой точки
Интерфейс...Тип данных:double.
Синтаксис Automation:

xBase = iType3.xBase Получить свойство(* )
iType3.xBase = xBase Установить свойство (* )
xBase = iType3.GetXBase() Получить свойство (**)
iType3.SetXBase (xBase) Установить свойство (**)

ksType3  методы

Init  Инициализировать параметры
Интерфейс...
BOOL Init();
Возвращаемое значение:

TRUE " в случае удачного завершения.

Примечание:
Метод обнуляет все параметры фантома.

Фантом  половина прямоугольника (Интерфейс 
ksType5)
Интерфейс параметров фантомаполовины прямоугольника c заданным
углом.
Аналог данных параметров при использовании API экспортных функций " Type5.
Примечание:
Указатель на интерфейс можно получить при помощи метода
ksPhantom::GetPhantomParam.
Смотрите также ksPhantom
3763



ksType5  свойства

angle  Угол поворота
Интерфейс..
Тип данных:double.
Синтаксис Automation:

angle = iType5.angle Получить свойство(* )
iType5.angle = angle Установить свойство (* )
angle = iType5.GetAngle() Получить свойство (**)
iType5.SetAngle (angle) Установить свойство (**)

horizon  Признак направления подхода к курсору
Интерфейс..
Тип данных:BOOL.
Значения свойства:

TRUE " подходим к курсору по горизонтали,
FALSE " подходим к курсору по вертикали.

Синтаксис Automation:

horizon = iType5.horizon Получить свойство(* )
iType5.horizon = horizon Установить свойство (* )
horizon = iType5.GetHorizon() Получить свойство (**)
iType5.SetHorizon (horizon) Установить свойство (**)

xBase, yBase  Координаты базовой точки
Интерфейс...Тип данных:double.
Синтаксис Automation:

xBase = iType5.xBase Получить свойство(* )
iType5.xBase = xBase Установить свойство (* )
xBase = iType5.GetXBase() Получить свойство (**)
iType5.SetXBase (xBase) Установить свойство (**)

ksType5  методы

Init  Инициализировать параметры
Интерфейс..
BOOL Init();
3764



Возвращаемое значение:

TRUE " в случае удачного завершения.

Примечание:
Метод обнуляет все параметры фантома.

Пользовательский фантом (Интерфейсы ksType6)
Интерфейс параметров пользовательского фантома.
Аналог данных параметров при использовании API экспортных функций " Type6.
Примечание:
Этот интерфейс, в отличие от ksType1, не устанавливает параметры поворота и масшта"
бирования группы. Сдвиг группы должен осуществлять сам пользователь.
Указатель на интерфейс можно получить при помощи метода
ksPhantom::GetPhantomParam.
Смотрите также: ksPhantom 

ksType6  свойства

gr  Указатель на временную группу объектов, которая 
отображается в виде фантома
Интерфейс..
Тип данных:long.
Синтаксис Automation:

gr = iType6.gr Получить свойство(* )
iType6.gr = gr Установить свойство (* )
gr = iType6.GetGr() Получить свойство (**)
iType6.SetGr (gr) Установить свойство (**)

ksType6  методы

Init  Инициализировать параметры
Интерфейс..
BOOL Init();
Возвращаемое значение:

TRUE " в случае удачного завершения.

Примечание:
Метод обнуляет все параметры фантома.
3765



Интерфейсы видов, слоев, запроса к системе
Вид(Интерфейс ksViewParam)
Справка системы КОМПАС...
KOMPAS.chm::/378_Glava44_Obshchie_svedenija_.htm
Интерфейс параметров вида.
Аналог данных параметров при использовании API экспортных функций " ViewParam.
Примечание:

1. Указатель на интерфейс должен быть получен с помощью метода
KompasObject::GetParamStruct с параметром ko_ViewParam.

2. Параметры могут быть получены с помощью метода ksDocument2D::ksGetObjParam с па"
раметром ALLPARAM.
Смотрите также: KompasObject

ksViewParam  свойства

angle  Угол поворота вида в системе координат листа 
чертежа
Интерфейс...
Тип данных:double.
Синтаксис Automation:

angle = iViewParam.angle Получить свойство(* )
iViewParam.angle = angle Установить свойство (* )
angle = iViewParam.GetAngle() Получить свойство (**)
iViewParam.SetAngle( angle ) Установить свойство (**)

color  Цвет вида в активном состоянии
Интерфейс...
Тип данных:long.
Синтаксис Automation:

color = iViewParam.color Получить свойство(* )
iViewParam.color = color Установить свойство (* )
color = iViewParam.GetColor() Получить свойство (**)
iViewParam.SetColor( color ) Установить свойство (**)

name  Имя вида
Интерфейс...
3766



Тип данных:строка.
Синтаксис Automation:

name = iViewParam.name Получить свойство(* )
iViewParam.name = name Установить свойство (* )
name = iViewParam.GetName() Получить свойство (**)
iViewParam.SetName( name ) Установить свойство (**)

scale_  Масштаб вида
Интерфейс...
Тип данных:double.
Синтаксис Automation:

scale_ = iViewParam.scale_ Получить свойство(* )
iViewParam.scale_ = scale_ Установить свойство (* )
scale_ = iViewParam.GetScale_() Получить свойство (**)
iViewParam.SetScale_(scale_) Установить свойство (**)

state  Состояние вида
Интерфейс...
Тип данных:short.
Синтаксис Automation:

state = iViewParam.state Получить свойство(* )
iViewParam.state = state Установить свойство (* )
state = iViewParam.GetState() Получить свойство (**)
iViewParam.SetState( state ) Установить свойство (**)

Состояния видов...

x, y  Координаты точки привязки вида
Интерфейс...Тип данных:double.
Синтаксис Automation:

x = iViewParam.x Получить свойство(* )
iViewParam.x = x Установить свойство (* )
x = iViewParam.GetX() Получить свойство (**)
iViewParam.SetX( x ) Установить свойство (**)
3767



ksViewParam  методы

Init  Инициализировать параметры
Интерфейс...
Синтаксис Automation:
BOOL Init();
Возвращаемое значение:

TRUE " в случае удачного завершения.

Примечание:
Метод обнуляет все параметры вида.

Слой (Интерфейс ksLayerParam)
Справка системы КОМПАС...
Интерфейс параметров слоя.
Аналог данных параметров при использовании API экспортных функций " LayerParam.
Примечание:
Указатель на интерфейс можно получить при помощи метода
KompasObject::GetParamStruct.
Смотрите также: KompasObject

ksLayerParam  свойства

color  Цвет слоя в активном состоянии
Интерфейс...
Тип данных:long.
Синтаксис Automation:

color = iLayerParam.color Получить свойство(* )
iLayerParam.color = color Установить свойство (* )
color = iLayerParam.GetColor() Получить свойство (**)
iLayerParam.SetColor( color ) Установить свойство (**)

name  Имя слоя
Интерфейс...
Тип данных:строка.
Синтаксис Automation:

name = iLayerParam.name Получить свойство(* )
3768



iLayerParam.name = name Установить свойство (* )
name = iLayerParam.GetName() Получить свойство (**)
iLayerParam.SetName( name ) Установить свойство (**)

state  Состояние слоя
Интерфейс...
Тип данных:short.
Синтаксис Automation:

state = iLayerParam.state Получить свойство(* )
iLayerParam.state = state Установить свойство (* )
state = iLayerParam.GetState() Получить свойство (**)
iLayerParam.SetState(state ) Установить свойство (**)

Состояния слоев...

ksLayerParam  методы

Init  Инициализировать параметры
Интерфейс...
Синтаксис Automation:
BOOL Init();
Возвращаемое значение:

TRUE " в случае удачного завершения.

Примечание:
Метод обнуляет все параметры слоя.

Запрос к системе (Интерфейс ksRequestInfo)
Интерфейс параметров запроса к системе.
Аналог данных параметров при использовании API экспортных функций " RequestInfo.
Примечания:

1. Данный интерфейс позволяет установить параметры процесcов:
ksDocument2D::ksCursor
ksDocument2D::ksPlacement
ksDocument2D::ksCommandWindow.

2. Методами данного интерфейса можно получить/изменить:
▼ строку или идентификатор строки приглашения,
▼ строку или идентификатор строки заголовка окна,
3769



▼ строку меню или идентификатор меню состава команд,
▼ строку с именем стандартного курсора или идентификатор курсора,
▼ признак динамического запроса,
▼ идентификатор приложения (dll), в котором размещены ресурсы процесса,
▼ функцию обратной связи процесса.
3. Указатель на интерфейс можно получить при помощи метода

KompasObject::GetParamStruct.
4. В случае динамического запроса функция обратной связи вызывается по перемещению

курсора. В случае статического запроса функция обратной связи вызывается по щелчку
мыши.
Смотрите также:KompasObject

RequestInfo  свойства

commInstance  Идентификатор приложения (dll), в котором 
размещены ресурсы процесса
Интерфейс...
Тип данных:long.
Синтаксис Automation:

commInstance = iRequestInfo.commInstance Получить свойство(* )
iRequestInfo.commInstance = commInstance Установить свойство (* )
commInstance = iRequestInfo.GetCommInstance() Получить свойство (**)
iRequestInfo.SetCommInstance (commInstance) Установить свойство (**)

Примечание:
Функция устарела. Использование данной функции может привести к ошибке в библио"
теке, собранной с конфигурацией x64.
Рекомендуется использовать функцию ksRequestInfo::commInstanceEx.

commInstanceEx  Идентификатор приложения (dll), в 
котором размещены ресурсы процесса
Интерфейс...
Тип данных: VARIANT.
Синтаксис Automation:

commInstance = Object.commInstanceEx Получить
свойство(* )

Object.commInstanceEx = commInstance Установить свойство (* )
commInstance = Object.GetCommInstanceEx() Получить свойство (**)
Object.SetCommInstanceEx( commInstance ) Установить свойство (**)
3770



Примечание:
 HINSTANCE библиотеки нужно передать через VARIANT, как VT_I4 в Win32 и VT_I8 в x64.
Для правильного формирования _variant_t HINSTANCE нужно передавать через приведе"
ние к (LONG_PTR).
В библиотеках, использующих автоматизацию, рекомендуется использовать данное
свойство вместо ksRequestInfo::commInstance.

commandsString  Cтрока меню состава команд
Интерфейс...
Тип данных:строка.
Синтаксис Automation:

commandsString = iRequestInfo.commandsString Получить свойство(* )
iRequestInfo.commandsString = commandsString Установить свойство (* )
commandsString = iRequestInfo.GetCommandsString() Получить свойство (**)
iRequestInfo.SetCommandsString (commandsString) Установить свойство (**)

Примечание:
Это свойство позволяет сформировать одноуровневое меню (без вложенных пунктов).
Восклицательный знак разделяет пункты меню, например, "!Квадрат !Треугольник
!Ромб".

cursor  Cтрока с именем стандартного курсора
Интерфейс...
Тип данных:строка.
Синтаксис Automation:

cursor = iRequestInfo.cursor Получить свойство(* )
iRequestInfo.cursor = cursor Установить свойство (* )
cursor = iRequestInfo.GetCursor() Получить свойство (**)
iRequestInfo.SetCursor (cursor) Установить свойство (**)

Примечание:
Кроме стандартных констант из WINUSER.H можно использовать стандартные курсоры
системы КОМПАС (ldefin2d.h):
OCR_SELECT

OCR_SNAP

OCR_DEFAULT
3771



OCR_CATCH

cursorId  Идентификатор курсора из ресурса
Интерфейс...
Тип данных:long.
Синтаксис Automation:

cursorId = iRequestInfo.cursorId Получить свойство(* )
iRequestInfo.cursorId = cursorId Установить свойство (* )
cursorId = iRequestInfo.GetCursorId() Получить свойство (**)
iRequestInfo.SetCursorId (cursorId) Установить свойство (**)

Примечание:
Кроме стандартных констант из WINUSER.H можно использовать стандартные курсоры
системы КОМПАС (ldefin2d.h):
OCR_SELECT

OCR_SNAP

OCR_DEFAULT

OCR_CATCH

dynamic  Признак динамического запроса
Интерфейс...
Тип данных:long.
Значения признака:

0 " статический запрос,
1 " динамический запрос.

Синтаксис Automation:

dynamic = iRequestInfo.dynamic Получить свойство(* )
iRequestInfo.dynamic = dynamic Установить свойство (* )
dynamic = iRequestInfo.GetDynamic() Получить свойство (**)
iRequestInfo.SetDynamic (dynamic) Установить свойство (**)

Примечание:
В случае динамического запроса функция обратной связи вызывается по перемещению
курсора. В случае статического запроса функция обратной связи вызывается по щелчку
мыши.
3772



menuId  Идентификатор меню состава команд из ресурса
Интерфейс...
Тип данных:long.
Синтаксис Automation:

menuId = iRequestInfo.menuId Получить свойство(* )
iRequestInfo.menuId = menuId Установить свойство (* )
menuId = iRequestInfo.GetMenuId() Получить свойство (**)
iRequestInfo.SetMenuId (menuId) Установить свойство (**)

prompt  Cтрока приглашения
Интерфейс...
Тип данных:строка.
Синтаксис Automation:

prompt = iRequestInfo.prompt Получить свойство(* )
iRequestInfo.prompt = prompt Установить свойство (* )
prompt = iRequestInfo.GetPrompt() Получить свойство (**)
iRequestInfo.SetPrompt (prompt) Установить свойство (**)

promptId  Идентификатор приглашения из ресурса
Интерфейс...
Тип данных:long.
Синтаксис Automation:

promptId = iRequestInfo.promptId Получить свойство(* )
iRequestInfo.promptId = promptId Установить свойство (* )
promptId = iRequestInfo.GetPromptId() Получить свойство (**)
iRequestInfo.SetPromptId (promptId) Установить свойство (**)

title  Cтрока заголовка окна
Интерфейс...
Тип данных:строка.
Синтаксис Automation:

title = iRequestInfo.title Получить свойство(* )
iRequestInfo.title = title Установить свойство (* )
title = iRequestInfo.GetTitle() Получить свойство (**)
iRequestInfo.SetTitle (title) Установить свойство (**)
3773



titleId  Идентификатор строки заголовка окна из ресурса
Интерфейс...
Тип данных:long.
Синтаксис Automation:

titleId = iRequestInfo.titleId Получить свойство(* )
iRequestInfo.titleId = titleId Установить свойство (* )
titleId = iRequestInfo.GetTitleId() Получить свойство (**)
iRequestInfo.SetTitleId (titleId) Установить свойство (**)

TakeProcessObject  Объект, редактируемый в подпроцессе
Интерфейс...
Тип данных: Указатель на интерфейс IUnknown (в COM) или IDispatch ( в Automation )
Синтаксис Automation:

TakeProcessObject = Получить свойство (* )
Object.GetTakeProcessObject( )
Object.SetTakeProcessObject( Index, Установить свойство 
TakeProcessObject ) (**)

RequestInfo  методы

GetCallBackC  Получить имя функции обратной связи для 
процесса Cursor
Интерфейс...
Синтаксис Automation:
BSTR GetCallBackC();
Возвращаемое значение:

" строка с именем функции обратной связи.

GetCallBackCm  Получить имя функции обратной связи для 
процесса CommandWindow
Интерфейс...
Синтаксис Automation:
3774



BSTR GetCallBackCm();
Возвращаемое значение:

" строка с именем функции обратной связи.

GetCallBackP  Получить имя функции обратной связи для 
процесса Placement
Интерфейс...
Синтаксис Automation:
BSTR GetCallBackP();
Возвращаемое значение:

" строка с именем функции обратной связи.

GetTakeObjectCallBack  Получить имя (в Automation) или 
адрес (в COM) функции обратной связи подчиненного 
процесса
Интерфейс...
Синтаксис Automation:
BSTR GetTakeObjectCallBack();
Возвращаемое значение:

" имя функции.

Синтаксис COM:
USERTAKEOBJECTCALLBACKPROC GetTakeObjectCallBack();
Возвращаемое значение:

"   адрес функции.

Init  Инициализировать параметры
Интерфейс...
Синтаксис Automation:
BOOL Init();
Возвращаемое значение:
3775



TRUE " в случае удачного завершения.

Примечание:
Метод обнуляет все параметры запроса к системе.

SetCallBackC  Установить имя функции обратной связи для 
процесса Cursor
Интерфейс...
Синтаксис Automation:
BOOL SetCallBackC (LPCTSTR methodName, 
long hInst, 
LPDISPATCH dispatchOCX);
Входные параметры:

methodName " строка с именем функции обратной связи,
hInst " идентификатор приложения (dll), в котором реализована 

CallBack"функция,
dispatchOCX " указатель на интерфейc IDispatch, в котором реализована 

CallBack"функция.

Возвращаемое значение:

TRUE " в случае удачного завершения.

Примечания:

1. Если разрабатываемое приложение dll, тогда заполняется параметр hInst, а dispatchOCX
= NULL.

2. Если разрабатываемое приложение ActiceX DLL, тогда заполняется параметр
dispatchOCX, а hInst = 0.

3. Функция устарела. Использование данной функции может привести к ошибке в библио"
теке, собранной с конфигурацией x64. Рекомендуется использовать функцию
ksRequestInfo::SetCallBackCEx.

SetCallBackCEx  Установить имя функции обратной связи для 
процесса Cursor
Интерфейс...
Синтаксис Automation:
BOOL SetCallBackCEx(LPCTSTR methodName, VARIANT hInst, LPDISPATCH dispatchOCX);
Входные параметры:
3776



methodName " строка с именем функции обратной связи,
hInst " идентификатор приложения (dll), в котором реализована 

CallBack"функция,
dispatchOCX " указатель на интерфейc IDispatch, в котором реализована 

CallBack"функция.

Возвращаемое значение:

TRUE " в случае удачного завершения,
FALSE " в случае неудачи.

Примечания:
HINSTANCE библиотеки нужно передать через VARIANT, как VT_I4 в Win32 и VT_I8 в x64.
Для правильного формирования _variant_t HINSTANCE нужно передавать через приведе"
ние к (LONG_PTR).
В библиотеках, использующих автоматизацию, рекомендуется использовать данную
функцию вместо ksRequestInfo::SetCallBackC.

SetCallBackCm  Установить имя функции обратной связи для 
процесса CommandWindow
Интерфейс...
Синтаксис Automation:
BOOL SetCallBackCm (LPCTSTR methodName, 
long hInst, 
LPDISPATCH dispatchOCX);
Входные параметры:

methodName " строка с именем функции обратной связи,
hInst идентификатор приложения (dll), в котором реализована 

CallBack"функция,
dispatchOCX указатель на интерфейc IDispatch, в котором реализована 

CallBack"функция.

Возвращаемое значение:

TRUE " в случае удачного завершения.

Примечания:

1. Если разрабатываемое приложение dll, тогда заполняется параметр hInst, а dispatchOCX
= NULL.

2. Если разрабатываемое приложение ActiceX DLL, тогда заполняется параметр
dispatchOCX, а hInst = 0.
3777



3. Функция устарела. Использование данной функции может привести к ошибке в библио"
теке, собранной с конфигурацией x64. Рекомендуется использовать функцию
ksRequestInfo::SetCallBackCmEx.

SetCallBackCmEx  Установить имя функции обратной связи 
для процесса CommandWindow
Интерфейс...
Синтаксис Automation:
BOOL SetCallBackCmEx(LPCTSTR methodName, VARIANT hInst, LPDISPATCH dispatchOCX);
Входные параметры:

methodName " строка с именем функции обратной связи,
hInst " идентификатор приложения (dll), в котором реализована 

CallBack"функция,
dispatchOCX " указатель на интерфейc IDispatch, в котором реализована 

CallBack"функция.

Возвращаемое значение:

TRUE " в случае удачного завершения,
FALSE " в случае неудачи.

Примечания:
HINSTANCE библиотеки нужно передать через VARIANT, как VT_I4 в Win32 и VT_I8 в x64.
Для правильного формирования _variant_t HINSTANCE нужно передавать через приведе"
ние к (LONG_PTR).
В библиотеках, использующих автоматизацию, рекомендуется использовать данную
функцию вместо ksRequestInfo::SetCallBackCm.

SetCallBackP  Установить имя функции обратной связи для 
процесса Placement
Интерфейс...
Синтаксис Automation:
BOOL SetCallBackP (LPCTSTR methodName, 
long hInst, 
LPDISPATCH dispatchOCX);
Входные параметры:

methodName " строка с именем функции обратной связи,
hInst " идентификатор приложения (dll), в котором реализована 

CallBack"функция,
3778



dispatchOCX " указатель на интерфейc IDispatch, в котором реализована 
CallBack"функция.

Возвращаемое значение:

TRUE " в случае удачного завершения.

Примечания:

1. Если разрабатываемое приложение dll, тогда заполняется параметр hInst, а dispatchOCX
= NULL.

2. Если разрабатываемое приложение ActiceX DLL, тогда заполняется параметр
dispatchOCX, а hInst = 0.

3. Функция устарела. Использование данной функции может привести к ошибке в библио"
теке, собранной с конфигурацией x64. Рекомендуется использовать функцию
ksRequestInfo::SetCallBackPEx.

SetCallBackPEx  Установить имя функции обратной связи для 
процесса Placement
Интерфейс...
Синтаксис Automation:
BOOL SetCallBackPEx(LPCTSTR methodName, VARIANT hInst, LPDISPATCH dispatchOCX);
Входные параметры:

methodName " строка с именем функции обратной связи,
hInst " идентификатор приложения (dll), в котором реализована 

CallBack"функция,
dispatchOCX " указатель на интерфейc IDispatch, в котором реализована 

CallBack"функция.

Возвращаемое значение:

TRUE " в случае удачного завершения,
FALSE " в случае неудачи.

Примечания:
HINSTANCE библиотеки нужно передать через VARIANT, как VT_I4 в Win32 и VT_I8 в x64.
Для правильного формирования _variant_t HINSTANCE нужно передавать через приведе"
ние к (LONG_PTR).
В библиотеках, использующих автоматизацию, рекомендуется использовать данную
функцию вместо ksRequestInfo::SetCallBackP.
3779



SetCursorText  Установить текст курсора
Интерфейс...
Синтаксис Automation:
BOOL SetCursorText( BSTR Text );
Примечание
Функция работает при запущенном процессе.
Текст сразу выдается над курсором.

SetTakeObjectCallBack  Установить функцию обратной связи 
для подчиненного процесса
Интерфейс...
Синтаксис Automation:
BOOL SetTakeObjectCallBack(LPCTSTR methodName, VARIANT hInst, LPDISPATCH
dispatchOCX);
Входные параметры:

methodName " строка с именем функции обратной связи,
hInst " идентификатор приложения (dll), в котором реализована 

CallBack"функция,
dispatchOCX " указатель на интерфейc IDispatch, в котором реализована 

CallBack"функция.

Возвращаемое значение:

TRUE " в случае удачного завершения,
FALSE " в случае неудачи.

Прототип CallBackфункции:
Синтаксис Automation (пример для Visual C):
BOOL WINAPI TakeObjectCallBack(LPDISPATCH _object);
Входной параметр:

_object " указатель на интерфейс объекта ksEntity
для подпроцессов создания объектов,
" указатель на интерфейс сопряжения
ksMateConstraint для подпроцессов создания
сопряжений.

Синтаксис COM:
BOOL SetTakeProcessObject (USERTAKEOBJECTCALLBACKPROC callBack);
Входной параметр:
3780



callBack " адрес функции.

Возвращаемое значение:

TRUE " в случае удачного завершения,
FALSE " в случае неудачи.

Примечание:
Тип функции обратной связи для подчиненного процесса
typedef BOOL (__stdcall * USERTAKEOBJECTCALLBACKPROC)(LPUNKNOWN);
Прототип CallBackфункции:
Синтаксис COM:
BOOL __stdcall SelectFilterProc (LPUNKNOWN _object );
Входной параметр:

_object " указатель на интерфейс объекта ksEntity
для подпроцессов создания объектов,
" указатель на интерфейс сопряжения
ksMateConstraint для подпроцессов создания
сопряжений.

Примечание:
Функция вызывается при завершении подпроцесса создания\редактирования подчинен"
ного объекта 
HINSTANCE библиотеки нужно передать через VARIANT, как VT_I4 в Win32 и VT_I8 в x64.
Для правильного формирования _variant_t HINSTANCE нужно передавать через приведе"
ние к (LONG_PTR).

Местоположение  привязка (Интерфейс 
ksPlacementParam)
Интерфейс параметров местоположения (привязки).
Аналог данных параметров при использовании API экспортных функций "
PlacementParam.
Примечание:
Указатель на интерфейс можно получить при помощи метода
KompasObject::GetParamStruct.
Смотрите также KompasObject
3781



ksPlacementParam  свойства

angle  Угол поворота в системе координат вида
Интерфейс...
Тип данных:double.
Синтаксис Automation:

angle = iPlacementParam.angle Получить свойство(* )
iPlacementParam.angle = angle Установить свойство (* )
angle = iPlacementParam.GetAngle() Получить свойство (**)
iPlacementParam.SetAngle( angle ) Установить свойство (**)

scale_  Масштаб
Интерфейс...
Тип данных:double.
Синтаксис Automation:

scale_ = iPlacementParam.scale_ Получить свойство(* )
iPlacementParam.scale_ = scale_ Установить свойство (* )
scale_ = iPlacementParam.GetScale_() Получить свойство (**)
iPlacementParam.SetScale_(scale_) Установить свойство (**)

xBase, yBase  Координаты базовой точки в системе 
координат вида
Интерфейс...Тип данных:double.
Синтаксис Automation:

xBase = iPlacementParam.xBase Получить свойство(* )
iPlacementParam.xBase = xBase Установить свойство (* )
xBase = iPlacementParam.GetXBase() Получить свойство (**)
iPlacementParam.SetXBase( xBase ) Установить свойство (**)

ksPlacementParam  методы

Init  Инициализировать параметры.
Интерфейс...
Синтаксис Automation:
BOOL Init();
Возвращаемое значение:
3782



TRUE " в случае удачного завершения.

Примечания:

1. Метод обнуляет все параметры местоположения. 
2. Свойство scale = 1.
3783



3784



Интерфейсы параметров графических примитивов
Отрезок (Интерфейс ksLineSegParam)
Справка системы КОМПАС...
KOMPAS.chm::/CM_LINESEGM.htm
Интерфейс параметров отрезка.
Аналог данных параметров при использовании API экспортных функций " LineSegParam.
Примечание:
Указатель на интерфейс можно получить при помощи метода KompasObject::GetParam
Struct.
Смотрите также: KompasObject

ksLineSegParam  свойства

style  Стиль линии
Интерфейс...
Тип данных:long.
Синтаксис Automation:

style = iRectParam.style Получить свойство (* )
iRectParam.style = style Установить свойство (* )
style = iRectParam.GetStyle() Получить свойство (**)
iRectParam.SetStyle( style ) Установить свойство (**)

Системные стили линий...

x1, y1  Координаты начальной точки отрезка
Интерфейс...
Тип данных:double.
Синтаксис Automation:

x1 = iLineSegParam.x1 Получить свойство (* )
iLineSegParam.x1 = x1 Установить свойство (* )
x1 = iLineSegParam.GetX1() Получить свойство (**)
iLineSegParam.SetX1( x1 ) Установить свойство (**)

x2, y2  Координаты конечной точки отрезка
Интерфейс...
Тип данных:double.
Синтаксис Automation:
3785



x2 = iRectParam.x2 Получить свойство (* )
iRectParam.x2 = x2 Установить свойство (* )
x2 = iRectParam.GetX2() Получить свойство (**)
iRectParam.SetX2( x2 ) Установить свойство (**)

ksLineSegParam  методы

Init  Инициализировать параметры
Интерфейс...
Синтаксис Automation:
BOOL Init();
Возвращаемое значение:

TRUE " в случае удачного завершения.

Примечание:
Метод обнуляет все параметры отрезка.

Дуга окружности по углу раствора (Интерфейс 
ksArcByAngleParam)
Справка системы КОМПАС...
KOMPAS.chm::/CM_CIRCLEARC.htm
Интерфейс параметров дуги по центру и двум углам.
Аналог данных параметров при использовании API экспортных функций " ArcParam.
Примечание:
Указатель на интерфейс можно получить при помощи метода
KompasObject::GetParamStruct.
Смотрите также: KompasObject

ksArcByAngleParam  свойства

ang1  Начальный угол дуги
Интерфейс...
Тип данных:double.
Синтаксис Automation:

ang1 = iArcByAngleParam.ang1 Получить свойство (* )
iArcByAngleParam.ang1 = ang1 Установить свойство (* )
ang1 = Получить свойство (**)
iArcByAngleParam.GetAngle1()
3786



iArcByAngleParam.SetAngle1( ang1 ) Установить свойство (**)

ang2  Конечный угол дуги
Интерфейс...
Тип данных:double.
Синтаксис Automation:

ang2 = iArcByAngleParam.ang2 Получить свойство (* )
iArcByAngleParam.ang2 = ang2 Установить свойство (* )
ang2 = iArcByAngleParam.GetAngle2() Получить свойство (**)
iArcByAngleParam.SetAngle2( ang2 ) Установить свойство (**)

dir  Направление построения дуги
Интерфейс...
Тип данных:short.
Значения свойства:

 1 " против часовой стрелки,
"1 " по часовой стрелке.

Синтаксис Automation:

dir = iArcByAngleParam.dir Получить свойство (* )
iArcByAngleParam.dir = dir Установить свойство (* )
dir = iArcByAngleParam.GetDirection() Получить свойство (**)
iArcByAngleParam.SetDirection( dir ) Установить свойство (**)

rad  Радиус дуги
Интерфейс...
Тип данных:double.
Синтаксис Automation:

rad = iArcByAngleParam.rad Получить свойство (* )
iArcByAngleParam.rad = rad Установить свойство (* )
rad = iArcByAngleParam.GetRadius() Получить свойство (**)
iArcByAngleParam.SetRadius( rad ) Установить свойство (**)

style  Стиль линии
Интерфейс...
Тип данных:long.
Синтаксис Automation:
3787



style = iArcByAngleParam.style Получить свойство (* )
iArcByAngleParam.style = style Установить свойство (* )
style = iArcByAngleParam.GetStyle() Получить свойство (**)
iArcByAngleParam.SetStyle( style ) Установить свойство (**)

Системные стили линий...

xc, yc  Координаты центра дуги
Интерфейс...
Тип данных:double.
Синтаксис Automation:

xc = iArcByAngleParam.xc Получить свойство (* )
iArcByAngleParam.xc = xc Установить свойство (* )
xc = iArcByAngleParam.GetXc() Получить свойство (**)
iArcByAngleParam.SetXc( xc ) Установить свойство (**)

ksArcByAngleParam  методы

Init  Инициализировать параметры
Интерфейс...
Синтаксис Automation:
BOOL Init();
Возвращаемое значение:

TRUE " в случае удачного завершения.

Примечание:
Метод обнуляет все параметры дуги.

Дуга окружности по точкам (Интерфейс 
ksArcByPointParam)
Справка системы КОМПАС...
KOMPAS.chm::/CM_CIRCLEARC.htm
Интерфейс параметров дуги по центру и двум точкам.
Аналог данных параметров при использовании API экспортных функций " ArcParam1.
Примечание:
Указатель на интерфейс можно получить при помощи метода
KompasObject::GetParamStruct.
Смотрите также: KompasObject
3788



ksArcByPointParam  свойства

dir  Направление построения дуги
Интерфейс...
Тип данных:short.
Значения свойства:

 1 " против часовой стрелки,
"1 " по часовой стрелке.

Синтаксис Automation:

dir = iArcByPointParam.dir Получить свойство (* )
iArcByPointParam.dir = dir Установить свойство (* )
dir = iArcByPointParam.GetDirection() Получить свойство (**)
iArcByPointParam.SetDirection( dir ) Установить свойство (**)

rad  Радиус дуги
Интерфейс...
Тип данных:double.
Синтаксис Automation:

rad = iArcByPointParam.rad Получить свойство (* )
iArcByPointParam.rad = rad Установить свойство (* )
rad = iArcByPointParam.GetRadius() Получить свойство (**)
iArcByPointParam.SetRadius( rad ) Установить свойство (**)

style  Стиль линии
Интерфейс...
Тип данных:long.
Синтаксис Automation:

style = iArcByPointParam.style Получить свойство (* )
iArcByPointParam.style = style Установить свойство (* )
style = iArcByPointParam.GetStyle() Получить свойство (**)
iArcByPointParam.SetStyle( style ) Установить свойство (**)

Системные стили линий...

xc, yc  Координаты центра дуги
Интерфейс...
3789



Тип данных:double.
Синтаксис Automation:

xc = iArcByPointParam.xc Получить свойство (* )
iArcByPointParam.xc = xc Установить свойство (* )
xc = iArcByPointParam.GetXc() Получить свойство (**)
iArcByPointParam.SetXc( xc ) Установить свойство (**)

x1, y1  Координаты начальной точки дуги
Интерфейс...
Тип данных:double.
Синтаксис Automation:

x1 = iArcByPointParam.x1 Получить свойство (* )
iArcByPointParam.x1 = x1 Установить свойство (* )
x1 = iArcByPointParam.GetX1() Получить свойство (**)
iArcByPointParam.SetX1( x1 ) Установить свойство (**)

x2, y2  Координаты конечной точки дуги
Интерфейс...
Тип данных:double.
Синтаксис Automation:

x2 = iArcByPointParam.x2 Получить свойство (* )
iArcByPointParam.x2 = x2 Установить свойство (* )
x2 = iArcByPointParam.GetX2() Получить свойство (**)
iArcByPointParam.SetX2( x2 ) Установить свойство (**)

ksArcByPointParam  методы

Init  Инициализировать параметры
Интерфейс...
Синтаксис Automation:
BOOL Init();
Возвращаемое значение:

TRUE " в случае удачного завершения.

Примечание:
Метод обнуляет все параметры дуги.
3790



Математическая точка (Интерфейс ksMathPointParam)
Интерфейс параметров математической точки.
Аналог данных параметров при использовании API экспортных функций "
MathPointParam.
Примечание:
Указатель на интерфейс можно получить при помощи методов:

▼ KompasObject::GetParamStruct,
▼ ksRectParam::GetpBot,
▼ ksRectParam::GetpTop,

Смотрите также: KompasObject

ksMathPointParam  свойства

x, y  Координаты точки
