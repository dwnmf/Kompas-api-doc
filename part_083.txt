0 " отказ (Esc), идентификатор выбранной команды из командной 

строки или меню, определенный в файле ресурсов.

Примечание:
4524



1.  В качестве функции обратной связи передается указатель на функцию типа
CursorCallBack. Возможные варианты (команды) задаются в строке commands структуры
info и разделяются восклицательными знаками или пробелами. Если вместо строки в ка"
честве параметра передать идентификатор меню из файла ресурсов, то соответствую"
щее меню будет выдано в окне приглашений. Если в качестве адреса _callBack передает"
ся NULL, то действие метода прекращается после первого шага.

2.  При использовании Unicode следует использовать функцию CursorExW.

CursorExW  Запрос к системе на получение точки 
(Unicode)
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksCursorEx.
Синтаксис:
int LIB_FUNC CursorExW (RequestInfoW *info,
double *x,
double *y,
void *phantom,
LPUNKNOWN processParam);
Входные параметры:

info " указатель на структуру параметров запроса к системе RequestInfo,
x, y " координаты введенной точки,
phantom " указатель на структуру управления фантомом, определяющую тип 

движения курсора (аналог типа резиновой нити в версии 4),
processParam " указатель на интерфейс параметров процесса IProcessParam.

Выходные параметры:

x, y " возвращаемые координаты точки.

Возвращаемое значение:

"1 " если указана точка,
0 " отказ (Esc), идентификатор выбранной команды из 

командной строки или меню, определенный в файле 
ресурсов.

Примечание:

1.  В качестве функции обратной связи передается указатель на функцию типа
CursorCallBack. Возможные варианты (команды) задаются в строке commands структуры
info и разделяются восклицательными знаками или пробелами. Если вместо строки в ка"
честве параметра передать идентификатор меню из файла ресурсов, то соответствую"
4525



щее меню будет выдано в окне приглашений. Если в качестве адреса _callBack передает"
ся NULL, то действие метода прекращается после первого шага.

2.  При использовании ANSI следует использовать функцию CursorEx.

DecomposeObj  Разбить объект на составляющие части  
отрезки, дуги, тексты
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_DESTROYMACRO.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksDecomposeObj.
Синтаксис:
reference DecomposeObj (reference p, 
unsigned char level, 
double arrow, 
unsigned char type);
Входные параметры:

p " указатель на разбиваемый объект,
level " степень детализации разбиения:

0 " отрезки, дуги, тексты, точки,
1 " отрезки, тексты, точки,
2 " отрезки, дуги, тексты,
4 " отрезки, дуги, точки,
5 " отрезки, дуги, тексты, заливки стрелок и треугольников баз,
6 " разбиение объектов из ассоциативного чертежа на составляющие с учетом 
видимых и невидимых участков,

arrow " размер "стрелки прогиба",
type " признак выбранной системы координат: 

0 " разбиение объекта в СК вида, 
1 " разбиение объекта в СК листа.

Возвращаемое значение:

указатель на временную группу " в случае удачного завершения,
компонентов сложного объекта
0 " в случае неудачи.

Примечания:

1.  Метод используется при разработке различных конверторов, преобразующих информа"
цию из системы КОМПАС во внешние форматы.

2.  Текущий документ должен быть графическим.
4526



3.  Графический документ разбивается по частям. Такими частями могут быть объекты ви"
да, основная надпись, технические требования, спецификация на листе, знак неуказан"
ной шероховатости.

4. Документ"спецификация разбивается по листам (количество листов спецификации
можно получить при помощи функции ksGetSpcDocumentPagesCount). Если функция ис"
пользуется для разбиения спецификации, то параметр type представляет собой номер
листа спецификации, начиная с 1.

5.  Сложные кривые заменяются набором отрезков и дуг (при level=1 " только набором от"
резков).

6.  Точность приближения к исходному объекту задается значением параметра arrow " мак"
симальным расстоянием между исходным объектом и аппроксимирующим отрезком.

7. Если level=2, точки превращаются в графические объекты, служащие для отрисовки этих
точек в КОМПАС"ГРАФИК (например, в два отрезка для точки типа "крест"). В остальных
случаях точки (в том числе отрисованные в виде "крестов", "треугольников" и т.д.) прев"
ращаются в объект типа "точка".

8.  Во всех случаях, кроме level=4, сложные тексты (например, тексты, написанные буквами
разного начертания " прямого и курсивного) разбиваются на тексты с одинаковыми при"
знаками. При level=4 тексты не изменяются.

9.  Исходный объект после разбиения не изменяется.

DeleteObj  Удалить объект
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksDeleteObj.
Синтаксис:
int DeleteObj (reference obj);
Входной параметр:

obj " указатель на объект.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Если указатель obj равен нулю, то удаляются выделенные объекты документа.

ExistObj  Проверить существование объекта
Пример...
4527



Аналог данной функции при использовании Automation " метод
ksDocument2D::ksExistObj.
Синтаксис:
int ExistObj (reference obj);
Входной параметр:

obj " указатель на объект.

Возвращаемое значение:

1 " в случае наличия объекта,
0 " в случае отсутствия объекта.

GetObjParam  Получить параметры объекта
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksGetObjParam.
Синтаксис:
int GetObjParam (reference ref, 
void *param, 
int parSize, 
int parType);
Входной параметр:

ref " указатель на объект,
parType " тип параметров объекта или индекс строки в массиве для 

объектов TECHNICALDEMAND_OBJ и TEXT_OBJ или номер 
страницы (габаритного прямоугольника) технических 
требований (TECHNICALDEMAND_OBJ),

parSize " размер структуры для записи параметров.

Выходные параметры:

param " указатель на структуру параметров,

Возвращаемое значение:

тип объекта " в случае удачного завершения,
0 " в случае неудачи.

Типы объектов и интерфейсы...
Смотрите также
SetObjParam
4528



Примечание:
Вызов метода с нулевыми значениями параметров param, parSize и parType позволяет
получить тип объекта по его reference.

ksApproximationCurve  Аппроксимировать кривую 
дугами
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksApproximationCurve.
Синтаксис:
reference ksApproximationCurve (reference p,
double eps,
unsigned char curentLayer,
double maxRad,
unsigned char smooth);
Входные параметры:

p " указатель на аппроксимируемую кривую,
eps " точность аппроксимации (от 1e"7 до 1)
curentLayer  " тип размещения получившихся объектов на слоях: 

0 " на слой кривой, 
1 " в текущий слой,

maxRad " максимально допустимый радиус дуг, 
(0 " ограничение не накладывается),

smooth " признак сопряжения:
1 " гладкое, 
0 " не гладкое.

Возвращаемое значение:

указатель на контур, дугу, отрезок " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
Аппроксимируются кривые Безье, NURBS, эквидистанты, эллипсы, дуги эллипсов и кон"
туры. Остальные кривые игнорируются.

ksCalcRasterScale  Рассчитать масштаб для вставки 
растра в прямоугольник заданных габаритов
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksCalcRasterScale.
Синтаксис:
double ksCalcRasterScale (const char* fileName, double w, double h);
4529



Входные параметры:

fileName " полный путь к файлу,
w " ширина габаритного прямоугольника,
h " высота габаритного прямоугольника.

Возвращаемое значение:

значение масштаба " в случае успешного завершения,
0 " в случае неудачи.

ksCalcRasterScaleW  Рассчитать масштаб для вставки 
растра в прямоугольник заданных габаритов (Unicode)
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksCalcRasterScale.
Синтаксис:
double LIB_FUNC ksCalcRasterScaleW (LPWSTR fileName, double w, double h);
Входные параметры:

fileName " полный путь к файлу,
w " ширина габаритного прямоугольника,
h " высота габаритного прямоугольника.

Возвращаемое значение:

значение масштаба " в случае успешного завершения,
0 " в случае неудачи.

Примечание.
При использовании ANSI следует использовать функцию ksCalcRasterScale.

ksChangeObjectInLibRequest  Изменить фантом или 
компоненты команд
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksChangeObjectInLibRequest.
Синтаксис:
int ksChangeObjectInLibRequest (RequestInfo *info, void *phantom);
Входные параметры:

info " указатель на область памяти для замены состава команд,
phantom " указатель на структуру управления фантомом.
4530



Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Во время работы функций Cursor и Placement может возникнуть необходимость изме"
нить фантом или компоненты команд. Функция ksChangeObjectInLibRequest позволяет
передать изменения в цикл Cursor и Placement. Это может понадобиться для отработки
команд пользовательских инструментальных панелей. Предварительно нужно убедить"
ся, что вызов Cursor и требование к Cursor передаются в одном документе. Если какой"
либо указатель равен 0, соответствующий параметр не используется. Если оба параме"
тра равны 0, процессы Cursor и Placement прерываются. Это аналогично нажатию Esc.
После завершения функции, вызвавшей останов процесса, управление будет передано в
Cursor или Placement, а затем в функцию пользователя, которая вызывала Cursor или
Placement.

2.  При использовании Unicode следует использовать функцию
ksChangeObjectInLibRequestW.

ksChangeObjectInLibRequestW  Изменить фантом или 
компоненты команд (Unicode)
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksChangeObjectInLibRequest.
Синтаксис:
int LIB_FUNC ksChangeObjectInLibRequestW (RequestInfoW *info, void *phantom);
Входные параметры:

info " указатель на область памяти для замены состава команд,
phantom " указатель на структуру управления фантомом.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Во время работы функций Cursor и Placement может возникнуть необходимость изме"
нить фантом или компоненты команд. Функция ksChangeObjectInLibRequest позволяет
передать изменения в цикл Cursor и Placement. Это может понадобиться для отработки
команд пользовательских инструментальных панелей. Предварительно нужно убедить"
ся, что вызов Cursor и требование к Cursor передаются в одном документе. Если какой"
4531



либо указатель равен 0, соответствующий параметр не используется. Если оба параме"
тра равны 0, процессы Cursor и Placement прерываются. Это аналогично нажатию Esc.
После завершения функции, вызвавшей останов процесса, управление будет передано в
Cursor или Placement, а затем в функцию пользователя, которая вызывала Cursor или
Placement.

2.  При использовании ANSI следует использовать функцию ksChangeObjectInLibRequest.

ksChangeObjectsOrder  Изменить порядок отрисовки 
объектов чертежа
Справка системы КОМПАС...
KOMPAS.chm::/65_6_3_Upravlenie_porjadkom_otr.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksChangeObjectsOrder.
Синтаксис:
int ksChangeObjectsOrder (reference group, reference obj, int orderType);
Входной параметр:

obj " указатель на объект относительно которого изменяется отрисовка 
группы,

group " указатель на группу объектов, для которой требуется изменить 
последовательность отрисовки,

orderType " тип изменения порядка объектов.

Возвращаемое значение:

1 " в случае успеха,
0 " в случае неудачи.

ksClearRegion  Очистить указанную область
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_BLACKBOX.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksClearRegion.
Синтаксис:
int ksClearRegion (reference grClear, 
reference grRegion, 
unsigned char inside);
Входные параметры:
4532



grClear " группа обрабатываемых объектов
(0 " просматривать все объекты текущего вида или выделенные, если они 
есть),

grRegion " группа объектов, задающая область очистки,
inside " место очистки: 

0 " снаружи области, ограниченной grRegion, 
1 " внутри области.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
При очистке объекты, которые пересекаются с границей области очистки, могут быть
усечены или полностью удалены.
В зависимости от типа при усечении объекты изменяются (например, отрезок) или заме"
няются на новые объекты (например, окружность становится дугой).
Новые объекты, созданные в результате операции очистки, помещаются в группу обра"
батываемых объектов.
Если группа временная, то для сохранения новых объектов в документе, для нее нужно
выполнить функцию StoreTmpGroup.

ksCopyObj  Копировать объект 
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksCopyObj.
Синтаксис:
reference int ksCopyObj (reference obj, 
double xb, double yb, 
double xn, double yn, 
double scale, 
double ang);
Входные параметры:

obj " указатель на объект,
xb, yb " координаты базовой точки объекта,
xn, yn " координаты нового положения базовой точки,
scale " масштаб,
ang " угол поворота в градусах.

Возвращаемое значение:
4533



указатель на полученный объект или группу объектов " в случае удачного завершения,
0 " в случае неудачи.

Примечание:

1.  Если указатель на объект равен нулю, то копируются выделенные объекты документа.
2.  Значения xb,yb, xn,yn задаются в системе координат текущего вида.
3. При копировании одиночного объекта новый объект создается на текущем слое текуще"

го вида.
4. При копировании группы объектов слой сохраняется.
5. При копировании одиночного многослойного макрообъекта он перестает быть много"

слойным. Макро и входящие в него объекты переносятся на текущий слой. Для копиро"
вания многослойного макро с сохранением многослойности требуется добавить его в
группу.

ksCopyObjEx  Копировать объект
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksCopyObjEx.
Синтаксис:
reference ksCopyObjEx( CopyObjectParam * param );
Входные параметры:

param " указатель на структуру параметров CopyObjectParam.

Возвращаемое значение:

указатель на объект или группу объектов " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1. Функция позволяет копировать объект (объект вида, вид, группу, слой) в новую точку с
возможностью задания масштабирования копии и поворота ее вокруг базовой точки.

2. При копировании одиночного объекта новый объект создается на текущем слое текуще"
го вида.

3. При копировании группы объектов слой сохраняется.
4. При копировании одиночного многослойного макрообъекта он перестает быть много"

слойным. Макро и входящие в него объекты переносятся на текущий слой. Для копиро"
вания многослойного макро с сохранением многослойности требуется добавить его в
группу.
4534



ksDestroyObjects  Разрушить присланные составные 
объекты
Справка системы КОМПАС...
KOMPAS.chm::/CM_DESTROYMACRO.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksDestroyObjects.
Синтаксис:
long ksDestroyObjects(reference p).
Входной параметр:

p " указатель на объект, вид, слой или группу.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Разрушает не только составные объекты (макроэлементы, вставки фрагментов, эквиди"
станты, прямоугольники, контуры), но и виды (если у них есть связь с моделью).

2.  Функция работает только для документов, открытых в «видимом» режиме.

ksEditViewObject  Запустить визуальный процесс 
редактирования объекта
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksEditViewObject.
Синтаксис:
int ksEditViewObject(reference obj);
Входной параметр:

obj " указатель на объект.

Возвращаемое значение:

1 " объект отредактирован,
0 " объект не отредактирован.

Примечание:
Функция распространяется на все объекты вида кроме:
4535



LAYER_OBJ "слой,
CONTOUR_OBJ "контур,
MACRO_OBJ "нетипизированный макроэлемент,
FRAGMENT_OBJ "вставной фрагмент,
ELLIPSE_ARC_OBJ "дуга эллипса.

ksGetCurvePerpendicularByT  Получить угол нормали к 
кривой в заданной точке по параметру кривой
Синтаксис:
double LIB_FUNC  ksGetCurvePerpendicularByT( reference curve,
                                             double t )
Входные параметры:

curve " указатель на кривую,
t " параметр кривой.

Возвращаемое значение:
Функция возвращает угол нормали к кривой в заданной точке по параметру кривой (0 "
360 градусов). В случае неудачи возвращается "1.

ksGetEditMacroVisibleRegime  Находится ли документ 
или вид в режиме редактирования макроэлемента
Аналог данной функции при использовании Automation " метод
IKompasDocument2D1::EditMacroVisibleRegime.
Синтаксис:
int ksGetEditMacroVisibleRegime( reference p )
Входные параметры:

p " указатель на 2D"документ или вид, 
0 " текущий документ.

Возвращаемое значение:

1 " включен визуальный режим редактирования макроэлемента,
0  " обычный режим создания/редактирования объектов.

ksGetObject2DNotifyResult  Получить интерфейс 
результатов редактирования объекта 2D документа
Аналог данной функции при использовании Automation " метод
ksDocument2D::GetObject2DNotifyResult.
Синтаксис:
4536



IObject2DNotifyResult * ksGetObject2DNotifyResult();
Возвращаемое значение:

" указатель на интерфейс источника событий IObject2DNotifyResult

ksGetOrthoMode  Получить режим ортогонального 
черчения
Справка системы КОМПАС...
KOMPAS.chm::/CM_ORTHO_MODE_ONOFF.htm
Синтаксис:
long ksGetOrthoMode (reference doc);
Входной параметр:

doc " указатель на документ.

Возвращаемое значение:

1 " режим ортогонального черчения включен,
0 " режим ортогонального черчения выключен.

ksGetParametrizationParam  Получить интерфейс 
параметров параметризации объектов
Справка системы КОМПАС...
KOMPAS.chm::/476_Glava55_Nalozhenie_svjazej_.htm
Аналог данной функции при использовании Automation " метод
KompasObject::GetParamStruct. В метод необходимо передать константу
ko_ParametrizationParam.
Синтаксис:
IParametrizationParam * ksGetParametrizationParam();
Возвращаемое значение:

Указатель на интерфейс параметров параметризации объектов " в случае успешного 
IParametrizationParam завершения,
NULL " в случае неудачи.

Примечание:
Данная функция используется совместно с ksParametrizeObjects. Объявление интерфей"
са IParametrizationParam дано в библиотеке типов kAPI2D5COM.tlb.
4537



ksGetSnapInfo  Получить текущую информацию о 
привязках
Синтаксис:
ISnapInfo * LIB_FUNC ksGetSnapInfo();
Возвращаемое значение:

" интерфейс информации о текущей привязке ISnapInfo.

Примечание:
Функция позволяет получить информацию о привязке к объектам документа, сетке до"
кумента и о других типах привязки в процессах CursorEx, PlacementEx.
Типы возможных привязок см. в перечислении ksSnapTypeEnum.

ksMovePointOnCurve  Получить координаты точки, 
находящейся на указанном расстоянии вдоль кривой от 
указанной точки
Пример...
Аналог данной функции при использовании Automation " метод
ksMathematic2D::ksMovePointOnCurve.
Синтаксис:
int ksMovePointOnCurve (reference curve,
double * x, double * y, 
double len,
int dir); 
Входные параметры:

curve " указатель на кривую,
len " расстояние, на которое нужно сместить точку,
dir " направление продвижения точки:

 1 " в направлении построения кривой,
 "1 " в обратном направлении.

Выходные параметры:

x, y " координаты точки.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
4538



Если точка не находится на кривой, она проецируется на кривую.

ksMovePointOnCurveEx  Получить координаты точки, 
находящейся на указанном расстоянии вдоль кривой от 
указанной точки
Синтаксис:
int LIB_FUNC  ksMovePointOnCurveEx( reference curve,  
                                    double *x, double *y,
                                    double *t,           
                                    double len,          
                                    int    dir,          
                                    int    ext ); 
Входные параметры:

curve " указатель на кривую,
len " расстояние, на которое нужно сместить точку,
dir " направление продвижения точки:

 1 " в направлении построения кривой,
 "1 " в обратном направлении.

ext "1" Если кривая не замкнута и длина ее части от точки до 
конца в заданном направлении меньше, чем нужное 
смещение, то вычислить значение на продолжении кривой, 
если можно построить продолжение.

Выходные параметры::

x, y " координаты точки,
t  " параметр кривой.

Примечание:
Функция продвигает точку на расстояние len по кривой.
Если точка не находится на кривой, то точка проецируется на кривую.
Функция возвращает 1 в случае успеха или 0 – при неудаче.

ksSetCursorText  Установить текст курсора для процесса
Синтаксис:
int LIB_FUNC ksSetCursorText( char * text );
Входной параметр:

Text " текст. 

Возвращаемое значение:
4539



1 " в случае удачи.

Примечание
Функция работает при запущенном процессе.
Текст сразу выдается над курсором.

ksSetCursorTextW  Установить текст курсора для 
процесса (Unocode)
Синтаксис:
int LIB_FUNC ksSetCursorTextW( LPWSTR text );
Входной параметр:

Text " текст.

Возвращаемое значение:

1 " в случае удачи.

Примечание:
Функция работает при запущенном процессе.
Текст сразу выдается над курсором.

ksReadGroupFromClip  Прочитать графические объекты 
из буфера обмена и разместить их во временной группе
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/110_8_8_Ispolqzovanie_bufera_ob.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksReadGroupFromClip.
Синтаксис:
reference ksReadGroupFromClip();
Возвращаемое значение:

указатель на группу " в случае удачного завершения,
0 " в случае неудачи.

Примечание:

1.  Графические объекты должны принадлежать одному виду.
2.  Параметрические связи и ограничения объектов при чтении из буфера теряются, атри"

буты сохраняются.
4540



ksSetOrthoMode  Задать режим ортогонального 
черчения
Справка системы КОМПАС...
KOMPAS.chm::/CM_ORTHO_MODE_ONOFF.htm
Синтаксис:
long ksSetOrthoMode (reference doc, long orthoMode);
Входной параметр:

doc " указатель на документ,
orthoMode " режим ортогонального черчения (1 " включить, 0 " выключить).

Возвращаемое значение:

1 " в случае успеха,
0 " в случае неудачи.

Примечание :

1.  Используется только для визуальных документов.
2.  Если указатель doc = 0, устанавливается режим ортогонального черчения для активного

документа.

ksSymmetryObj  Отразить объект относительно оси
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_OBJSYMMETRY.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksSymmetryObj.
Синтаксис:
int SymmetryObj (reference obj, 
double x1, double y1, 
double x2, double y2 ,
unsigned char copy);
Входные параметры:

obj " указатель на объект,
x1, y1 " координаты первой точки на оси,
x2, y2 " координаты второй точки на оси,
copy " режим копирования:

0 " исходные объекты удаляются,
1 " исходные объекты оставляются.

Возвращаемое значение:
4541



указатель на получившийся объект или группу объектов " в случае удачного 
завершения,

0 " в случае неудачи.

Примечание:
Если указатель obj равен нулю, то зеркально отображаются выделенные объекты доку"
мента.

ksTextEx  Создать многострочный текст по структуре 
параметровTextParam
 Аналог данной функции при использовании Automation " метод ksDocument2D::ksTextEx.
Синтаксис:
reference ksTextEx (TextParam * txtParam, int align);
Входные параметры:

txtParam " указатель на структуру TextParam параметров текста,
align " выравнивание текста:

0 " слева,
1 " по центру,
2 " справа,
3 " по ширине,
"1 установить выравнивание как у стиля текста.

Возвращаемое значение:

указатель на созданный тест " в случае успешного завершения,
0 " в случае неудачи.

ksTrimCurve  Усечь кривую, оставив часть между 
указанными точками
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/truncate_objects.htm#truncate_curve
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksTrimmCurve.
Синтаксис:
reference ksTrimCurve (reference curve,
double x1, double y1,
double x2, double y2,
double x3, double y3,
4542



unsigned char deleteOldCurve);
Входные параметры:

curve " указатель на усекаемую кривую,
x1, y1 " координаты начала оставляемого участка,
x2, y2 " координаты конца оставляемого участка,
x3, y3 " координаты точки, определяющей направление усечения для 

замкнутых кривых (эта точка принадлежит оставляемому участку),
deleteOldCurve " признак удаления усекаемой кривой:

1 " кривая будет удалена после усечения, 
0 " кривая не будет удалена после усечения.

Возвращаемое значение:

указатель на усеченную кривую " в случае успеха,
0 " в случае неудачи.

Примечание:
Если указанные точки не лежат на кривой, то усечение производится по их проекциям на
кривую.

ksTrimNurbs  Усечь NURBS
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksTrimNurbs.
Синтаксис:
int ksTrimNurbs (reference pObj,
double tMin, double tMax);
Входные параметры:

pObj " указатель на кривую NURBS
или 0 для создаваемой кривой NURBS.

tMin, tMax " границы интервала для усечения.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

ksUndoContainer  Включить/отключить объединение 
операций для Undo
Справка системы КОМПАС...
KOMPAS.chm::/DLG_OTHER.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksUndoContainer.
4543



Синтаксис:
void ksUndoContainer( unsigned char add );
Входные параметры:

add " false " закрывает текущий контейнер Undo для объединения операций,
true " создает текущий контейнер Undo для объединения операций.

Примечание:
Функция позволяет включить/отключить объединение операций для Undo.

ksWriteGroupToClip  Разместить группу в буфере 
обмена с удалением или оставлением геометрии в 
документеисточнике (скопировать или вырезать 
геометрию в буфер обмена)
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/110_8_8_Ispolqzovanie_bufera_ob.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksWriteGroupToClip.
Синтаксис:
int ksWriteGroupToClip (reference g, unsigned char copy);
Входные параметры:

g " указатель на группу,
copy " признак копирования или вырезания: 

1 " копирование, 
0 " вырезание.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

LightObj  Выделить объект цветом
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksLightObj.
Синтаксис:
int LightObj( reference obj, int reg );
Входные параметры:
4544



obj " указатель на объект,
reg " режим подсветки:

1 " установить выделение,
0 " снять выделение.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
При reg=1 объект выделяется, при reg=0 выделение снимается.

MoveObj  Сдвинуть объект
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/make_shift.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksMoveObj.
Синтаксис:
int MoveObj (reference obj, double dx, double dy);
Входные параметры:

obj " указатель на объект,
dx, dy " вектор смещения объекта.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Если указатель obj равен нулю, то сдвигаются выделенные объекты документа.

PlacementEx  Запрос к системе на получение точки и 
угла
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksPlacementEx.
Синтаксис:
int PlacementEx (RequestInfo *info,
double *x,
4545



double *y,
double *angle,
void *phantom,
LPUNKNOWN processParam);
Входные параметры:

info " указатель на структуру параметров запроса к системе,
x, y " координаты введенной точки,
angle " введенный угол,
phantom " указатель на структуру управления фантомом, определяющую тип 

движения курсора (аналог типа резиновой нити в версии 4),
processParam " указатель на интерфейс параметры процесса ProcessParam.

Выходные параметры:

x, y " возвращаемые координаты точки,
angle " возвращаемое значение угла.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание:

1.  Возможные варианты (команды) задаются в строке commands структуры info и разде"
ляются восклицательными знаками или пробелами. Если вместо строки в качестве пара"
метра передать идентификатор меню из файла ресурсов, то соответствующее меню бу"
дет выдано в окне приглашений. Если в качестве адреса _callBack передается NULL, то
действие метода прекращается после первого шага.

2.  При использовании Unicode следует использовать функцию PlacementExW.

PlacementExW  Запрос к системе на получение точки и 
угла
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksPlacementEx.
Синтаксис:
int LIB_FUNC PlacementExW (RequestInfoW *info,
double *x,
double *y,
double *angle,
void *phantom,
LPUNKNOWN processParam);
Входные параметры:

info " указатель на структуру параметров запроса к системе,
4546



x, y " координаты введенной точки,
angle " введенный угол,
phantom " указатель на структуру управления фантомом, определяющую тип 

движения курсора (аналог типа резиновой нити в версии 4),
processParam " указатель на интерфейс параметры процесса IProcessParam.

Выходные параметры:

x, y " возвращаемые координаты точки,
angle " возвращаемое значение угла.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание:

1.  Возможные варианты (команды) задаются в строке commands структуры info и разде"
ляются восклицательными знаками или пробелами. Если вместо строки в качестве пара"
метра передать идентификатор меню из файла ресурсов, то соответствующее меню бу"
дет выдано в окне приглашений. Если в качестве адреса _callBack передается NULL, то
действие метода прекращается после первого шага.

2.  При использовании ANSI следует использовать функцию PlacementEx.

RotateObj  Повернуть объект
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/CM_OBJROTATE.htm
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksRotateObj.
Синтаксис:
int RotateObj (reference obj, double xc, double yc, double ang);
Входные параметры:

obj " указатель на объект,
xc, yc " координаты центра поворота,
ang " угол поворота (в градусах).

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
4547



Если указатель obj равен нулю, то поворачиваются выделенные объекты документа.

SetObjParam  Задать параметры указанного объекта
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksSetObjParam и ksDocument3D::ksSetObjParam
Синтаксис:
int SetObjParam (reference ref, 
void *param, 
int parSize, 
int paramType);
Входные параметры:

ref " указатель на объект,
parSize " размер структуры для записи параметров,
paramType " тип параметров объекта или индекс строки в массиве для объектов 

TECHNICALDEMAND_OBJ и TEXT_OBJ или номер страницы (габаритного 
прямоугольника) технических требований (TECHNICALDEMAND_OBJ).

Выходные параметры:

param " указатель на структуру параметров.

Возвращаемое значение:

1  в случае успешного завершения,
0  в случае неудачи.

Типы объектов и интерфейсы...
Примечание:
Данная функция позволяет обрабатывать параметры графического объекта (отрезка,
размеров и т.п.), вида, слоя.
Смотрите также GetObjParam

SymmetryObj  Отразить объект относительно оси
Пример...
Синтаксис:
int SymmetryObj (reference obj, 
double x1, double y1, 
double x2, double y2 ,
4548



unsigned char withCopy);
Входные параметры:

obj " указатель на объект,
x1, y1 " координаты первой точки на оси,
x2, y2 " координаты второй точки на оси,
withCopy " режим копирования:

0 " исходные объекты удаляются,
1 " исходные объекты оставляются.

Возвращаемое значение:

указатель на получившийся объект или группу объектов " в случае удачного завершения,
0 " в случае неудачи.

Примечание:

1.  Если указатель obj равен нулю, то зеркально отображаются выделенные объекты доку"
мента.

2.  Функция устарела, рекомендуется вместо нее использовать функцию ksSymmetryObj.

TransformObj  Преобразовать объект по установленной 
матрице
Пример...
Аналог данной функции при использовании Automation " метод
ksDocument2D::ksTransformObj.
Синтаксис:
int TransformObj (reference ref);
Входной параметр:

ref " указатель на объект.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Для работы с матрицами служат функции Mtr и DeleteMtr.

Функции работы с текстовым документом
CreateTextDocument  Создать текстовый документ
Аналог данной функции при использовании Automation " метод
ksDocumentTxt::ksCreateDocument.
4549



Синтаксис:
reference CreateTextDocument (TextDocumentParam * par);
Входные параметры:

par " указатель на структуру параметров TextDocumentParam.

Возвращаемое значение:

указатель на документ " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1. Документ становится текущим (видимым или невидимым).
2. Задается полное имя файла.
3. При использовании Unicode следует использовать функцию CreateTextDocumentW.

CreateTextDocumentW  Создать текстовый 
документ (Unicode)
Аналог данной функции при использовании Automation " метод
ksDocumentTxt::ksCreateDocument.
Синтаксис:
reference LIB_FUNC CreateTextDocumentW (TextDocumentParamW * par);
Входные параметры:

par " указатель на структуру параметров TextDocumentParam.

Возвращаемое значение:

указатель на документ " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1. Документ становится текущим (видимым или невидимым).
2. Задается полное имя файла.
3. При использовании ANSI следует использовать функцию CreateTextDocument.

ksGetTxtDocumentPagesCount  Получить количество 
листов текстового документа
Аналог данной функции при использовании Automation " метод
ksDocumentTxt::GetTxtDocumentPagesCount.
Синтаксис:
int ksGetTxtDocumentPagesCount (reference txtDoc);
4550



Входные параметры:

txtDoc " указатель на текстовый документ.

Возвращаемое значение:

количество листов " в случае успешного завершения,
0 " в случае неудачи.

Примечание:
Если txtDoc=0 " возвращается количество листов текущего текстового документа.

Функции работы с файлами документов
Функции данного раздела обеспечивают вызов диалогов выбора файлов и получение
ссылки на текущий документ.

ChoiceFile  Показать диалог и выбрать в нем имя 
файла для чтения
Пример...
Аналог данной функции при использовании Automation " метод
KompasObject::ksChoiceFile.
Синтаксис:
unsigned int ChoiceFile (char *ext, char *filtr, char *name, unsigned int sizeBuf);
Входные параметры:

ext " расширение имени файла,
filtr " фильтр поиска 

(0 " формируется автоматически),
sizeBuf " размер буфера для имени файла.

Выходные параметры:

name " буфер для имени файла.

Возвращаемое значение:

длина имени файла " в случае удачного завершения,
NULL " в случае отказа от выбора.

FullFileName  Получить полное имя файла
Пример...
Аналог данной функции при использовании Automation " метод
KompasObject::ksFullFileName.
4551



Синтаксис:
unsigned int LIB_FUNC FullFileName (LPSTR oldName, LPSTR newName, unsigned int
sizeBuf);
Входные параметры:

oldName " буфер для имени файла,
sizeBuf " размер буфера для имени файла.

Выходные параметры:

newName " буфер для полного имени файла.

Возвращаемое значение:

длина имени файла " в случае удачного завершения,
NULL " в случае отказа от выбора.

Примечание:

1.  Если sizeBuf меньше требуемой длины " newName не формируется.
2.  При использовании Unicode следует использовать функцию FullFileNameW.

FullFileNameW  Получить полное имя файла 
(Unicode)
Аналог данной функции при использовании Automation " метод
KompasObject::ksFullFileName.
Синтаксис:
unsigned int FullFileNameW (LPWSTR oldName, LPWSTR newName, unsigned int sizeBuf);
Входные параметры:

oldName " буфер для имени файла,
sizeBuf " размер буфера для имени файла.

Выходные параметры:

newName " буфер для полного имени файла.

Возвращаемое значение:

длина имени файла " в случае удачного завершения,
NULL " в случае отказа от выбора.

Примечание:

1.  Если sizeBuf меньше требуемой длины " newName не формируется.
2.  При использовании ANSI следует использовать функцию FullFileName.
4552



GetRightFileName  Получить действительное имя 
файла
Пример...
Синтаксис:
unsigned int GetRightFileName (char *fileName, unsigned int sizeBuf);
Входные параметры:

fileName " буфер для имени файла,
sizeBuf " размер буфера для имени файла.

Возвращаемое значение:

длина имени файла " в случае удачного завершения,
NULL " в случае неудачи.

Примечание.
При использовании Unicode следует использовать функцию GetRightFileNameW.

GetRightFileNameW  Получить действительное имя 
файла (Unicode)
Синтаксис:
unsigned int LIB_FUNC GetRightFileNameW (LPWSTR fileName, unsigned int sizeBuf);
Входные параметры:

fileName " буфер для имени файла,
sizeBuf " размер буфера для имени файла.

Возвращаемое значение:

длина имени файла " в случае удачного завершения,
NULL " в случае неудачи.

Примечание.
При использовании ANSI следует использовать функцию GetRightFileName.

ksSelectD3Model  Выбрать из списка открытых или 
из файла модели
Аналог данной функции при использовании Automation " метод
KompasObject::ksSelectD3Model.
Синтаксис:
int LIB_FUNC  ksSelectD3Model( char        *name,
                               unsigned int bufLen,
4553



                               bool         onlyDetail,
                               bool         showAddNum );
Входные параметры:

bufLen " размер буфера name в символах,
onlyDetail " только детали,
showAddNum " отображать комбобокс выбора дополнительного номера.

Выходные параметры:

name  имя файла.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
В диалоге выбора файла могут быть выбраны также обозначение исполнения и допол"
нительный номер исполнения, если они были созданы в файле модели.
Получить выбранное обозначение исполнения можно с помощью функции
ksGetSelectedEmbodimentMarking.
Получить выбранный дополнительный номер исполнения можно с помощью функции
ksGetSelectedEmbodimentAdditionalNumber.

ksSelectD3ModelW  Выбрать из списка открытых или 
из файла модели. Unicode
Аналог данной функции при использовании Automation " метод
KompasObject::ksSelectD3Model.
Синтаксис:
int LIB_FUNC  ksSelectD3Model( LPWSTR       name,
                               unsigned int bufLen,
                               bool         onlyDetail,
                               bool         showAddNum );
Входные параметры:

bufLen " размер буфера name в символах,
onlyDetail " только детали,
showAddNum " отображать комбобокс выбора дополнительного номера.

Выходные параметры:
 

name " имя файла.
4554



Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
В диалоге выбора файла могут быть выбраны также обозначение исполнения и допол"
нительный номер исполнения, если они были созданы в файле модели.
Получить выбранное обозначение исполнения можно с помощью функции
ksGetSelectedEmbodimentMarkingW.
Получить выбранный дополнительный номер исполнения можно с помощью функции
ksGetSelectedEmbodimentAdditionalNumberW.

ksGetSelectedEmbodimentMarking  Возвращает 
обозначение исполнения, выбранное в диалоге 
выбора файла (ksSelectD3Model)
Аналог данной функции при использовании Automation " метод
KompasObject::ksGetSelectedEmbodimentMarking.
Синтаксис:
int LIB_FUNC  ksGetSelectedEmbodimentMarking( char        *marking,
                                              unsigned int bufLen );
Входные параметры:

bufLen " размер буфера marking в символах.

Выходные параметры:

marking " обозначение исполнения.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
В диалоге выбора файла ksSelectD3Model может быть выбран также дополнительный
номер, если он был создан в файле модели.
Получить выбранный дополнительный номер исполнения можно с помощью функции
ksGetSelectedEmbodimentAdditionalNumber.
4555



ksGetSelectedEmbodimentMarkingW  Возвращает 
обозначение исполнения, выбранное в диалоге 
выбора файла (ksSelectD3ModelW)
Аналог данной функции при использовании Automation " метод
KompasObject::ksGetSelectedEmbodimentMarking.
Синтаксис:
int LIB_FUNC  ksGetSelectedEmbodimentMarkingW( LPWSTR      marking, 
                                               unsigned int bufLen );
Входные параметры:

bufLen " размер буфера marking в символах.

Выходные параметры:

marking " обозначение исполнения.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
В диалоге выбора файла ksSelectD3ModelW может быть выбран также дополнительный
номера, если он был создан в файле модели.
Получить выбранный дополнительный номер исполнения можно с помощью функции
ksGetSelectedEmbodimentAdditionalNumberW.

ksGetSelectedEmbodimentAdditionalNumber  
Возвращает дополнительный номер исполнения, 
выбранного в диалоге выбора файла 
(ksSelectD3Model)
Аналог данной функции при использовании Automation " метод
KompasObject::ksGetSelectedEmbodimentMarking.
Синтаксис:
int LIB_FUNC  ksGetSelectedEmbodimentAdditionalNumber( char *additionalNumber,
                                                       unsigned int bufLen );
Входные параметры:

bufLen " размер буфера marking в символах.

Выходные параметры:
4556



additionalNumber " дополнительный номер исполнения.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
В диалоге выбора файла ksSelectD3Model может быть выбрано также обозначение ис"
полнения, если оно было создано в файле модели.
Получить выбранное обозначение исполнения можно с помощью функции
ksGetSelectedEmbodimentMarking.

ksGetSelectedEmbodimentAdditionalNumberW  
Возвращает дополнительный номер исполнения, 
выбранного в диалоге выбора файла 
(ksSelectD3ModelW). Unicode
Аналог данной функции при использовании Automation " метод
KompasObject::ksGetSelectedEmbodimentMarking.
Синтаксис:
int LIB_FUNC  ksGetSelectedEmbodimentAdditionalNumberW( LPWSTR additionalNumber,
                                                       unsigned int bufLen );
Входные параметры:

bufLen " размер буфера marking в символах.

Выходные параметры:

additionalNumber " дополнительный номер исполнения.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание:
В диалоге выбора файла ksSelectD3ModelW может быть выбрано также обозначение ис"
полнения, если оно было создано в файле модели.
Получить выбранное обозначение исполнения можно с помощью функции
ksGetSelectedEmbodimentMarkingW.
4557



ksChoiceFile  Выдать диалог выбора файла для 
чтения
Пример...
Аналог данной функции при использовании Automation " метод
KompasObject::ksChoiceFile
Синтаксис:
unsigned  int ksChoiceFile (char *ext,
char * filter,
char * name,
unsigned int bufLen,
unsigned char preview);
Входные параметры:

Ext " расширение имени файла,
Filter " фильтр поиска 

(0 " формируется автоматически),
Preview " признак подключения окна предварительного просмотра:

1 " с подключением окна,
0 " без подключения окна.

Выходные параметры:

Name " буфер для имени файла,
bufLen " длина отведенного буфера для name в символах.

Возвращаемое значение:

требуемая длина буфера в символах " в случае удачного завершения,
NULL " в случае отказа от выбора.

Примечание:

1. Если размер отведенного буфера bufLen меньше требуемой длины, то имя файла не за"
полняется. В этом случае имя файла можно получить функцией GetRightFileName.

2.  При использовании Unicode следует использовать функцию ksChoiceFileW.

ksChoiceFileW  Выдать диалог выбора файла для 
чтения (Unicode)
Аналог данной функции при использовании Automation " метод
KompasObject::ksChoiceFile
Синтаксис:
unsigned  int LIB_FUNK ksChoiceFileW (LPWSTR ext,
LPWSTR filter,
4558



LPWSTR name,
unsigned int bufLen,
unsigned char preview);
Входные параметры:

Ext " расширение имени файла,
Filter " фильтр поиска 

(0 " формируется автоматически),
Preview " признак подключения окна предварительного просмотра:

1 " с подключением окна,
0 " без подключения окна.

Выходные параметры:

name " буфер для имени файла,
bufLen " длина отведенного буфера для name в символах.

Возвращаемое значение:

требуемая длина буфера в символах " в случае удачного завершения,
NULL " в случае отказа от выбора.

Примечание:

1.  Если размер отведенного буфера bufLen меньше требуемой длины " имя файла не за"
полняется. В этом случае имя файла можно получить функцией GetRightFileName.

2.  При использовании ANSI следует использовать функцию ksChoiceFile.

ksChoiceFiles  Выдать диалог выбора файлов для 
чтения
Пример...
Аналог данной функции при использовании Automation " метод
KompasObject::ksChoiceFiles
Синтаксис:
int ksChoiceFile (char * ext,
char * filter,
reference p,
unsigned char preview);
Входные параметры:

ext " расширение имени файла,
filter " фильтр поиска 

(0 " формируется автоматически),
4559



preview " признак подключения окна предварительного просмотра:
1 " с подключением окна,
0 " без подключения окна.

Выходной параметр:

p " указатель на динамический массив строк CHAR_STR_ARR 
или CHAR_STR_ARR_W.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Примечание.
При использовании Unicode следует использовать функцию ksChoiceFilesW.

ksChoiceFilesW  Выдать диалог выбора файлов для 
чтения (Unicode)
Аналог данной функции при использовании Automation " метод
KompasObject::ksChoiceFiles
Синтаксис:
int LIB_FUNK ksChoiceFileW (LPWSTR ext,
LPWSTR filter,
reference p,
unsigned char preview);
Входные параметры:

ext " расширение имени файла,
filter " фильтр поиска 

(0 " формируется автоматически),
preview " признак подключения окна предварительного просмотра:

1 " с подключением окна,
0 " без подключения окна.

Выходной параметр:

p " указатель на динамический массив строк CHAR_STR_ARR 
или CHAR_STR_ARR_W.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.
4560



Примечание.
При использовании ANSI следует использовать функцию ksChoiceFiles.

ksChoiceFileAppointedDir  Выдать диалог выбора 
файла для чтения
Пример...
Аналог данной функции при использовании Automation " метод
KompasObject::ksChoiceFileAppointedDir
Синтаксис:
unsigned int ksChoiceFileAppointedDir (char *ext,
char * filter,
char * name,
unsigned int bufLen,
unsigned char preview 
int typeDir);
Входные параметры:

ext " расширение имени файла,
filter " фильтр поиска (0 " фильтр формируется автоматически),
preview " признак подключения окна предварительного просмотра:

1 " с подключением окна,
0 " без подключения окна.

typeDir " стартовая папка.

Выходные параметры:

Name " буфер для имени файла,
bufLen " длина отведенного буфера для name в символах.

Возвращаемое значение:

требуемая длина буфера в символах " в случае удачного завершения,
NULL " в случае отказа от выбора.

Примечание:

1.  Параметр typeDir может иметь значения:
▼ sptSYSTEM_FILES " 0 " открывается папка системных файлов,
▼ sptLIBS_FILES " 1 " открывается папка файлов библиотек. Во всех остальных случаях от"

крывается текущая папка.
2.  Если размер отведенного буфера bufLen меньше требуемой длины " name не заполня"

ется. В этом случае имя файла можно получить функцией GetRightFileName.
3.  При использовании Unicode следует использовать функцию ksChoiceFileAppointedDirW.
4561



ksChoiceFileAppointedDirW  Выдать диалог выбора 
файла для чтения (Unicode)
Аналог данной функции при использовании Automation " метод
KompasObject::ksChoiceFileAppointedDir
Синтаксис:
unsigned int LIB_FUNK ksChoiceFileAppointedDirW (LPWSTR ext,
LPWSTR filter,
LPWSTR name,
unsigned int bufLen,
unsigned char preview 
int typeDir);
Входные параметры:

Ext " расширение имени файла,
Filter " фильтр поиска (0 " фильтр формируется автоматически),
preview " признак подключения окна предварительного просмотра:

1 " с подключением окна,
0 " без подключения окна.

typeDir " стартовая папка.

Выходные параметры:

name " буфер для имени файла,
bufLen " длина отведенного буфера для name в символах.

Возвращаемое значение:

требуемая длина буфера в символах " в случае удачного завершения,
NULL " в случае отказа от выбора.

Примечание:

1.  Параметр typeDir может иметь значения:
▼ sptSYSTEM_FILES " 0 " открывается папка системных файлов,
▼  sptLIBS_FILES " 1 " открывается папка файлов библиотек. Во всех остальных случаях от"

крывается текущая папка
2.  Если размер отведенного буфера bufLen меньше требуемой длины " name не заполня"

ется. В этом случае имя файла можно получить функцией GetRightFileName.
3.  При использовании ANSI следует использовать функцию ksChoiceFileAppointedDir.

ksClearFileCache  Очистить кеш поиска файлов
Синтаксис:
int LIB_FUNC ksClearFileCache();
4562



Примечание:
Кеширование включается при запуске библиотечной команды.

ksClearRecoverError  Очистить признак ошибки 
после открытия файла с восстановлением
Синтаксис:
int LIB_FUNC ksClearRecoverError();

ksFileNameCompare  Сравнить имена файлов
Синтаксис:
int LIB_FUNC ksFileNameCompare( char * fileName1, char * fileName2 );
Входные параметры:

fileName1, fileName2 " сравниваемые имена файлов.

Возвращаемое значение:

1 " имена не совпадают,
0 " имена совпадают.

Примечание.
При использовании Unicode следует использовать функцию ksFileNameCompareW.

ksFileNameCompareW  Сравнить имена файлов 
(Unicode)
Синтаксис:
int LIB_FUNC ksFileNameCompareW( LPWSTR fileName1, LPWSTR fileName2 );
Входные параметры:

fileName1, fileName2 " сравниваемые имена файлов.

Возвращаемое значение:

1 " имена не совпадают,
0 " имена совпадают.

Примечание.
При использовании ANSI следует использовать функцию ksFileNameCompare.
4563



ksGetCurrentDocument  Получить указатель на 
текущий документ
Пример...
Синтаксис:
reference ksGetCurrentDocument (unsigned char type);
Входные параметры:

type " тип документа:
 0 " любой документ,
 1 " только графический документ,
 2 " только спецификация
 3 " объемная модель (деталь или сборка)
 4 " текстовый документ.

Возвращаемое значение:

указатель на документ " в случае удачного завершения,
0 " в случае неудачи.

ksGetFullPathFromSystemPath  Сформировать 
полный путь к файлу из заданного относительного 
пути к файлу и системного пути установленного типа
Пример...
Аналог данной функции при использовании Automation " метод
KompasObject::ksGetFullPathFromSystemPath.
Синтаксис:
void ksGetFullPathFromSystemPath (char *relativePath,
char *destBuff,
int bufLen,
int pathType);
Входные параметры:

relativePath " относительный путь к файлу,
pathType " тип системной папки,
bufLen " длина отведенного буфера для возвращаемого 

значения в символах.

Типы системных папок...
Выходные параметры:

destBuff " буфер для сформированного полного пути к файлу.

Примечание.
4564



При использовании Unicode следует использовать функцию
ksGetFullPathFromSystemPathW.

ksGetFullPathFromSystemPathW  Сформировать 
полный путь к файлу из заданного относительного 
пути к файлу и системного пути установленного типа
Аналог данной функции при использовании Automation " метод
KompasObject::ksGetFullPathFromSystemPath.
Синтаксис:
void LIB_FUNC ksGetFullPathFromSystemPath (LPWSTR relativePath,
LPWSTRdestBuff,
int bufLen,
int pathType);
Входные параметры:

relativePath " относительный путь к файлу,
pathType " тип системной папки,
bufLen " длина отведенного буфера для возвращаемого 

значения в символах.

Типы системных папок...
Выходные параметры:

destBuff " буфер для сформированного полного пути к файлу.

Примечание.
При использовании ANSI следует использовать функцию ksGetFullPathFromSystemPath.

ksGetRecoverError  Получить признак ошибки после 
открытия файла с восстановлением
Синтаксис:
int LIB_FUNC ksGetRecoverError();

ksGetRecoverMode  Получить признак открытия 
файлов в режиме восстановления
Синтаксис:
int LIB_FUNC ksGetRecoverMode();
4565



ksGetFullPathFromRelativePath  Сформировать 
полный путь к файлу из заданного пути к 
задающему файлу и относительного пути к файлу
Пример...
Аналог данной функции при использовании Automation " метод
KompasObject::ksGetFullPathFromRelativePath.
Синтаксис:
void ksGetFullPathFromRelativePath (char *mainFilePath,
char *relativePath,
char *destBuff,
int bufLen);
Входные параметры:

mainFilePath " полный путь к задающему файлу,
relativePath " относительный путь к требуемому файлу (без общей с 

задающим файлом части пути),
bufLen " длина отведенного буфера для возвращаемого 

значения в символах.

Выходные параметры:

destBuff " буфер для сформированного относительного пути к файлу.

Примечание.
При использовании Unicode следует использовать функцию
ksGetFullPathFromRelativePathW.

ksGetFullPathFromRelativePathW  Сформировать 
полный путь к файлу из заданного пути к 
задающему файлу и относительного пути к файлу 
(Unicode)
Аналог данной функции при использовании Automation " метод
KompasObject::ksGetFullPathFromRelativePath.
Синтаксис:
void LIB_FUNC ksGetFullPathFromRelativePathW (LPWSTR mainFilePath,
LPWSTR relativePath,
LPWSTR destBuff,
int bufLen);
Входные параметры:

mainFilePath " полный путь к задающему файлу,
4566



relativePath " относительный путь к требуемому файлу (без общей с задающим 
файлом части пути),

bufLen " размер буфера для возвращаемого значения.
Выходные параметры:

destBuff " буфер для сформированного относительного пути к файлу.

Примечание.
При использовании ANSI следует использовать функцию ksGetFullPathFromRelativePath.

ksGetRelativePathFromFullPath  Сформировать 
относительный путь к файлу из полного пути к 
задающему файлу и полного пути к файлу
Пример...
Аналог данной функции при использовании Automation " метод
KompasObject::ksGetRelativePathFromFullPath.
Синтаксис:
void ksGetRelativePathFromFullPath (char *mainFilePath,
char *sourcePath,
char *destBuff,
int bufLen);
Входные параметры:

mainFilePath " полный путь к задающему файлу,
sourcePath " полный путь к требуемому файлу,
bufLen " длина отведенного буфера для возвращаемого 

значения в символах.

Выходные параметры:

destBuff " буфер для сформированного относительного пути к файлу.

Примечание.
При использовании Unicode следует использовать функцию
ksGetRelativePathFromFullPathW.

ksGetRelativePathFromFullPathW  Сформировать 
относительный путь к файлу из полного пути к 
задающему файлу и полного пути к файлу (Unicode)
Аналог данной функции при использовании Automation " метод
KompasObject::ksGetRelativePathFromFullPath.
Синтаксис:
4567



d

void LIB_FUNC ksGetRelativePathFromFullPath (LPWSTR mainFilePath,
LPWSTR sourcePath,
LPWSTR destBuff,
int bufLen);
Входные параметры:

mainFilePath " полный путь к задающему файлу,
sourcePath " полный путь к требуемому файлу,
bufLen " длина отведенного буфера для возвращаемого значения в символах.

Возвращаемое значение:

destBuff " буфер для сформированного относительного пути к файлу.

Примечание.
При использовании ANSI следует использовать функцию ksGetRelativePathFromFullPath.

ksGetRelativePathFromSystemPath  Сформировать 
относительный путь к файлу из заданного полного 
пути к файлу
Пример...
Аналог данной функции при использовании Automation " метод
KompasObject::ksGetRelativePathFromSystemPath.
Синтаксис:
void ksGetRelativePathFromSystemPath (char *sourcePath,
char *destBuff,
int bufLen,
int pathType);
Входные параметры:

sourcePath  " полный путь к файлу,
bufLen " длина отведенного буфера для возвращаемого 

значения в символах,
pathType " тип системной папки.

Типы системных папок...
Выходные параметры:

estBuff " буфер для сформированного относительного пути к файлу.

Примечание.
При использовании Unicode следует использовать функцию
ksGetRelativePathFromSystemPathW.
4568



ksGetRelativePathFromSystemPathW  Сформировать 
относительный путь к файлу из заданного полного 
пути к файлу (Unicode)
Аналог данной функции при использовании Automation " метод
KompasObject::ksGetRelativePathFromSystemPath.
Синтаксис:
void LIB_FUNC ksGetRelativePathFromSystemPath (LPWSTR sourcePath,
LPWSTR destBuff,
int bufLen,
int pathType);
Входные параметры:

sourcePath  " полный путь к файлу,
bufLen " длина отведенного буфера для возвращаемого значения в 

символах,
pathType " тип системной папки.

Типы системных папок...
Выходные параметры:

destBuff " буфер для сформированного относительного пути к файлу.

Примечание.
При использовании ANSI следует использовать функцию
ksGetRelativePathFromSystemPath.

ksLockFileCache  Выключить/включить 
кеширование поиска файлов
Синтаксис:
int LIB_FUNC ksLockFileCache( int lock );
Входные параметры:

lock " TRUE " запретить кеширование,
" FALSE " разрешить кеширование.

Возвращаемое значение:
Предыдущее значение флага.
Примечание:
Кеширование включается при запуске библиотечной команды.
4569



ksSaveFile  Выдать диалог выбора файла для 
сохранения
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/Glava_12_Sozdanie_sohranenie_dok.htm
Аналог данной функции при использовании Automation " метод
KompasObject::ksSaveFile.
Синтаксис:
unsigned  int ksSaveFile (char * ext,
char * oldName,
char * filter,
char * name,
unsigned int bufLen,
unsigned char preview);
Входные параметры:

Ext " расширение имени файла,
oldName " имя файла по умолчанию,
Filter " фильтр поиска 

(0 " формируется автоматически),
Preview " признак подключения окна предварительного просмотра:

1 " с подключением окна,
0 " без подключения окна.

Выходные параметры:

Name " буфер для имени файла,
bufLen " длина отведенного буфера для name в символах.

Возвращаемое значение:

" требуемая длина буфера в символах.

Описание:
Если размер отведенного буфера меньше требуемой длины bufLen, имя файла не запол"
няется. В этом случае имя файла можно получить функцией GetRightFileName.
Примечание.
При использовании Unicode следует использовать функцию ksSaveFileW.
4570



ksSaveFileW  Выдать диалог выбора файла для 
сохранения (Unicode)
Справка системы КОМПАС...
KOMPAS.chm::/Glava_12_Sozdanie_sohranenie_dok.htm
Аналог данной функции при использовании Automation " метод
KompasObject::ksSaveFile.
Синтаксис:
unsigned  int LIB_FUNC ksSaveFile (LPWSTR ext,
LPWSTR oldName,
LPWSTR filter,
LPWSTR name,
unsigned int bufLen,
unsigned char preview);
Входные параметры:

Ext " расширение имени файла,
oldName " имя файла по умолчанию,
Filter " фильтр поиска 

(0 " формируется автоматически),
preview " признак подключения окна предварительного просмотра:

1 " с подключением окна,
0 " без подключения окна.

Выходные параметры:

Name " буфер для имени файла,
bufLen " длина отведенного буфера для name в символах.

Возвращаемое значение:

" требуемая длина буфера в символах.

Описание:
Если размер отведенного буфера меньше требуемой длины bufLen " имя файла не за"
полняется. В этом случае имя файла можно получить функцией GetRightFileName.
Примечание.
При использовании ANSI следует использовать функцию ksSaveFile.

ksSetRecoverMode  Установить признак открытия 
файлов в режиме восстановления
Синтаксис:
int LIB_FUNC ksSetRecoverMode( int mode );
4571



RemoveUniqueFile  Удалить уникальный служебный 
файл
Пример...
Аналог данной функции при использовании Automation " метод
KompasObject::ksRemoveUniqueFile.
Синтаксис:
void RemoveUniqueFile (char *nameFile);
Описание:
Удалить служебный файл с уникальным именем, предварительно полученным с помо"
щью функции UniqueFileName.
Возвращаемое значение:

1 " в случае успешного выполнения,
0 " в случае ошибки.

Примечание.
При использовании Unicode следует использовать функцию RemoveUniqueFileW.

RemoveUniqueFileW  Удалить уникальный 
служебный файл (Unicode)
Аналог данной функции при использовании Automation " метод
KompasObject::ksRemoveUniqueFile.
Синтаксис:
void LIB_FUNC RemoveUniqueFileW (LPWSTR nameFile);
Описание:
Удалить служебный файл с уникальным именем, предварительно полученным с помо"
щью функции UniqueFileName.
Возвращаемое значение:

1 " в случае успешного выполнения,
0 " в случае ошибки.

Примечание.
При использовании ANSI следует использовать функцию RemoveUniqueFile.

UniqueFileName  Получить уникальное имя файла
Пример...
Аналог данной функции при использовании Automation " метод
KompasObject::ksUniqueFileName.
Синтаксис:
4572



unsigned int UniqueFileName (char *buff, unsigned int sizeBuf);
Входные параметры:

buff " буфер для имени файла,
sizeBuf " размер буфера для имени файла.

Возвращаемое значение:

длина имени файла " в случае удачного завершения,
NULL " в случае неудачи.

Примечание:

1.  Получить уникальное имя для создания служебного файла в процессе работы библио"
теки и поместить его в буфер buff. Параметр sizeBuf определяет размер буфера. Имя ре"
гистрируется и запоминается системой. По окончании работы в случае, если файл с та"
ким именем существует, он будет автоматически удален.

2.  При использовании Unicode следует использовать функцию UniqueFileNameW.

UniqueFileNameW  Получить уникальное имя файла 
(Unicode)
Аналог данной функции при использовании Automation " метод
KompasObject::ksUniqueFileName.
Синтаксис:
unsigned int LIB_FUNC UniqueFileNameW (LPWSTR buff, unsigned int sizeBuf);
Входные параметры:

buff " буфер для имени файла,
sizeBuf " размер буфера для имени файла.

Возвращаемое значение:

длина имени файла " в случае удачного завершения,
NULL " в случае неудачи.

Примечание:

1.  Получить уникальное имя для создания служебного файла в процессе работы библио"
теки и поместить его в буфер buff. Параметр sizeBuf определяет размер буфера. Имя ре"
гистрируется и запоминается системой. По окончании работы в случае, если файл с та"
ким именем существует, он будет автоматически удален.

2.  При использовании ANSI следует использовать функцию UniqueFileName.

Функции работы с документомспецификацией
Функции данного раздела позволяют работать с документом"спецификацией.
4573



CreateSpcIterator  Создать итератор для перебора 
объектов спецификации
Пример...
Аналог данной функции при использовании Automation " метод
ksIterator::ksCreateSpcIterator.
Синтаксис:
reference CreateSpcIterator (char * nameLib,
unsigned int styleNumb,
int spcObjType); 
Входные параметры:

nameLib " имя библиотеки стилей спецификации,
styleNumb " номер стиля спецификации в библиотеке,
spcObjType " тип объектов:

0 " базовые,
1 " вспомогательные,
2 " базовые и вспомогательные из сортированного массива,
3 " все объекты.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Если функция вызывается в графическом документе, то итератор создается для объек"
тов, образованных по описанию, определяемому именем библиотеки стилей специфи"
кации и номером стиля.

2.  В документе"спецификации параметры nameLib и styleNumb не используются (т.к. все
объекты в ней создаются по единственному описанию, однозначно определяемому теку"
щим стилем).

3.  При использовании Unicode следует использовать функцию CreateSpcIteratorW.

CreateSpcIteratorW  Создать итератор для перебора 
объектов спецификации (Unicode)
Аналог данной функции при использовании Automation " метод
ksIterator::ksCreateSpcIterator.
Синтаксис:
reference CreateSpcIteratorW (LPWSTR nameLib,
unsigned int styleNumb,
int spcObjType); 
Входные параметры:
4574



nameLib " имя библиотеки стилей спецификации,
styleNumb " номер стиля спецификации в библиотеке,
spcObjType " тип объектов:

0 " базовые,
1 " вспомогательные,
2 " базовые и вспомогательные из сортированного массива,
3 " все объекты.

Возвращаемое значение:

1 " в случае успешного завершения,
0 " в случае неудачи.

Примечание:

1.  Если функция вызывается в графическом документе, то итератор создается для объек"
тов, образованных по описанию, определяемому именем библиотеки стилей специфи"
кации и номером стиля.

2.  В документе"спецификации параметры nameLib и styleNumb не используются (т.к. все
объекты в ней создаются по единственному описанию, однозначно определяемому теку"
щим стилем).

3.  При использовании ANSI следует использовать функцию CreateSpcIterator.

D3GetSpcObjForGeomWithLimit  Получить указатель 
на объект спецификации, подключенный к 
трехмерному компоненту (детали или подсборке) с 
ограничениями по номеру раздела и типу атрибута
Справка системы КОМПАС...
KOMPAS.chm::/1154_132_2_Obwekty_specifikacii.htm
Аналог данного метода при при использовании Automation " метод
D3GetSpcObjForGeomWithLimit.
Синтаксис:
long D3GetSpcObjForGeomWithLimit (BSTR nameLib, 
long numb, 
LPDISPATCH part, 
short first, 
short section, 
double attrTypeNumb);
Входные параметры:

nameLib " имя библиотеки стилей спецификации,
numb " номер стиля спецификации в библиотеке,
4575



part " указатель на интерфейс добавляемого компонента ksPart,
first " 1 "первый объект, 0 " следующий объект,
section " номер раздела, в котором нужно найти объект (0 " номер не 

ограничивается),
attrTypeNumb " номер типа атрибута, для которого нужно найти объект (0 " 

номер не ограничивается).
Возвращаемое значение:

" указатель на объект спецификации.

D3SpcIncludePart  Добавить или изменить 
трехмерный компонент (деталь или подсборку) в 
объекте спецификации
Аналог данного метода при использовании Automation " метод  D3SpcIncludePart.
Синтаксис:
BOOL D3SpcIncludePart (LPDISPATCH part, BOOL fillTexts);
Входные параметры:

part " указатель на интерфейс компонента ksPart,
fillTexts " признак автоматического заполнения: наименование, 

обозначение, масса из свойств ksPart:
TRUE " автозаполнение включено, 
FALSE " выключено.

Возвращаемое значение:

TRUE " в случае удачного завершения.

ksAddSpcDescription  Добавить описание 
спецификации в графический документ
Пример...

Справка системы КОМПАС...
KOMPAS.chm::/DLG_SPC_DESCRIBE.htm
Аналог данной функции при использовании Automation " метод
ksSpecification::ksAddSpcDescription.
Синтаксис:
int ksAddSpcDescription (reference pDoc,
SpcDescrParam* param);
Входной параметр:
4576



pDoc " указатель на документ,
param " параметры описания спецификации.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Структура параметров описания спецификации....
Примечание.
При использовании Unicode следует использовать функцию ksAddSpcDescriptionW.

ksAddSpcDescriptionW  Добавить описание 
спецификации в графический документ (Unicode
Справка системы КОМПАС...
KOMPAS.chm::/DLG_SPC_DESCRIBE.htm
Аналог данной функции при использовании Automation " метод
ksSpecification::ksAddSpcDescription.
Синтаксис:
int ksAddSpcDescriptionW (reference pDoc,
SpcDescrParamW* param);
Входной параметр:

pDoc " указатель на документ,
param " параметры описания спецификации.

Возвращаемое значение:

1 " в случае удачного завершения,
0 " в случае неудачи.

Структура параметров описания спецификации....
Примечание.
При использовании ANSI следует использовать функцию ksAddSpcDescription.

ksD3GetSpcObjGeometry  Получить деталь или 
подсборку, подключенную к объекту спецификации
Аналог данного метода при при использовании Automation " метод
